/*
 * Automatically generated by codegen/smith.ts.
 * Do not edit this file or add other files to this directory.
 */

import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'

import { seamApiLtsVersion } from 'lib/lts-version.js'
import {
  getAuthHeadersForClientSessionToken,
  warnOnInsecureuserIdentifierKey,
} from 'lib/seam/connect/auth.js'
import { type Client, createClient } from 'lib/seam/connect/client.js'
import {
  isSeamHttpOptionsWithApiKey,
  isSeamHttpOptionsWithClient,
  isSeamHttpOptionsWithClientSessionToken,
  isSeamHttpOptionsWithConsoleSessionToken,
  isSeamHttpOptionsWithPersonalAccessToken,
  type SeamHttpFromPublishableKeyOptions,
  SeamHttpInvalidOptionsError,
  type SeamHttpOptions,
  type SeamHttpOptionsWithApiKey,
  type SeamHttpOptionsWithClient,
  type SeamHttpOptionsWithClientSessionToken,
  type SeamHttpOptionsWithConsoleSessionToken,
  type SeamHttpOptionsWithPersonalAccessToken,
  type SeamHttpRequestOptions,
} from 'lib/seam/connect/options.js'
import {
  limitToSeamHttpRequestOptions,
  parseOptions,
} from 'lib/seam/connect/parse-options.js'
import { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'
import { SeamPaginator } from 'lib/seam/connect/seam-paginator.js'
import type { SetNonNullable } from 'lib/types.js'

export class SeamHttpClientSessions {
  client: Client
  readonly defaults: Required<SeamHttpRequestOptions>
  readonly ltsVersion = seamApiLtsVersion
  static ltsVersion = seamApiLtsVersion

  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {
    const options = parseOptions(apiKeyOrOptions)
    this.client = 'client' in options ? options.client : createClient(options)
    this.defaults = limitToSeamHttpRequestOptions(options)
  }

  static fromClient(
    client: SeamHttpOptionsWithClient['client'],
    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},
  ): SeamHttpClientSessions {
    const constructorOptions = { ...options, client }
    if (!isSeamHttpOptionsWithClient(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError('Missing client')
    }
    return new SeamHttpClientSessions(constructorOptions)
  }

  static fromApiKey(
    apiKey: SeamHttpOptionsWithApiKey['apiKey'],
    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},
  ): SeamHttpClientSessions {
    const constructorOptions = { ...options, apiKey }
    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError('Missing apiKey')
    }
    return new SeamHttpClientSessions(constructorOptions)
  }

  static fromClientSessionToken(
    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],
    options: Omit<
      SeamHttpOptionsWithClientSessionToken,
      'clientSessionToken'
    > = {},
  ): SeamHttpClientSessions {
    const constructorOptions = { ...options, clientSessionToken }
    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')
    }
    return new SeamHttpClientSessions(constructorOptions)
  }

  static async fromPublishableKey(
    publishableKey: string,
    userIdentifierKey: string,
    options: SeamHttpFromPublishableKeyOptions = {},
  ): Promise<SeamHttpClientSessions> {
    warnOnInsecureuserIdentifierKey(userIdentifierKey)
    const clientOptions = parseOptions({ ...options, publishableKey })
    if (isSeamHttpOptionsWithClient(clientOptions)) {
      throw new SeamHttpInvalidOptionsError(
        'The client option cannot be used with SeamHttpClientSessions.fromPublishableKey',
      )
    }
    const client = createClient(clientOptions)
    const clientSessions = SeamHttpClientSessions.fromClient(client)
    const { token } = await clientSessions.getOrCreate({
      user_identifier_key: userIdentifierKey,
    })
    return SeamHttpClientSessions.fromClientSessionToken(token, options)
  }

  static fromConsoleSessionToken(
    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],
    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],
    options: Omit<
      SeamHttpOptionsWithConsoleSessionToken,
      'consoleSessionToken' | 'workspaceId'
    > = {},
  ): SeamHttpClientSessions {
    const constructorOptions = { ...options, consoleSessionToken, workspaceId }
    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError(
        'Missing consoleSessionToken or workspaceId',
      )
    }
    return new SeamHttpClientSessions(constructorOptions)
  }

  static fromPersonalAccessToken(
    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],
    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],
    options: Omit<
      SeamHttpOptionsWithPersonalAccessToken,
      'personalAccessToken' | 'workspaceId'
    > = {},
  ): SeamHttpClientSessions {
    const constructorOptions = { ...options, personalAccessToken, workspaceId }
    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError(
        'Missing personalAccessToken or workspaceId',
      )
    }
    return new SeamHttpClientSessions(constructorOptions)
  }

  createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(
    request: SeamHttpRequest<TResponse, TResponseKey>,
  ): SeamPaginator<TResponse, TResponseKey> {
    return new SeamPaginator<TResponse, TResponseKey>(this, request)
  }

  async updateClientSessionToken(
    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],
  ): Promise<void> {
    const { headers } = this.client.defaults
    const authHeaders = getAuthHeadersForClientSessionToken({
      clientSessionToken,
    })
    for (const key of Object.keys(authHeaders)) {
      if (headers[key] == null) {
        throw new Error(
          'Cannot update a clientSessionToken on a client created without a clientSessionToken',
        )
      }
    }
    this.client.defaults.headers = { ...headers, ...authHeaders }
    const clientSessions = SeamHttpClientSessions.fromClient(this.client)
    await clientSessions.get()
  }

  create(
    parameters?: ClientSessionsCreateParameters,
    options: ClientSessionsCreateOptions = {},
  ): SeamHttpRequest<ClientSessionsCreateResponse, 'client_session'> {
    return new SeamHttpRequest(this, {
      pathname: '/client_sessions/create',
      method: 'PUT',
      body: parameters,
      responseKey: 'client_session',
      options,
    })
  }

  delete(
    parameters?: ClientSessionsDeleteParameters,
    options: ClientSessionsDeleteOptions = {},
  ): SeamHttpRequest<void, undefined> {
    return new SeamHttpRequest(this, {
      pathname: '/client_sessions/delete',
      method: 'POST',
      body: parameters,
      responseKey: undefined,
      options,
    })
  }

  get(
    parameters?: ClientSessionsGetParameters,
    options: ClientSessionsGetOptions = {},
  ): SeamHttpRequest<ClientSessionsGetResponse, 'client_session'> {
    return new SeamHttpRequest(this, {
      pathname: '/client_sessions/get',
      method: 'POST',
      body: parameters,
      responseKey: 'client_session',
      options,
    })
  }

  getOrCreate(
    parameters?: ClientSessionsGetOrCreateParameters,
    options: ClientSessionsGetOrCreateOptions = {},
  ): SeamHttpRequest<ClientSessionsGetOrCreateResponse, 'client_session'> {
    return new SeamHttpRequest(this, {
      pathname: '/client_sessions/get_or_create',
      method: 'POST',
      body: parameters,
      responseKey: 'client_session',
      options,
    })
  }

  grantAccess(
    parameters?: ClientSessionsGrantAccessParameters,
    options: ClientSessionsGrantAccessOptions = {},
  ): SeamHttpRequest<void, undefined> {
    return new SeamHttpRequest(this, {
      pathname: '/client_sessions/grant_access',
      method: 'PATCH',
      body: parameters,
      responseKey: undefined,
      options,
    })
  }

  list(
    parameters?: ClientSessionsListParameters,
    options: ClientSessionsListOptions = {},
  ): SeamHttpRequest<ClientSessionsListResponse, 'client_sessions'> {
    return new SeamHttpRequest(this, {
      pathname: '/client_sessions/list',
      method: 'POST',
      body: parameters,
      responseKey: 'client_sessions',
      options,
    })
  }

  revoke(
    parameters?: ClientSessionsRevokeParameters,
    options: ClientSessionsRevokeOptions = {},
  ): SeamHttpRequest<void, undefined> {
    return new SeamHttpRequest(this, {
      pathname: '/client_sessions/revoke',
      method: 'POST',
      body: parameters,
      responseKey: undefined,
      options,
    })
  }
}

export type ClientSessionsCreateParameters =
  RouteRequestBody<'/client_sessions/create'>

/**
 * @deprecated Use ClientSessionsCreateParameters instead.
 */
export type ClientSessionsCreateBody = ClientSessionsCreateParameters

export type ClientSessionsCreateResponse = SetNonNullable<
  Required<RouteResponse<'/client_sessions/create'>>
>

export type ClientSessionsCreateOptions = Record<string, never>

export type ClientSessionsDeleteParameters =
  RouteRequestBody<'/client_sessions/delete'>

/**
 * @deprecated Use ClientSessionsDeleteParameters instead.
 */
export type ClientSessionsDeleteParams = ClientSessionsDeleteParameters

export type ClientSessionsDeleteResponse = SetNonNullable<
  Required<RouteResponse<'/client_sessions/delete'>>
>

export type ClientSessionsDeleteOptions = Record<string, never>

export type ClientSessionsGetParameters =
  RouteRequestBody<'/client_sessions/get'>

/**
 * @deprecated Use ClientSessionsGetParameters instead.
 */
export type ClientSessionsGetParams = ClientSessionsGetParameters

export type ClientSessionsGetResponse = SetNonNullable<
  Required<RouteResponse<'/client_sessions/get'>>
>

export type ClientSessionsGetOptions = Record<string, never>

export type ClientSessionsGetOrCreateParameters =
  RouteRequestBody<'/client_sessions/get_or_create'>

/**
 * @deprecated Use ClientSessionsGetOrCreateParameters instead.
 */
export type ClientSessionsGetOrCreateBody = ClientSessionsGetOrCreateParameters

export type ClientSessionsGetOrCreateResponse = SetNonNullable<
  Required<RouteResponse<'/client_sessions/get_or_create'>>
>

export type ClientSessionsGetOrCreateOptions = Record<string, never>

export type ClientSessionsGrantAccessParameters =
  RouteRequestBody<'/client_sessions/grant_access'>

/**
 * @deprecated Use ClientSessionsGrantAccessParameters instead.
 */
export type ClientSessionsGrantAccessBody = ClientSessionsGrantAccessParameters

export type ClientSessionsGrantAccessResponse = SetNonNullable<
  Required<RouteResponse<'/client_sessions/grant_access'>>
>

export type ClientSessionsGrantAccessOptions = Record<string, never>

export type ClientSessionsListParameters =
  RouteRequestBody<'/client_sessions/list'>

/**
 * @deprecated Use ClientSessionsListParameters instead.
 */
export type ClientSessionsListParams = ClientSessionsListParameters

export type ClientSessionsListResponse = SetNonNullable<
  Required<RouteResponse<'/client_sessions/list'>>
>

export type ClientSessionsListOptions = Record<string, never>

export type ClientSessionsRevokeParameters =
  RouteRequestBody<'/client_sessions/revoke'>

/**
 * @deprecated Use ClientSessionsRevokeParameters instead.
 */
export type ClientSessionsRevokeBody = ClientSessionsRevokeParameters

export type ClientSessionsRevokeResponse = SetNonNullable<
  Required<RouteResponse<'/client_sessions/revoke'>>
>

export type ClientSessionsRevokeOptions = Record<string, never>

/*
 * Automatically generated by codegen/smith.ts.
 * Do not edit this file or add other files to this directory.
 */

import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'

import { seamApiLtsVersion } from 'lib/lts-version.js'
import {
  getAuthHeadersForClientSessionToken,
  warnOnInsecureuserIdentifierKey,
} from 'lib/seam/connect/auth.js'
import { type Client, createClient } from 'lib/seam/connect/client.js'
import {
  isSeamHttpOptionsWithApiKey,
  isSeamHttpOptionsWithClient,
  isSeamHttpOptionsWithClientSessionToken,
  isSeamHttpOptionsWithConsoleSessionToken,
  isSeamHttpOptionsWithPersonalAccessToken,
  type SeamHttpFromPublishableKeyOptions,
  SeamHttpInvalidOptionsError,
  type SeamHttpOptions,
  type SeamHttpOptionsWithApiKey,
  type SeamHttpOptionsWithClient,
  type SeamHttpOptionsWithClientSessionToken,
  type SeamHttpOptionsWithConsoleSessionToken,
  type SeamHttpOptionsWithPersonalAccessToken,
  type SeamHttpRequestOptions,
} from 'lib/seam/connect/options.js'
import {
  limitToSeamHttpRequestOptions,
  parseOptions,
} from 'lib/seam/connect/parse-options.js'
import { SeamHttpClientSessions } from 'lib/seam/connect/routes/client-sessions/index.js'
import { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'
import { SeamPaginator } from 'lib/seam/connect/seam-paginator.js'
import type { SetNonNullable } from 'lib/types.js'

import { SeamHttpAccessCodesSimulate } from './simulate/index.js'
import { SeamHttpAccessCodesUnmanaged } from './unmanaged/index.js'

export class SeamHttpAccessCodes {
  client: Client
  readonly defaults: Required<SeamHttpRequestOptions>
  readonly ltsVersion = seamApiLtsVersion
  static ltsVersion = seamApiLtsVersion

  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {
    const options = parseOptions(apiKeyOrOptions)
    this.client = 'client' in options ? options.client : createClient(options)
    this.defaults = limitToSeamHttpRequestOptions(options)
  }

  static fromClient(
    client: SeamHttpOptionsWithClient['client'],
    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},
  ): SeamHttpAccessCodes {
    const constructorOptions = { ...options, client }
    if (!isSeamHttpOptionsWithClient(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError('Missing client')
    }
    return new SeamHttpAccessCodes(constructorOptions)
  }

  static fromApiKey(
    apiKey: SeamHttpOptionsWithApiKey['apiKey'],
    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},
  ): SeamHttpAccessCodes {
    const constructorOptions = { ...options, apiKey }
    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError('Missing apiKey')
    }
    return new SeamHttpAccessCodes(constructorOptions)
  }

  static fromClientSessionToken(
    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],
    options: Omit<
      SeamHttpOptionsWithClientSessionToken,
      'clientSessionToken'
    > = {},
  ): SeamHttpAccessCodes {
    const constructorOptions = { ...options, clientSessionToken }
    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')
    }
    return new SeamHttpAccessCodes(constructorOptions)
  }

  static async fromPublishableKey(
    publishableKey: string,
    userIdentifierKey: string,
    options: SeamHttpFromPublishableKeyOptions = {},
  ): Promise<SeamHttpAccessCodes> {
    warnOnInsecureuserIdentifierKey(userIdentifierKey)
    const clientOptions = parseOptions({ ...options, publishableKey })
    if (isSeamHttpOptionsWithClient(clientOptions)) {
      throw new SeamHttpInvalidOptionsError(
        'The client option cannot be used with SeamHttpAccessCodes.fromPublishableKey',
      )
    }
    const client = createClient(clientOptions)
    const clientSessions = SeamHttpClientSessions.fromClient(client)
    const { token } = await clientSessions.getOrCreate({
      user_identifier_key: userIdentifierKey,
    })
    return SeamHttpAccessCodes.fromClientSessionToken(token, options)
  }

  static fromConsoleSessionToken(
    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],
    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],
    options: Omit<
      SeamHttpOptionsWithConsoleSessionToken,
      'consoleSessionToken' | 'workspaceId'
    > = {},
  ): SeamHttpAccessCodes {
    const constructorOptions = { ...options, consoleSessionToken, workspaceId }
    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError(
        'Missing consoleSessionToken or workspaceId',
      )
    }
    return new SeamHttpAccessCodes(constructorOptions)
  }

  static fromPersonalAccessToken(
    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],
    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],
    options: Omit<
      SeamHttpOptionsWithPersonalAccessToken,
      'personalAccessToken' | 'workspaceId'
    > = {},
  ): SeamHttpAccessCodes {
    const constructorOptions = { ...options, personalAccessToken, workspaceId }
    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError(
        'Missing personalAccessToken or workspaceId',
      )
    }
    return new SeamHttpAccessCodes(constructorOptions)
  }

  createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(
    request: SeamHttpRequest<TResponse, TResponseKey>,
  ): SeamPaginator<TResponse, TResponseKey> {
    return new SeamPaginator<TResponse, TResponseKey>(this, request)
  }

  async updateClientSessionToken(
    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],
  ): Promise<void> {
    const { headers } = this.client.defaults
    const authHeaders = getAuthHeadersForClientSessionToken({
      clientSessionToken,
    })
    for (const key of Object.keys(authHeaders)) {
      if (headers[key] == null) {
        throw new Error(
          'Cannot update a clientSessionToken on a client created without a clientSessionToken',
        )
      }
    }
    this.client.defaults.headers = { ...headers, ...authHeaders }
    const clientSessions = SeamHttpClientSessions.fromClient(this.client)
    await clientSessions.get()
  }

  get simulate(): SeamHttpAccessCodesSimulate {
    return SeamHttpAccessCodesSimulate.fromClient(this.client, this.defaults)
  }

  get unmanaged(): SeamHttpAccessCodesUnmanaged {
    return SeamHttpAccessCodesUnmanaged.fromClient(this.client, this.defaults)
  }

  create(
    parameters?: AccessCodesCreateParameters,
    options: AccessCodesCreateOptions = {},
  ): AccessCodesCreateRequest {
    return new SeamHttpRequest(this, {
      pathname: '/access_codes/create',
      method: 'POST',
      body: parameters,
      responseKey: 'access_code',
      options,
    })
  }

  createMultiple(
    parameters?: AccessCodesCreateMultipleParameters,
    options: AccessCodesCreateMultipleOptions = {},
  ): AccessCodesCreateMultipleRequest {
    return new SeamHttpRequest(this, {
      pathname: '/access_codes/create_multiple',
      method: 'PUT',
      body: parameters,
      responseKey: 'access_codes',
      options,
    })
  }

  delete(
    parameters?: AccessCodesDeleteParameters,
    options: AccessCodesDeleteOptions = {},
  ): AccessCodesDeleteRequest {
    return new SeamHttpRequest(this, {
      pathname: '/access_codes/delete',
      method: 'POST',
      body: parameters,
      responseKey: undefined,
      options,
    })
  }

  generateCode(
    parameters?: AccessCodesGenerateCodeParameters,
    options: AccessCodesGenerateCodeOptions = {},
  ): AccessCodesGenerateCodeRequest {
    return new SeamHttpRequest(this, {
      pathname: '/access_codes/generate_code',
      method: 'POST',
      body: parameters,
      responseKey: 'generated_code',
      options,
    })
  }

  get(
    parameters?: AccessCodesGetParameters,
    options: AccessCodesGetOptions = {},
  ): AccessCodesGetRequest {
    return new SeamHttpRequest(this, {
      pathname: '/access_codes/get',
      method: 'POST',
      body: parameters,
      responseKey: 'access_code',
      options,
    })
  }

  list(
    parameters?: AccessCodesListParameters,
    options: AccessCodesListOptions = {},
  ): AccessCodesListRequest {
    return new SeamHttpRequest(this, {
      pathname: '/access_codes/list',
      method: 'POST',
      body: parameters,
      responseKey: 'access_codes',
      options,
    })
  }

  pullBackupAccessCode(
    parameters?: AccessCodesPullBackupAccessCodeParameters,
    options: AccessCodesPullBackupAccessCodeOptions = {},
  ): AccessCodesPullBackupAccessCodeRequest {
    return new SeamHttpRequest(this, {
      pathname: '/access_codes/pull_backup_access_code',
      method: 'POST',
      body: parameters,
      responseKey: 'access_code',
      options,
    })
  }

  reportDeviceConstraints(
    parameters?: AccessCodesReportDeviceConstraintsParameters,
    options: AccessCodesReportDeviceConstraintsOptions = {},
  ): AccessCodesReportDeviceConstraintsRequest {
    return new SeamHttpRequest(this, {
      pathname: '/access_codes/report_device_constraints',
      method: 'POST',
      body: parameters,
      responseKey: undefined,
      options,
    })
  }

  update(
    parameters?: AccessCodesUpdateParameters,
    options: AccessCodesUpdateOptions = {},
  ): AccessCodesUpdateRequest {
    return new SeamHttpRequest(this, {
      pathname: '/access_codes/update',
      method: 'PUT',
      body: parameters,
      responseKey: undefined,
      options,
    })
  }

  updateMultiple(
    parameters?: AccessCodesUpdateMultipleParameters,
    options: AccessCodesUpdateMultipleOptions = {},
  ): AccessCodesUpdateMultipleRequest {
    return new SeamHttpRequest(this, {
      pathname: '/access_codes/update_multiple',
      method: 'PATCH',
      body: parameters,
      responseKey: undefined,
      options,
    })
  }
}

export type AccessCodesCreateParameters =
  RouteRequestBody<'/access_codes/create'>

/**
 * @deprecated Use AccessCodesCreateParameters instead.
 */
export type AccessCodesCreateBody = AccessCodesCreateParameters

/**
 * @deprecated Use AccessCodesCreateRequest instead.
 */
export type AccessCodesCreateResponse = SetNonNullable<
  Required<RouteResponse<'/access_codes/create'>>
>

export type AccessCodesCreateRequest = SeamHttpRequest<
  AccessCodesCreateResponse,
  'access_code'
>

// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface AccessCodesCreateOptions {}

export type AccessCodesCreateMultipleParameters =
  RouteRequestBody<'/access_codes/create_multiple'>

/**
 * @deprecated Use AccessCodesCreateMultipleParameters instead.
 */
export type AccessCodesCreateMultipleBody = AccessCodesCreateMultipleParameters

/**
 * @deprecated Use AccessCodesCreateMultipleRequest instead.
 */
export type AccessCodesCreateMultipleResponse = SetNonNullable<
  Required<RouteResponse<'/access_codes/create_multiple'>>
>

export type AccessCodesCreateMultipleRequest = SeamHttpRequest<
  AccessCodesCreateMultipleResponse,
  'access_codes'
>

// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface AccessCodesCreateMultipleOptions {}

export type AccessCodesDeleteParameters =
  RouteRequestBody<'/access_codes/delete'>

/**
 * @deprecated Use AccessCodesDeleteParameters instead.
 */
export type AccessCodesDeleteParams = AccessCodesDeleteParameters

/**
 * @deprecated Use AccessCodesDeleteRequest instead.
 */
export type AccessCodesDeleteResponse = SetNonNullable<
  Required<RouteResponse<'/access_codes/delete'>>
>

export type AccessCodesDeleteRequest = SeamHttpRequest<void, undefined>

// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface AccessCodesDeleteOptions {}

export type AccessCodesGenerateCodeParameters =
  RouteRequestBody<'/access_codes/generate_code'>

/**
 * @deprecated Use AccessCodesGenerateCodeParameters instead.
 */
export type AccessCodesGenerateCodeParams = AccessCodesGenerateCodeParameters

/**
 * @deprecated Use AccessCodesGenerateCodeRequest instead.
 */
export type AccessCodesGenerateCodeResponse = SetNonNullable<
  Required<RouteResponse<'/access_codes/generate_code'>>
>

export type AccessCodesGenerateCodeRequest = SeamHttpRequest<
  AccessCodesGenerateCodeResponse,
  'generated_code'
>

// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface AccessCodesGenerateCodeOptions {}

export type AccessCodesGetParameters = RouteRequestBody<'/access_codes/get'>

/**
 * @deprecated Use AccessCodesGetParameters instead.
 */
export type AccessCodesGetParams = AccessCodesGetParameters

/**
 * @deprecated Use AccessCodesGetRequest instead.
 */
export type AccessCodesGetResponse = SetNonNullable<
  Required<RouteResponse<'/access_codes/get'>>
>

export type AccessCodesGetRequest = SeamHttpRequest<
  AccessCodesGetResponse,
  'access_code'
>

// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface AccessCodesGetOptions {}

export type AccessCodesListParameters = RouteRequestBody<'/access_codes/list'>

/**
 * @deprecated Use AccessCodesListParameters instead.
 */
export type AccessCodesListParams = AccessCodesListParameters

/**
 * @deprecated Use AccessCodesListRequest instead.
 */
export type AccessCodesListResponse = SetNonNullable<
  Required<RouteResponse<'/access_codes/list'>>
>

export type AccessCodesListRequest = SeamHttpRequest<
  AccessCodesListResponse,
  'access_codes'
>

// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface AccessCodesListOptions {}

export type AccessCodesPullBackupAccessCodeParameters =
  RouteRequestBody<'/access_codes/pull_backup_access_code'>

/**
 * @deprecated Use AccessCodesPullBackupAccessCodeParameters instead.
 */
export type AccessCodesPullBackupAccessCodeBody =
  AccessCodesPullBackupAccessCodeParameters

/**
 * @deprecated Use AccessCodesPullBackupAccessCodeRequest instead.
 */
export type AccessCodesPullBackupAccessCodeResponse = SetNonNullable<
  Required<RouteResponse<'/access_codes/pull_backup_access_code'>>
>

export type AccessCodesPullBackupAccessCodeRequest = SeamHttpRequest<
  AccessCodesPullBackupAccessCodeResponse,
  'access_code'
>

// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface AccessCodesPullBackupAccessCodeOptions {}

export type AccessCodesReportDeviceConstraintsParameters =
  RouteRequestBody<'/access_codes/report_device_constraints'>

/**
 * @deprecated Use AccessCodesReportDeviceConstraintsParameters instead.
 */
export type AccessCodesReportDeviceConstraintsBody =
  AccessCodesReportDeviceConstraintsParameters

/**
 * @deprecated Use AccessCodesReportDeviceConstraintsRequest instead.
 */
export type AccessCodesReportDeviceConstraintsResponse = SetNonNullable<
  Required<RouteResponse<'/access_codes/report_device_constraints'>>
>

export type AccessCodesReportDeviceConstraintsRequest = SeamHttpRequest<
  void,
  undefined
>

// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface AccessCodesReportDeviceConstraintsOptions {}

export type AccessCodesUpdateParameters =
  RouteRequestBody<'/access_codes/update'>

/**
 * @deprecated Use AccessCodesUpdateParameters instead.
 */
export type AccessCodesUpdateBody = AccessCodesUpdateParameters

/**
 * @deprecated Use AccessCodesUpdateRequest instead.
 */
export type AccessCodesUpdateResponse = SetNonNullable<
  Required<RouteResponse<'/access_codes/update'>>
>

export type AccessCodesUpdateRequest = SeamHttpRequest<void, undefined>

// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface AccessCodesUpdateOptions {}

export type AccessCodesUpdateMultipleParameters =
  RouteRequestBody<'/access_codes/update_multiple'>

/**
 * @deprecated Use AccessCodesUpdateMultipleParameters instead.
 */
export type AccessCodesUpdateMultipleBody = AccessCodesUpdateMultipleParameters

/**
 * @deprecated Use AccessCodesUpdateMultipleRequest instead.
 */
export type AccessCodesUpdateMultipleResponse = SetNonNullable<
  Required<RouteResponse<'/access_codes/update_multiple'>>
>

export type AccessCodesUpdateMultipleRequest = SeamHttpRequest<void, undefined>

// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface AccessCodesUpdateMultipleOptions {}

/*
 * Automatically generated by generate-routes.ts.
 * Do not edit this file or add other files to this directory.
 */

import type {
  RouteRequestBody,
  RouteRequestParams,
  RouteResponse,
} from '@seamapi/types/connect'
import type { SetNonNullable } from 'type-fest'

import { warnOnInsecureuserIdentifierKey } from 'lib/seam/connect/auth.js'
import { type Client, createClient } from 'lib/seam/connect/client.js'
import {
  isSeamHttpOptionsWithApiKey,
  isSeamHttpOptionsWithClient,
  isSeamHttpOptionsWithClientSessionToken,
  type SeamHttpFromPublishableKeyOptions,
  SeamHttpInvalidOptionsError,
  type SeamHttpOptions,
  type SeamHttpOptionsWithApiKey,
  type SeamHttpOptionsWithClient,
  type SeamHttpOptionsWithClientSessionToken,
} from 'lib/seam/connect/options.js'
import { parseOptions } from 'lib/seam/connect/parse-options.js'

import { SeamHttpClientSessions } from './client-sessions.js'

export class SeamHttpConnectedAccounts {
  client: Client

  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {
    const clientOptions = parseOptions(apiKeyOrOptions)
    this.client = createClient(clientOptions)
  }

  static fromClient(
    client: SeamHttpOptionsWithClient['client'],
    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},
  ): SeamHttpConnectedAccounts {
    const constructorOptions = { ...options, client }
    if (!isSeamHttpOptionsWithClient(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError('Missing client')
    }
    return new SeamHttpConnectedAccounts(constructorOptions)
  }

  static fromApiKey(
    apiKey: SeamHttpOptionsWithApiKey['apiKey'],
    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},
  ): SeamHttpConnectedAccounts {
    const constructorOptions = { ...options, apiKey }
    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError('Missing apiKey')
    }
    return new SeamHttpConnectedAccounts(constructorOptions)
  }

  static fromClientSessionToken(
    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],
    options: Omit<
      SeamHttpOptionsWithClientSessionToken,
      'clientSessionToken'
    > = {},
  ): SeamHttpConnectedAccounts {
    const constructorOptions = { ...options, clientSessionToken }
    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')
    }
    return new SeamHttpConnectedAccounts(constructorOptions)
  }

  static async fromPublishableKey(
    publishableKey: string,
    userIdentifierKey: string,
    options: SeamHttpFromPublishableKeyOptions = {},
  ): Promise<SeamHttpConnectedAccounts> {
    warnOnInsecureuserIdentifierKey(userIdentifierKey)
    const clientOptions = parseOptions({ ...options, publishableKey })
    const client = createClient(clientOptions)
    const clientSessions = SeamHttpClientSessions.fromClient(client)
    const { token } = await clientSessions.getOrCreate({
      user_identifier_key: userIdentifierKey,
    })
    return SeamHttpConnectedAccounts.fromClientSessionToken(token, options)
  }

  async delete(body?: ConnectedAccountsDeleteBody): Promise<void> {
    await this.client.request<ConnectedAccountsDeleteResponse>({
      url: '/connected_accounts/delete',
      method: 'post',
      data: body,
    })
  }

  async get(
    body?: ConnectedAccountsGetParams,
  ): Promise<ConnectedAccountsGetResponse['connected_account']> {
    const { data } = await this.client.request<ConnectedAccountsGetResponse>({
      url: '/connected_accounts/get',
      method: 'post',
      data: body,
    })
    return data.connected_account
  }

  async list(
    params?: ConnectedAccountsListParams,
  ): Promise<ConnectedAccountsListResponse['connected_accounts']> {
    const { data } = await this.client.request<ConnectedAccountsListResponse>({
      url: '/connected_accounts/list',
      method: 'get',
      params,
    })
    return data.connected_accounts
  }
}

export type ConnectedAccountsDeleteBody =
  RouteRequestBody<'/connected_accounts/delete'>

export type ConnectedAccountsDeleteResponse = SetNonNullable<
  Required<RouteResponse<'/connected_accounts/delete'>>
>

export type ConnectedAccountsGetParams =
  RouteRequestBody<'/connected_accounts/get'>

export type ConnectedAccountsGetResponse = SetNonNullable<
  Required<RouteResponse<'/connected_accounts/get'>>
>

export type ConnectedAccountsListParams =
  RouteRequestParams<'/connected_accounts/list'>

export type ConnectedAccountsListResponse = SetNonNullable<
  Required<RouteResponse<'/connected_accounts/list'>>
>

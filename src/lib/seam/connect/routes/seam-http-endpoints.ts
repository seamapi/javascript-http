/*
 * Automatically generated by codegen/smith.ts.
 * Do not edit this file or add other files to this directory.
 */

import { seamApiLtsVersion } from 'lib/lts-version.js'
import {
  getAuthHeadersForClientSessionToken,
  warnOnInsecureuserIdentifierKey,
} from 'lib/seam/connect/auth.js'
import { type Client, createClient } from 'lib/seam/connect/client.js'
import {
  isSeamHttpOptionsWithApiKey,
  isSeamHttpOptionsWithClient,
  isSeamHttpOptionsWithClientSessionToken,
  isSeamHttpOptionsWithConsoleSessionToken,
  isSeamHttpOptionsWithPersonalAccessToken,
  type SeamHttpFromPublishableKeyOptions,
  SeamHttpInvalidOptionsError,
  type SeamHttpOptions,
  type SeamHttpOptionsWithApiKey,
  type SeamHttpOptionsWithClient,
  type SeamHttpOptionsWithClientSessionToken,
  type SeamHttpOptionsWithConsoleSessionToken,
  type SeamHttpOptionsWithPersonalAccessToken,
  type SeamHttpRequestOptions,
} from 'lib/seam/connect/options.js'
import {
  limitToSeamHttpRequestOptions,
  parseOptions,
} from 'lib/seam/connect/parse-options.js'
import type { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'
import { SeamPaginator } from 'lib/seam/connect/seam-paginator.js'

import { SeamHttpAccessCodes } from './access-codes/index.js'
import { SeamHttpAccessCodesSimulate } from './access-codes/simulate/index.js'
import { SeamHttpAccessCodesUnmanaged } from './access-codes/unmanaged/index.js'
import { SeamHttpAccessGrants } from './access-grants/index.js'
import { SeamHttpAccessMethods } from './access-methods/index.js'
import { SeamHttpAcsAccessGroups } from './acs/access-groups/index.js'
import { SeamHttpAcsAccessGroupsUnmanaged } from './acs/access-groups/unmanaged/index.js'
import { SeamHttpAcsCredentialPools } from './acs/credential-pools/index.js'
import { SeamHttpAcsCredentialProvisioningAutomations } from './acs/credential-provisioning-automations/index.js'
import { SeamHttpAcsCredentials } from './acs/credentials/index.js'
import { SeamHttpAcsCredentialsUnmanaged } from './acs/credentials/unmanaged/index.js'
import { SeamHttpAcsEncoders } from './acs/encoders/index.js'
import { SeamHttpAcsEncodersSimulate } from './acs/encoders/simulate/index.js'
import { SeamHttpAcsEntrances } from './acs/entrances/index.js'
import { SeamHttpAcsSystems } from './acs/systems/index.js'
import { SeamHttpAcsUsers } from './acs/users/index.js'
import { SeamHttpAcsUsersUnmanaged } from './acs/users/unmanaged/index.js'
import { SeamHttpActionAttempts } from './action-attempts/index.js'
import { SeamHttpBridges } from './bridges/index.js'
import { SeamHttpClientSessions } from './client-sessions/index.js'
import { SeamHttpConnectWebviews } from './connect-webviews/index.js'
import { SeamHttpConnectedAccounts } from './connected-accounts/index.js'
import { SeamHttpDevices } from './devices/index.js'
import { SeamHttpDevicesSimulate } from './devices/simulate/index.js'
import { SeamHttpDevicesUnmanaged } from './devices/unmanaged/index.js'
import { SeamHttpEvents } from './events/index.js'
import { SeamHttpLocks } from './locks/index.js'
import { SeamHttpLocksSimulate } from './locks/simulate/index.js'
import { SeamHttpNetworks } from './networks/index.js'
import { SeamHttpNoiseSensors } from './noise-sensors/index.js'
import { SeamHttpNoiseSensorsNoiseThresholds } from './noise-sensors/noise-thresholds/index.js'
import { SeamHttpNoiseSensorsSimulate } from './noise-sensors/simulate/index.js'
import { SeamHttpPhones } from './phones/index.js'
import { SeamHttpPhonesSimulate } from './phones/simulate/index.js'
import { SeamHttpSeamBridgeV1BridgeClientSessions } from './seam/bridge/v1/bridge-client-sessions/index.js'
import { SeamHttpSeamBridgeV1BridgeConnectedSystems } from './seam/bridge/v1/bridge-connected-systems/index.js'
import { SeamHttpSeamInstantKeyV1ClientSessions } from './seam/instant-key/v1/client-sessions/index.js'
import { SeamHttpSeamMobileSdkV1AcsCredentials } from './seam/mobile-sdk/v1/acs/credentials/index.js'
import { SeamHttpSeamMobileSdkV1PhoneSessions } from './seam/mobile-sdk/v1/phone-sessions/index.js'
import { SeamHttpSeamPartnerV1BuildingBlocksSpaces } from './seam/partner/v1/building-blocks/spaces/index.js'
import { SeamHttpSeamPartnerV1Resources } from './seam/partner/v1/resources/index.js'
import { SeamHttpSpaces } from './spaces/index.js'
import { SeamHttpThermostatsDailyPrograms } from './thermostats/daily-programs/index.js'
import { SeamHttpThermostats } from './thermostats/index.js'
import { SeamHttpThermostatsSchedules } from './thermostats/schedules/index.js'
import { SeamHttpThermostatsSimulate } from './thermostats/simulate/index.js'
import { SeamHttpUnstableAccessGrants } from './unstable-access-grants/index.js'
import { SeamHttpUnstableAccessMethods } from './unstable-access-methods/index.js'
import { SeamHttpUnstableLocations } from './unstable-locations/index.js'
import { SeamHttpUnstablePartnerBuildingBlocks } from './unstable-partner/building-blocks/index.js'
import { SeamHttpUnstablePartnerResources } from './unstable-partner/resources/index.js'
import { SeamHttpUserIdentitiesEnrollmentAutomations } from './user-identities/enrollment-automations/index.js'
import { SeamHttpUserIdentities } from './user-identities/index.js'
import { SeamHttpWebhooks } from './webhooks/index.js'
import { SeamHttpWorkspaces } from './workspaces/index.js'

export class SeamHttpEndpoints {
  client: Client
  readonly defaults: Required<SeamHttpRequestOptions>
  readonly ltsVersion = seamApiLtsVersion
  static ltsVersion = seamApiLtsVersion

  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {
    const options = parseOptions(apiKeyOrOptions)
    this.client = 'client' in options ? options.client : createClient(options)
    this.defaults = limitToSeamHttpRequestOptions(options)
  }

  static fromClient(
    client: SeamHttpOptionsWithClient['client'],
    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},
  ): SeamHttpEndpoints {
    const constructorOptions = { ...options, client }
    if (!isSeamHttpOptionsWithClient(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError('Missing client')
    }
    return new SeamHttpEndpoints(constructorOptions)
  }

  static fromApiKey(
    apiKey: SeamHttpOptionsWithApiKey['apiKey'],
    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},
  ): SeamHttpEndpoints {
    const constructorOptions = { ...options, apiKey }
    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError('Missing apiKey')
    }
    return new SeamHttpEndpoints(constructorOptions)
  }

  static fromClientSessionToken(
    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],
    options: Omit<
      SeamHttpOptionsWithClientSessionToken,
      'clientSessionToken'
    > = {},
  ): SeamHttpEndpoints {
    const constructorOptions = { ...options, clientSessionToken }
    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')
    }
    return new SeamHttpEndpoints(constructorOptions)
  }

  static async fromPublishableKey(
    publishableKey: string,
    userIdentifierKey: string,
    options: SeamHttpFromPublishableKeyOptions = {},
  ): Promise<SeamHttpEndpoints> {
    warnOnInsecureuserIdentifierKey(userIdentifierKey)
    const clientOptions = parseOptions({ ...options, publishableKey })
    if (isSeamHttpOptionsWithClient(clientOptions)) {
      throw new SeamHttpInvalidOptionsError(
        'The client option cannot be used with SeamHttpEndpoints.fromPublishableKey',
      )
    }
    const client = createClient(clientOptions)
    const clientSessions = SeamHttpClientSessions.fromClient(client)
    const { token } = await clientSessions.getOrCreate({
      user_identifier_key: userIdentifierKey,
    })
    return SeamHttpEndpoints.fromClientSessionToken(token, options)
  }

  static fromConsoleSessionToken(
    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],
    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],
    options: Omit<
      SeamHttpOptionsWithConsoleSessionToken,
      'consoleSessionToken' | 'workspaceId'
    > = {},
  ): SeamHttpEndpoints {
    const constructorOptions = { ...options, consoleSessionToken, workspaceId }
    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError(
        'Missing consoleSessionToken or workspaceId',
      )
    }
    return new SeamHttpEndpoints(constructorOptions)
  }

  static fromPersonalAccessToken(
    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],
    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],
    options: Omit<
      SeamHttpOptionsWithPersonalAccessToken,
      'personalAccessToken' | 'workspaceId'
    > = {},
  ): SeamHttpEndpoints {
    const constructorOptions = { ...options, personalAccessToken, workspaceId }
    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError(
        'Missing personalAccessToken or workspaceId',
      )
    }
    return new SeamHttpEndpoints(constructorOptions)
  }

  createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(
    request: SeamHttpRequest<TResponse, TResponseKey>,
  ): SeamPaginator<TResponse, TResponseKey> {
    return new SeamPaginator<TResponse, TResponseKey>(this, request)
  }

  async updateClientSessionToken(
    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],
  ): Promise<void> {
    const { headers } = this.client.defaults
    const authHeaders = getAuthHeadersForClientSessionToken({
      clientSessionToken,
    })
    for (const key of Object.keys(authHeaders)) {
      if (headers[key] == null) {
        throw new Error(
          'Cannot update a clientSessionToken on a client created without a clientSessionToken',
        )
      }
    }
    this.client.defaults.headers = { ...headers, ...authHeaders }
    const clientSessions = SeamHttpClientSessions.fromClient(this.client)
    await clientSessions.get()
  }

  get ['/access_codes/create'](): SeamHttpAccessCodes['create'] {
    const { client, defaults } = this
    return function accessCodesCreate(
      ...args: Parameters<SeamHttpAccessCodes['create']>
    ): ReturnType<SeamHttpAccessCodes['create']> {
      const seam = SeamHttpAccessCodes.fromClient(client, defaults)
      return seam.create(...args)
    }
  }

  get ['/access_codes/create_multiple'](): SeamHttpAccessCodes['createMultiple'] {
    const { client, defaults } = this
    return function accessCodesCreateMultiple(
      ...args: Parameters<SeamHttpAccessCodes['createMultiple']>
    ): ReturnType<SeamHttpAccessCodes['createMultiple']> {
      const seam = SeamHttpAccessCodes.fromClient(client, defaults)
      return seam.createMultiple(...args)
    }
  }

  get ['/access_codes/delete'](): SeamHttpAccessCodes['delete'] {
    const { client, defaults } = this
    return function accessCodesDelete(
      ...args: Parameters<SeamHttpAccessCodes['delete']>
    ): ReturnType<SeamHttpAccessCodes['delete']> {
      const seam = SeamHttpAccessCodes.fromClient(client, defaults)
      return seam.delete(...args)
    }
  }

  get ['/access_codes/generate_code'](): SeamHttpAccessCodes['generateCode'] {
    const { client, defaults } = this
    return function accessCodesGenerateCode(
      ...args: Parameters<SeamHttpAccessCodes['generateCode']>
    ): ReturnType<SeamHttpAccessCodes['generateCode']> {
      const seam = SeamHttpAccessCodes.fromClient(client, defaults)
      return seam.generateCode(...args)
    }
  }

  get ['/access_codes/get'](): SeamHttpAccessCodes['get'] {
    const { client, defaults } = this
    return function accessCodesGet(
      ...args: Parameters<SeamHttpAccessCodes['get']>
    ): ReturnType<SeamHttpAccessCodes['get']> {
      const seam = SeamHttpAccessCodes.fromClient(client, defaults)
      return seam.get(...args)
    }
  }

  get ['/access_codes/list'](): SeamHttpAccessCodes['list'] {
    const { client, defaults } = this
    return function accessCodesList(
      ...args: Parameters<SeamHttpAccessCodes['list']>
    ): ReturnType<SeamHttpAccessCodes['list']> {
      const seam = SeamHttpAccessCodes.fromClient(client, defaults)
      return seam.list(...args)
    }
  }

  get ['/access_codes/pull_backup_access_code'](): SeamHttpAccessCodes['pullBackupAccessCode'] {
    const { client, defaults } = this
    return function accessCodesPullBackupAccessCode(
      ...args: Parameters<SeamHttpAccessCodes['pullBackupAccessCode']>
    ): ReturnType<SeamHttpAccessCodes['pullBackupAccessCode']> {
      const seam = SeamHttpAccessCodes.fromClient(client, defaults)
      return seam.pullBackupAccessCode(...args)
    }
  }

  get ['/access_codes/report_device_constraints'](): SeamHttpAccessCodes['reportDeviceConstraints'] {
    const { client, defaults } = this
    return function accessCodesReportDeviceConstraints(
      ...args: Parameters<SeamHttpAccessCodes['reportDeviceConstraints']>
    ): ReturnType<SeamHttpAccessCodes['reportDeviceConstraints']> {
      const seam = SeamHttpAccessCodes.fromClient(client, defaults)
      return seam.reportDeviceConstraints(...args)
    }
  }

  get ['/access_codes/update'](): SeamHttpAccessCodes['update'] {
    const { client, defaults } = this
    return function accessCodesUpdate(
      ...args: Parameters<SeamHttpAccessCodes['update']>
    ): ReturnType<SeamHttpAccessCodes['update']> {
      const seam = SeamHttpAccessCodes.fromClient(client, defaults)
      return seam.update(...args)
    }
  }

  get ['/access_codes/update_multiple'](): SeamHttpAccessCodes['updateMultiple'] {
    const { client, defaults } = this
    return function accessCodesUpdateMultiple(
      ...args: Parameters<SeamHttpAccessCodes['updateMultiple']>
    ): ReturnType<SeamHttpAccessCodes['updateMultiple']> {
      const seam = SeamHttpAccessCodes.fromClient(client, defaults)
      return seam.updateMultiple(...args)
    }
  }

  get ['/access_codes/simulate/create_unmanaged_access_code'](): SeamHttpAccessCodesSimulate['createUnmanagedAccessCode'] {
    const { client, defaults } = this
    return function accessCodesSimulateCreateUnmanagedAccessCode(
      ...args: Parameters<
        SeamHttpAccessCodesSimulate['createUnmanagedAccessCode']
      >
    ): ReturnType<SeamHttpAccessCodesSimulate['createUnmanagedAccessCode']> {
      const seam = SeamHttpAccessCodesSimulate.fromClient(client, defaults)
      return seam.createUnmanagedAccessCode(...args)
    }
  }

  get ['/access_codes/unmanaged/convert_to_managed'](): SeamHttpAccessCodesUnmanaged['convertToManaged'] {
    const { client, defaults } = this
    return function accessCodesUnmanagedConvertToManaged(
      ...args: Parameters<SeamHttpAccessCodesUnmanaged['convertToManaged']>
    ): ReturnType<SeamHttpAccessCodesUnmanaged['convertToManaged']> {
      const seam = SeamHttpAccessCodesUnmanaged.fromClient(client, defaults)
      return seam.convertToManaged(...args)
    }
  }

  get ['/access_codes/unmanaged/delete'](): SeamHttpAccessCodesUnmanaged['delete'] {
    const { client, defaults } = this
    return function accessCodesUnmanagedDelete(
      ...args: Parameters<SeamHttpAccessCodesUnmanaged['delete']>
    ): ReturnType<SeamHttpAccessCodesUnmanaged['delete']> {
      const seam = SeamHttpAccessCodesUnmanaged.fromClient(client, defaults)
      return seam.delete(...args)
    }
  }

  get ['/access_codes/unmanaged/get'](): SeamHttpAccessCodesUnmanaged['get'] {
    const { client, defaults } = this
    return function accessCodesUnmanagedGet(
      ...args: Parameters<SeamHttpAccessCodesUnmanaged['get']>
    ): ReturnType<SeamHttpAccessCodesUnmanaged['get']> {
      const seam = SeamHttpAccessCodesUnmanaged.fromClient(client, defaults)
      return seam.get(...args)
    }
  }

  get ['/access_codes/unmanaged/list'](): SeamHttpAccessCodesUnmanaged['list'] {
    const { client, defaults } = this
    return function accessCodesUnmanagedList(
      ...args: Parameters<SeamHttpAccessCodesUnmanaged['list']>
    ): ReturnType<SeamHttpAccessCodesUnmanaged['list']> {
      const seam = SeamHttpAccessCodesUnmanaged.fromClient(client, defaults)
      return seam.list(...args)
    }
  }

  get ['/access_codes/unmanaged/update'](): SeamHttpAccessCodesUnmanaged['update'] {
    const { client, defaults } = this
    return function accessCodesUnmanagedUpdate(
      ...args: Parameters<SeamHttpAccessCodesUnmanaged['update']>
    ): ReturnType<SeamHttpAccessCodesUnmanaged['update']> {
      const seam = SeamHttpAccessCodesUnmanaged.fromClient(client, defaults)
      return seam.update(...args)
    }
  }

  get ['/access_grants/create'](): SeamHttpAccessGrants['create'] {
    const { client, defaults } = this
    return function accessGrantsCreate(
      ...args: Parameters<SeamHttpAccessGrants['create']>
    ): ReturnType<SeamHttpAccessGrants['create']> {
      const seam = SeamHttpAccessGrants.fromClient(client, defaults)
      return seam.create(...args)
    }
  }

  get ['/access_grants/delete'](): SeamHttpAccessGrants['delete'] {
    const { client, defaults } = this
    return function accessGrantsDelete(
      ...args: Parameters<SeamHttpAccessGrants['delete']>
    ): ReturnType<SeamHttpAccessGrants['delete']> {
      const seam = SeamHttpAccessGrants.fromClient(client, defaults)
      return seam.delete(...args)
    }
  }

  get ['/access_grants/get'](): SeamHttpAccessGrants['get'] {
    const { client, defaults } = this
    return function accessGrantsGet(
      ...args: Parameters<SeamHttpAccessGrants['get']>
    ): ReturnType<SeamHttpAccessGrants['get']> {
      const seam = SeamHttpAccessGrants.fromClient(client, defaults)
      return seam.get(...args)
    }
  }

  get ['/access_grants/list'](): SeamHttpAccessGrants['list'] {
    const { client, defaults } = this
    return function accessGrantsList(
      ...args: Parameters<SeamHttpAccessGrants['list']>
    ): ReturnType<SeamHttpAccessGrants['list']> {
      const seam = SeamHttpAccessGrants.fromClient(client, defaults)
      return seam.list(...args)
    }
  }

  get ['/access_grants/update'](): SeamHttpAccessGrants['update'] {
    const { client, defaults } = this
    return function accessGrantsUpdate(
      ...args: Parameters<SeamHttpAccessGrants['update']>
    ): ReturnType<SeamHttpAccessGrants['update']> {
      const seam = SeamHttpAccessGrants.fromClient(client, defaults)
      return seam.update(...args)
    }
  }

  get ['/access_methods/delete'](): SeamHttpAccessMethods['delete'] {
    const { client, defaults } = this
    return function accessMethodsDelete(
      ...args: Parameters<SeamHttpAccessMethods['delete']>
    ): ReturnType<SeamHttpAccessMethods['delete']> {
      const seam = SeamHttpAccessMethods.fromClient(client, defaults)
      return seam.delete(...args)
    }
  }

  get ['/access_methods/get'](): SeamHttpAccessMethods['get'] {
    const { client, defaults } = this
    return function accessMethodsGet(
      ...args: Parameters<SeamHttpAccessMethods['get']>
    ): ReturnType<SeamHttpAccessMethods['get']> {
      const seam = SeamHttpAccessMethods.fromClient(client, defaults)
      return seam.get(...args)
    }
  }

  get ['/access_methods/list'](): SeamHttpAccessMethods['list'] {
    const { client, defaults } = this
    return function accessMethodsList(
      ...args: Parameters<SeamHttpAccessMethods['list']>
    ): ReturnType<SeamHttpAccessMethods['list']> {
      const seam = SeamHttpAccessMethods.fromClient(client, defaults)
      return seam.list(...args)
    }
  }

  get ['/acs/access_groups/add_user'](): SeamHttpAcsAccessGroups['addUser'] {
    const { client, defaults } = this
    return function acsAccessGroupsAddUser(
      ...args: Parameters<SeamHttpAcsAccessGroups['addUser']>
    ): ReturnType<SeamHttpAcsAccessGroups['addUser']> {
      const seam = SeamHttpAcsAccessGroups.fromClient(client, defaults)
      return seam.addUser(...args)
    }
  }

  get ['/acs/access_groups/get'](): SeamHttpAcsAccessGroups['get'] {
    const { client, defaults } = this
    return function acsAccessGroupsGet(
      ...args: Parameters<SeamHttpAcsAccessGroups['get']>
    ): ReturnType<SeamHttpAcsAccessGroups['get']> {
      const seam = SeamHttpAcsAccessGroups.fromClient(client, defaults)
      return seam.get(...args)
    }
  }

  get ['/acs/access_groups/list'](): SeamHttpAcsAccessGroups['list'] {
    const { client, defaults } = this
    return function acsAccessGroupsList(
      ...args: Parameters<SeamHttpAcsAccessGroups['list']>
    ): ReturnType<SeamHttpAcsAccessGroups['list']> {
      const seam = SeamHttpAcsAccessGroups.fromClient(client, defaults)
      return seam.list(...args)
    }
  }

  get ['/acs/access_groups/list_accessible_entrances'](): SeamHttpAcsAccessGroups['listAccessibleEntrances'] {
    const { client, defaults } = this
    return function acsAccessGroupsListAccessibleEntrances(
      ...args: Parameters<SeamHttpAcsAccessGroups['listAccessibleEntrances']>
    ): ReturnType<SeamHttpAcsAccessGroups['listAccessibleEntrances']> {
      const seam = SeamHttpAcsAccessGroups.fromClient(client, defaults)
      return seam.listAccessibleEntrances(...args)
    }
  }

  get ['/acs/access_groups/list_users'](): SeamHttpAcsAccessGroups['listUsers'] {
    const { client, defaults } = this
    return function acsAccessGroupsListUsers(
      ...args: Parameters<SeamHttpAcsAccessGroups['listUsers']>
    ): ReturnType<SeamHttpAcsAccessGroups['listUsers']> {
      const seam = SeamHttpAcsAccessGroups.fromClient(client, defaults)
      return seam.listUsers(...args)
    }
  }

  get ['/acs/access_groups/remove_user'](): SeamHttpAcsAccessGroups['removeUser'] {
    const { client, defaults } = this
    return function acsAccessGroupsRemoveUser(
      ...args: Parameters<SeamHttpAcsAccessGroups['removeUser']>
    ): ReturnType<SeamHttpAcsAccessGroups['removeUser']> {
      const seam = SeamHttpAcsAccessGroups.fromClient(client, defaults)
      return seam.removeUser(...args)
    }
  }

  get ['/acs/access_groups/unmanaged/get'](): SeamHttpAcsAccessGroupsUnmanaged['get'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function acsAccessGroupsUnmanagedGet(
      ...args: Parameters<SeamHttpAcsAccessGroupsUnmanaged['get']>
    ): ReturnType<SeamHttpAcsAccessGroupsUnmanaged['get']> {
      const seam = SeamHttpAcsAccessGroupsUnmanaged.fromClient(client, defaults)
      return seam.get(...args)
    }
  }

  get ['/acs/access_groups/unmanaged/list'](): SeamHttpAcsAccessGroupsUnmanaged['list'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function acsAccessGroupsUnmanagedList(
      ...args: Parameters<SeamHttpAcsAccessGroupsUnmanaged['list']>
    ): ReturnType<SeamHttpAcsAccessGroupsUnmanaged['list']> {
      const seam = SeamHttpAcsAccessGroupsUnmanaged.fromClient(client, defaults)
      return seam.list(...args)
    }
  }

  get ['/acs/credential_pools/list'](): SeamHttpAcsCredentialPools['list'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function acsCredentialPoolsList(
      ...args: Parameters<SeamHttpAcsCredentialPools['list']>
    ): ReturnType<SeamHttpAcsCredentialPools['list']> {
      const seam = SeamHttpAcsCredentialPools.fromClient(client, defaults)
      return seam.list(...args)
    }
  }

  get ['/acs/credential_provisioning_automations/launch'](): SeamHttpAcsCredentialProvisioningAutomations['launch'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function acsCredentialProvisioningAutomationsLaunch(
      ...args: Parameters<
        SeamHttpAcsCredentialProvisioningAutomations['launch']
      >
    ): ReturnType<SeamHttpAcsCredentialProvisioningAutomations['launch']> {
      const seam = SeamHttpAcsCredentialProvisioningAutomations.fromClient(
        client,
        defaults,
      )
      return seam.launch(...args)
    }
  }

  get ['/acs/credentials/assign'](): SeamHttpAcsCredentials['assign'] {
    const { client, defaults } = this
    return function acsCredentialsAssign(
      ...args: Parameters<SeamHttpAcsCredentials['assign']>
    ): ReturnType<SeamHttpAcsCredentials['assign']> {
      const seam = SeamHttpAcsCredentials.fromClient(client, defaults)
      return seam.assign(...args)
    }
  }

  get ['/acs/credentials/create'](): SeamHttpAcsCredentials['create'] {
    const { client, defaults } = this
    return function acsCredentialsCreate(
      ...args: Parameters<SeamHttpAcsCredentials['create']>
    ): ReturnType<SeamHttpAcsCredentials['create']> {
      const seam = SeamHttpAcsCredentials.fromClient(client, defaults)
      return seam.create(...args)
    }
  }

  get ['/acs/credentials/create_offline_code'](): SeamHttpAcsCredentials['createOfflineCode'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function acsCredentialsCreateOfflineCode(
      ...args: Parameters<SeamHttpAcsCredentials['createOfflineCode']>
    ): ReturnType<SeamHttpAcsCredentials['createOfflineCode']> {
      const seam = SeamHttpAcsCredentials.fromClient(client, defaults)
      return seam.createOfflineCode(...args)
    }
  }

  get ['/acs/credentials/delete'](): SeamHttpAcsCredentials['delete'] {
    const { client, defaults } = this
    return function acsCredentialsDelete(
      ...args: Parameters<SeamHttpAcsCredentials['delete']>
    ): ReturnType<SeamHttpAcsCredentials['delete']> {
      const seam = SeamHttpAcsCredentials.fromClient(client, defaults)
      return seam.delete(...args)
    }
  }

  get ['/acs/credentials/get'](): SeamHttpAcsCredentials['get'] {
    const { client, defaults } = this
    return function acsCredentialsGet(
      ...args: Parameters<SeamHttpAcsCredentials['get']>
    ): ReturnType<SeamHttpAcsCredentials['get']> {
      const seam = SeamHttpAcsCredentials.fromClient(client, defaults)
      return seam.get(...args)
    }
  }

  get ['/acs/credentials/list'](): SeamHttpAcsCredentials['list'] {
    const { client, defaults } = this
    return function acsCredentialsList(
      ...args: Parameters<SeamHttpAcsCredentials['list']>
    ): ReturnType<SeamHttpAcsCredentials['list']> {
      const seam = SeamHttpAcsCredentials.fromClient(client, defaults)
      return seam.list(...args)
    }
  }

  get ['/acs/credentials/list_accessible_entrances'](): SeamHttpAcsCredentials['listAccessibleEntrances'] {
    const { client, defaults } = this
    return function acsCredentialsListAccessibleEntrances(
      ...args: Parameters<SeamHttpAcsCredentials['listAccessibleEntrances']>
    ): ReturnType<SeamHttpAcsCredentials['listAccessibleEntrances']> {
      const seam = SeamHttpAcsCredentials.fromClient(client, defaults)
      return seam.listAccessibleEntrances(...args)
    }
  }

  get ['/acs/credentials/unassign'](): SeamHttpAcsCredentials['unassign'] {
    const { client, defaults } = this
    return function acsCredentialsUnassign(
      ...args: Parameters<SeamHttpAcsCredentials['unassign']>
    ): ReturnType<SeamHttpAcsCredentials['unassign']> {
      const seam = SeamHttpAcsCredentials.fromClient(client, defaults)
      return seam.unassign(...args)
    }
  }

  get ['/acs/credentials/update'](): SeamHttpAcsCredentials['update'] {
    const { client, defaults } = this
    return function acsCredentialsUpdate(
      ...args: Parameters<SeamHttpAcsCredentials['update']>
    ): ReturnType<SeamHttpAcsCredentials['update']> {
      const seam = SeamHttpAcsCredentials.fromClient(client, defaults)
      return seam.update(...args)
    }
  }

  get ['/acs/credentials/unmanaged/get'](): SeamHttpAcsCredentialsUnmanaged['get'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function acsCredentialsUnmanagedGet(
      ...args: Parameters<SeamHttpAcsCredentialsUnmanaged['get']>
    ): ReturnType<SeamHttpAcsCredentialsUnmanaged['get']> {
      const seam = SeamHttpAcsCredentialsUnmanaged.fromClient(client, defaults)
      return seam.get(...args)
    }
  }

  get ['/acs/credentials/unmanaged/list'](): SeamHttpAcsCredentialsUnmanaged['list'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function acsCredentialsUnmanagedList(
      ...args: Parameters<SeamHttpAcsCredentialsUnmanaged['list']>
    ): ReturnType<SeamHttpAcsCredentialsUnmanaged['list']> {
      const seam = SeamHttpAcsCredentialsUnmanaged.fromClient(client, defaults)
      return seam.list(...args)
    }
  }

  get ['/acs/encoders/encode_access_method'](): SeamHttpAcsEncoders['encodeAccessMethod'] {
    const { client, defaults } = this
    return function acsEncodersEncodeAccessMethod(
      ...args: Parameters<SeamHttpAcsEncoders['encodeAccessMethod']>
    ): ReturnType<SeamHttpAcsEncoders['encodeAccessMethod']> {
      const seam = SeamHttpAcsEncoders.fromClient(client, defaults)
      return seam.encodeAccessMethod(...args)
    }
  }

  get ['/acs/encoders/encode_credential'](): SeamHttpAcsEncoders['encodeCredential'] {
    const { client, defaults } = this
    return function acsEncodersEncodeCredential(
      ...args: Parameters<SeamHttpAcsEncoders['encodeCredential']>
    ): ReturnType<SeamHttpAcsEncoders['encodeCredential']> {
      const seam = SeamHttpAcsEncoders.fromClient(client, defaults)
      return seam.encodeCredential(...args)
    }
  }

  get ['/acs/encoders/get'](): SeamHttpAcsEncoders['get'] {
    const { client, defaults } = this
    return function acsEncodersGet(
      ...args: Parameters<SeamHttpAcsEncoders['get']>
    ): ReturnType<SeamHttpAcsEncoders['get']> {
      const seam = SeamHttpAcsEncoders.fromClient(client, defaults)
      return seam.get(...args)
    }
  }

  get ['/acs/encoders/list'](): SeamHttpAcsEncoders['list'] {
    const { client, defaults } = this
    return function acsEncodersList(
      ...args: Parameters<SeamHttpAcsEncoders['list']>
    ): ReturnType<SeamHttpAcsEncoders['list']> {
      const seam = SeamHttpAcsEncoders.fromClient(client, defaults)
      return seam.list(...args)
    }
  }

  get ['/acs/encoders/scan_credential'](): SeamHttpAcsEncoders['scanCredential'] {
    const { client, defaults } = this
    return function acsEncodersScanCredential(
      ...args: Parameters<SeamHttpAcsEncoders['scanCredential']>
    ): ReturnType<SeamHttpAcsEncoders['scanCredential']> {
      const seam = SeamHttpAcsEncoders.fromClient(client, defaults)
      return seam.scanCredential(...args)
    }
  }

  get ['/acs/encoders/simulate/next_credential_encode_will_fail'](): SeamHttpAcsEncodersSimulate['nextCredentialEncodeWillFail'] {
    const { client, defaults } = this
    return function acsEncodersSimulateNextCredentialEncodeWillFail(
      ...args: Parameters<
        SeamHttpAcsEncodersSimulate['nextCredentialEncodeWillFail']
      >
    ): ReturnType<SeamHttpAcsEncodersSimulate['nextCredentialEncodeWillFail']> {
      const seam = SeamHttpAcsEncodersSimulate.fromClient(client, defaults)
      return seam.nextCredentialEncodeWillFail(...args)
    }
  }

  get ['/acs/encoders/simulate/next_credential_encode_will_succeed'](): SeamHttpAcsEncodersSimulate['nextCredentialEncodeWillSucceed'] {
    const { client, defaults } = this
    return function acsEncodersSimulateNextCredentialEncodeWillSucceed(
      ...args: Parameters<
        SeamHttpAcsEncodersSimulate['nextCredentialEncodeWillSucceed']
      >
    ): ReturnType<
      SeamHttpAcsEncodersSimulate['nextCredentialEncodeWillSucceed']
    > {
      const seam = SeamHttpAcsEncodersSimulate.fromClient(client, defaults)
      return seam.nextCredentialEncodeWillSucceed(...args)
    }
  }

  get ['/acs/encoders/simulate/next_credential_scan_will_fail'](): SeamHttpAcsEncodersSimulate['nextCredentialScanWillFail'] {
    const { client, defaults } = this
    return function acsEncodersSimulateNextCredentialScanWillFail(
      ...args: Parameters<
        SeamHttpAcsEncodersSimulate['nextCredentialScanWillFail']
      >
    ): ReturnType<SeamHttpAcsEncodersSimulate['nextCredentialScanWillFail']> {
      const seam = SeamHttpAcsEncodersSimulate.fromClient(client, defaults)
      return seam.nextCredentialScanWillFail(...args)
    }
  }

  get ['/acs/encoders/simulate/next_credential_scan_will_succeed'](): SeamHttpAcsEncodersSimulate['nextCredentialScanWillSucceed'] {
    const { client, defaults } = this
    return function acsEncodersSimulateNextCredentialScanWillSucceed(
      ...args: Parameters<
        SeamHttpAcsEncodersSimulate['nextCredentialScanWillSucceed']
      >
    ): ReturnType<
      SeamHttpAcsEncodersSimulate['nextCredentialScanWillSucceed']
    > {
      const seam = SeamHttpAcsEncodersSimulate.fromClient(client, defaults)
      return seam.nextCredentialScanWillSucceed(...args)
    }
  }

  get ['/acs/entrances/get'](): SeamHttpAcsEntrances['get'] {
    const { client, defaults } = this
    return function acsEntrancesGet(
      ...args: Parameters<SeamHttpAcsEntrances['get']>
    ): ReturnType<SeamHttpAcsEntrances['get']> {
      const seam = SeamHttpAcsEntrances.fromClient(client, defaults)
      return seam.get(...args)
    }
  }

  get ['/acs/entrances/grant_access'](): SeamHttpAcsEntrances['grantAccess'] {
    const { client, defaults } = this
    return function acsEntrancesGrantAccess(
      ...args: Parameters<SeamHttpAcsEntrances['grantAccess']>
    ): ReturnType<SeamHttpAcsEntrances['grantAccess']> {
      const seam = SeamHttpAcsEntrances.fromClient(client, defaults)
      return seam.grantAccess(...args)
    }
  }

  get ['/acs/entrances/list'](): SeamHttpAcsEntrances['list'] {
    const { client, defaults } = this
    return function acsEntrancesList(
      ...args: Parameters<SeamHttpAcsEntrances['list']>
    ): ReturnType<SeamHttpAcsEntrances['list']> {
      const seam = SeamHttpAcsEntrances.fromClient(client, defaults)
      return seam.list(...args)
    }
  }

  get ['/acs/entrances/list_credentials_with_access'](): SeamHttpAcsEntrances['listCredentialsWithAccess'] {
    const { client, defaults } = this
    return function acsEntrancesListCredentialsWithAccess(
      ...args: Parameters<SeamHttpAcsEntrances['listCredentialsWithAccess']>
    ): ReturnType<SeamHttpAcsEntrances['listCredentialsWithAccess']> {
      const seam = SeamHttpAcsEntrances.fromClient(client, defaults)
      return seam.listCredentialsWithAccess(...args)
    }
  }

  get ['/acs/systems/get'](): SeamHttpAcsSystems['get'] {
    const { client, defaults } = this
    return function acsSystemsGet(
      ...args: Parameters<SeamHttpAcsSystems['get']>
    ): ReturnType<SeamHttpAcsSystems['get']> {
      const seam = SeamHttpAcsSystems.fromClient(client, defaults)
      return seam.get(...args)
    }
  }

  get ['/acs/systems/list'](): SeamHttpAcsSystems['list'] {
    const { client, defaults } = this
    return function acsSystemsList(
      ...args: Parameters<SeamHttpAcsSystems['list']>
    ): ReturnType<SeamHttpAcsSystems['list']> {
      const seam = SeamHttpAcsSystems.fromClient(client, defaults)
      return seam.list(...args)
    }
  }

  get ['/acs/systems/list_compatible_credential_manager_acs_systems'](): SeamHttpAcsSystems['listCompatibleCredentialManagerAcsSystems'] {
    const { client, defaults } = this
    return function acsSystemsListCompatibleCredentialManagerAcsSystems(
      ...args: Parameters<
        SeamHttpAcsSystems['listCompatibleCredentialManagerAcsSystems']
      >
    ): ReturnType<
      SeamHttpAcsSystems['listCompatibleCredentialManagerAcsSystems']
    > {
      const seam = SeamHttpAcsSystems.fromClient(client, defaults)
      return seam.listCompatibleCredentialManagerAcsSystems(...args)
    }
  }

  get ['/acs/users/add_to_access_group'](): SeamHttpAcsUsers['addToAccessGroup'] {
    const { client, defaults } = this
    return function acsUsersAddToAccessGroup(
      ...args: Parameters<SeamHttpAcsUsers['addToAccessGroup']>
    ): ReturnType<SeamHttpAcsUsers['addToAccessGroup']> {
      const seam = SeamHttpAcsUsers.fromClient(client, defaults)
      return seam.addToAccessGroup(...args)
    }
  }

  get ['/acs/users/create'](): SeamHttpAcsUsers['create'] {
    const { client, defaults } = this
    return function acsUsersCreate(
      ...args: Parameters<SeamHttpAcsUsers['create']>
    ): ReturnType<SeamHttpAcsUsers['create']> {
      const seam = SeamHttpAcsUsers.fromClient(client, defaults)
      return seam.create(...args)
    }
  }

  get ['/acs/users/delete'](): SeamHttpAcsUsers['delete'] {
    const { client, defaults } = this
    return function acsUsersDelete(
      ...args: Parameters<SeamHttpAcsUsers['delete']>
    ): ReturnType<SeamHttpAcsUsers['delete']> {
      const seam = SeamHttpAcsUsers.fromClient(client, defaults)
      return seam.delete(...args)
    }
  }

  get ['/acs/users/get'](): SeamHttpAcsUsers['get'] {
    const { client, defaults } = this
    return function acsUsersGet(
      ...args: Parameters<SeamHttpAcsUsers['get']>
    ): ReturnType<SeamHttpAcsUsers['get']> {
      const seam = SeamHttpAcsUsers.fromClient(client, defaults)
      return seam.get(...args)
    }
  }

  get ['/acs/users/list'](): SeamHttpAcsUsers['list'] {
    const { client, defaults } = this
    return function acsUsersList(
      ...args: Parameters<SeamHttpAcsUsers['list']>
    ): ReturnType<SeamHttpAcsUsers['list']> {
      const seam = SeamHttpAcsUsers.fromClient(client, defaults)
      return seam.list(...args)
    }
  }

  get ['/acs/users/list_accessible_entrances'](): SeamHttpAcsUsers['listAccessibleEntrances'] {
    const { client, defaults } = this
    return function acsUsersListAccessibleEntrances(
      ...args: Parameters<SeamHttpAcsUsers['listAccessibleEntrances']>
    ): ReturnType<SeamHttpAcsUsers['listAccessibleEntrances']> {
      const seam = SeamHttpAcsUsers.fromClient(client, defaults)
      return seam.listAccessibleEntrances(...args)
    }
  }

  get ['/acs/users/remove_from_access_group'](): SeamHttpAcsUsers['removeFromAccessGroup'] {
    const { client, defaults } = this
    return function acsUsersRemoveFromAccessGroup(
      ...args: Parameters<SeamHttpAcsUsers['removeFromAccessGroup']>
    ): ReturnType<SeamHttpAcsUsers['removeFromAccessGroup']> {
      const seam = SeamHttpAcsUsers.fromClient(client, defaults)
      return seam.removeFromAccessGroup(...args)
    }
  }

  get ['/acs/users/revoke_access_to_all_entrances'](): SeamHttpAcsUsers['revokeAccessToAllEntrances'] {
    const { client, defaults } = this
    return function acsUsersRevokeAccessToAllEntrances(
      ...args: Parameters<SeamHttpAcsUsers['revokeAccessToAllEntrances']>
    ): ReturnType<SeamHttpAcsUsers['revokeAccessToAllEntrances']> {
      const seam = SeamHttpAcsUsers.fromClient(client, defaults)
      return seam.revokeAccessToAllEntrances(...args)
    }
  }

  get ['/acs/users/suspend'](): SeamHttpAcsUsers['suspend'] {
    const { client, defaults } = this
    return function acsUsersSuspend(
      ...args: Parameters<SeamHttpAcsUsers['suspend']>
    ): ReturnType<SeamHttpAcsUsers['suspend']> {
      const seam = SeamHttpAcsUsers.fromClient(client, defaults)
      return seam.suspend(...args)
    }
  }

  get ['/acs/users/unsuspend'](): SeamHttpAcsUsers['unsuspend'] {
    const { client, defaults } = this
    return function acsUsersUnsuspend(
      ...args: Parameters<SeamHttpAcsUsers['unsuspend']>
    ): ReturnType<SeamHttpAcsUsers['unsuspend']> {
      const seam = SeamHttpAcsUsers.fromClient(client, defaults)
      return seam.unsuspend(...args)
    }
  }

  get ['/acs/users/update'](): SeamHttpAcsUsers['update'] {
    const { client, defaults } = this
    return function acsUsersUpdate(
      ...args: Parameters<SeamHttpAcsUsers['update']>
    ): ReturnType<SeamHttpAcsUsers['update']> {
      const seam = SeamHttpAcsUsers.fromClient(client, defaults)
      return seam.update(...args)
    }
  }

  get ['/acs/users/unmanaged/get'](): SeamHttpAcsUsersUnmanaged['get'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function acsUsersUnmanagedGet(
      ...args: Parameters<SeamHttpAcsUsersUnmanaged['get']>
    ): ReturnType<SeamHttpAcsUsersUnmanaged['get']> {
      const seam = SeamHttpAcsUsersUnmanaged.fromClient(client, defaults)
      return seam.get(...args)
    }
  }

  get ['/acs/users/unmanaged/list'](): SeamHttpAcsUsersUnmanaged['list'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function acsUsersUnmanagedList(
      ...args: Parameters<SeamHttpAcsUsersUnmanaged['list']>
    ): ReturnType<SeamHttpAcsUsersUnmanaged['list']> {
      const seam = SeamHttpAcsUsersUnmanaged.fromClient(client, defaults)
      return seam.list(...args)
    }
  }

  get ['/action_attempts/get'](): SeamHttpActionAttempts['get'] {
    const { client, defaults } = this
    return function actionAttemptsGet(
      ...args: Parameters<SeamHttpActionAttempts['get']>
    ): ReturnType<SeamHttpActionAttempts['get']> {
      const seam = SeamHttpActionAttempts.fromClient(client, defaults)
      return seam.get(...args)
    }
  }

  get ['/action_attempts/list'](): SeamHttpActionAttempts['list'] {
    const { client, defaults } = this
    return function actionAttemptsList(
      ...args: Parameters<SeamHttpActionAttempts['list']>
    ): ReturnType<SeamHttpActionAttempts['list']> {
      const seam = SeamHttpActionAttempts.fromClient(client, defaults)
      return seam.list(...args)
    }
  }

  get ['/bridges/get'](): SeamHttpBridges['get'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function bridgesGet(
      ...args: Parameters<SeamHttpBridges['get']>
    ): ReturnType<SeamHttpBridges['get']> {
      const seam = SeamHttpBridges.fromClient(client, defaults)
      return seam.get(...args)
    }
  }

  get ['/bridges/list'](): SeamHttpBridges['list'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function bridgesList(
      ...args: Parameters<SeamHttpBridges['list']>
    ): ReturnType<SeamHttpBridges['list']> {
      const seam = SeamHttpBridges.fromClient(client, defaults)
      return seam.list(...args)
    }
  }

  get ['/client_sessions/create'](): SeamHttpClientSessions['create'] {
    const { client, defaults } = this
    return function clientSessionsCreate(
      ...args: Parameters<SeamHttpClientSessions['create']>
    ): ReturnType<SeamHttpClientSessions['create']> {
      const seam = SeamHttpClientSessions.fromClient(client, defaults)
      return seam.create(...args)
    }
  }

  get ['/client_sessions/delete'](): SeamHttpClientSessions['delete'] {
    const { client, defaults } = this
    return function clientSessionsDelete(
      ...args: Parameters<SeamHttpClientSessions['delete']>
    ): ReturnType<SeamHttpClientSessions['delete']> {
      const seam = SeamHttpClientSessions.fromClient(client, defaults)
      return seam.delete(...args)
    }
  }

  get ['/client_sessions/get'](): SeamHttpClientSessions['get'] {
    const { client, defaults } = this
    return function clientSessionsGet(
      ...args: Parameters<SeamHttpClientSessions['get']>
    ): ReturnType<SeamHttpClientSessions['get']> {
      const seam = SeamHttpClientSessions.fromClient(client, defaults)
      return seam.get(...args)
    }
  }

  get ['/client_sessions/get_or_create'](): SeamHttpClientSessions['getOrCreate'] {
    const { client, defaults } = this
    return function clientSessionsGetOrCreate(
      ...args: Parameters<SeamHttpClientSessions['getOrCreate']>
    ): ReturnType<SeamHttpClientSessions['getOrCreate']> {
      const seam = SeamHttpClientSessions.fromClient(client, defaults)
      return seam.getOrCreate(...args)
    }
  }

  get ['/client_sessions/grant_access'](): SeamHttpClientSessions['grantAccess'] {
    const { client, defaults } = this
    return function clientSessionsGrantAccess(
      ...args: Parameters<SeamHttpClientSessions['grantAccess']>
    ): ReturnType<SeamHttpClientSessions['grantAccess']> {
      const seam = SeamHttpClientSessions.fromClient(client, defaults)
      return seam.grantAccess(...args)
    }
  }

  get ['/client_sessions/list'](): SeamHttpClientSessions['list'] {
    const { client, defaults } = this
    return function clientSessionsList(
      ...args: Parameters<SeamHttpClientSessions['list']>
    ): ReturnType<SeamHttpClientSessions['list']> {
      const seam = SeamHttpClientSessions.fromClient(client, defaults)
      return seam.list(...args)
    }
  }

  get ['/client_sessions/revoke'](): SeamHttpClientSessions['revoke'] {
    const { client, defaults } = this
    return function clientSessionsRevoke(
      ...args: Parameters<SeamHttpClientSessions['revoke']>
    ): ReturnType<SeamHttpClientSessions['revoke']> {
      const seam = SeamHttpClientSessions.fromClient(client, defaults)
      return seam.revoke(...args)
    }
  }

  get ['/connect_webviews/create'](): SeamHttpConnectWebviews['create'] {
    const { client, defaults } = this
    return function connectWebviewsCreate(
      ...args: Parameters<SeamHttpConnectWebviews['create']>
    ): ReturnType<SeamHttpConnectWebviews['create']> {
      const seam = SeamHttpConnectWebviews.fromClient(client, defaults)
      return seam.create(...args)
    }
  }

  get ['/connect_webviews/delete'](): SeamHttpConnectWebviews['delete'] {
    const { client, defaults } = this
    return function connectWebviewsDelete(
      ...args: Parameters<SeamHttpConnectWebviews['delete']>
    ): ReturnType<SeamHttpConnectWebviews['delete']> {
      const seam = SeamHttpConnectWebviews.fromClient(client, defaults)
      return seam.delete(...args)
    }
  }

  get ['/connect_webviews/get'](): SeamHttpConnectWebviews['get'] {
    const { client, defaults } = this
    return function connectWebviewsGet(
      ...args: Parameters<SeamHttpConnectWebviews['get']>
    ): ReturnType<SeamHttpConnectWebviews['get']> {
      const seam = SeamHttpConnectWebviews.fromClient(client, defaults)
      return seam.get(...args)
    }
  }

  get ['/connect_webviews/list'](): SeamHttpConnectWebviews['list'] {
    const { client, defaults } = this
    return function connectWebviewsList(
      ...args: Parameters<SeamHttpConnectWebviews['list']>
    ): ReturnType<SeamHttpConnectWebviews['list']> {
      const seam = SeamHttpConnectWebviews.fromClient(client, defaults)
      return seam.list(...args)
    }
  }

  get ['/connected_accounts/delete'](): SeamHttpConnectedAccounts['delete'] {
    const { client, defaults } = this
    return function connectedAccountsDelete(
      ...args: Parameters<SeamHttpConnectedAccounts['delete']>
    ): ReturnType<SeamHttpConnectedAccounts['delete']> {
      const seam = SeamHttpConnectedAccounts.fromClient(client, defaults)
      return seam.delete(...args)
    }
  }

  get ['/connected_accounts/get'](): SeamHttpConnectedAccounts['get'] {
    const { client, defaults } = this
    return function connectedAccountsGet(
      ...args: Parameters<SeamHttpConnectedAccounts['get']>
    ): ReturnType<SeamHttpConnectedAccounts['get']> {
      const seam = SeamHttpConnectedAccounts.fromClient(client, defaults)
      return seam.get(...args)
    }
  }

  get ['/connected_accounts/list'](): SeamHttpConnectedAccounts['list'] {
    const { client, defaults } = this
    return function connectedAccountsList(
      ...args: Parameters<SeamHttpConnectedAccounts['list']>
    ): ReturnType<SeamHttpConnectedAccounts['list']> {
      const seam = SeamHttpConnectedAccounts.fromClient(client, defaults)
      return seam.list(...args)
    }
  }

  get ['/connected_accounts/sync'](): SeamHttpConnectedAccounts['sync'] {
    const { client, defaults } = this
    return function connectedAccountsSync(
      ...args: Parameters<SeamHttpConnectedAccounts['sync']>
    ): ReturnType<SeamHttpConnectedAccounts['sync']> {
      const seam = SeamHttpConnectedAccounts.fromClient(client, defaults)
      return seam.sync(...args)
    }
  }

  get ['/connected_accounts/update'](): SeamHttpConnectedAccounts['update'] {
    const { client, defaults } = this
    return function connectedAccountsUpdate(
      ...args: Parameters<SeamHttpConnectedAccounts['update']>
    ): ReturnType<SeamHttpConnectedAccounts['update']> {
      const seam = SeamHttpConnectedAccounts.fromClient(client, defaults)
      return seam.update(...args)
    }
  }

  get ['/devices/delete'](): SeamHttpDevices['delete'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function devicesDelete(
      ...args: Parameters<SeamHttpDevices['delete']>
    ): ReturnType<SeamHttpDevices['delete']> {
      const seam = SeamHttpDevices.fromClient(client, defaults)
      return seam.delete(...args)
    }
  }

  get ['/devices/get'](): SeamHttpDevices['get'] {
    const { client, defaults } = this
    return function devicesGet(
      ...args: Parameters<SeamHttpDevices['get']>
    ): ReturnType<SeamHttpDevices['get']> {
      const seam = SeamHttpDevices.fromClient(client, defaults)
      return seam.get(...args)
    }
  }

  get ['/devices/list'](): SeamHttpDevices['list'] {
    const { client, defaults } = this
    return function devicesList(
      ...args: Parameters<SeamHttpDevices['list']>
    ): ReturnType<SeamHttpDevices['list']> {
      const seam = SeamHttpDevices.fromClient(client, defaults)
      return seam.list(...args)
    }
  }

  get ['/devices/list_device_providers'](): SeamHttpDevices['listDeviceProviders'] {
    const { client, defaults } = this
    return function devicesListDeviceProviders(
      ...args: Parameters<SeamHttpDevices['listDeviceProviders']>
    ): ReturnType<SeamHttpDevices['listDeviceProviders']> {
      const seam = SeamHttpDevices.fromClient(client, defaults)
      return seam.listDeviceProviders(...args)
    }
  }

  get ['/devices/update'](): SeamHttpDevices['update'] {
    const { client, defaults } = this
    return function devicesUpdate(
      ...args: Parameters<SeamHttpDevices['update']>
    ): ReturnType<SeamHttpDevices['update']> {
      const seam = SeamHttpDevices.fromClient(client, defaults)
      return seam.update(...args)
    }
  }

  get ['/devices/simulate/connect'](): SeamHttpDevicesSimulate['connect'] {
    const { client, defaults } = this
    return function devicesSimulateConnect(
      ...args: Parameters<SeamHttpDevicesSimulate['connect']>
    ): ReturnType<SeamHttpDevicesSimulate['connect']> {
      const seam = SeamHttpDevicesSimulate.fromClient(client, defaults)
      return seam.connect(...args)
    }
  }

  get ['/devices/simulate/disconnect'](): SeamHttpDevicesSimulate['disconnect'] {
    const { client, defaults } = this
    return function devicesSimulateDisconnect(
      ...args: Parameters<SeamHttpDevicesSimulate['disconnect']>
    ): ReturnType<SeamHttpDevicesSimulate['disconnect']> {
      const seam = SeamHttpDevicesSimulate.fromClient(client, defaults)
      return seam.disconnect(...args)
    }
  }

  get ['/devices/simulate/remove'](): SeamHttpDevicesSimulate['remove'] {
    const { client, defaults } = this
    return function devicesSimulateRemove(
      ...args: Parameters<SeamHttpDevicesSimulate['remove']>
    ): ReturnType<SeamHttpDevicesSimulate['remove']> {
      const seam = SeamHttpDevicesSimulate.fromClient(client, defaults)
      return seam.remove(...args)
    }
  }

  get ['/devices/unmanaged/get'](): SeamHttpDevicesUnmanaged['get'] {
    const { client, defaults } = this
    return function devicesUnmanagedGet(
      ...args: Parameters<SeamHttpDevicesUnmanaged['get']>
    ): ReturnType<SeamHttpDevicesUnmanaged['get']> {
      const seam = SeamHttpDevicesUnmanaged.fromClient(client, defaults)
      return seam.get(...args)
    }
  }

  get ['/devices/unmanaged/list'](): SeamHttpDevicesUnmanaged['list'] {
    const { client, defaults } = this
    return function devicesUnmanagedList(
      ...args: Parameters<SeamHttpDevicesUnmanaged['list']>
    ): ReturnType<SeamHttpDevicesUnmanaged['list']> {
      const seam = SeamHttpDevicesUnmanaged.fromClient(client, defaults)
      return seam.list(...args)
    }
  }

  get ['/devices/unmanaged/update'](): SeamHttpDevicesUnmanaged['update'] {
    const { client, defaults } = this
    return function devicesUnmanagedUpdate(
      ...args: Parameters<SeamHttpDevicesUnmanaged['update']>
    ): ReturnType<SeamHttpDevicesUnmanaged['update']> {
      const seam = SeamHttpDevicesUnmanaged.fromClient(client, defaults)
      return seam.update(...args)
    }
  }

  get ['/events/get'](): SeamHttpEvents['get'] {
    const { client, defaults } = this
    return function eventsGet(
      ...args: Parameters<SeamHttpEvents['get']>
    ): ReturnType<SeamHttpEvents['get']> {
      const seam = SeamHttpEvents.fromClient(client, defaults)
      return seam.get(...args)
    }
  }

  get ['/events/list'](): SeamHttpEvents['list'] {
    const { client, defaults } = this
    return function eventsList(
      ...args: Parameters<SeamHttpEvents['list']>
    ): ReturnType<SeamHttpEvents['list']> {
      const seam = SeamHttpEvents.fromClient(client, defaults)
      return seam.list(...args)
    }
  }

  get ['/locks/get'](): SeamHttpLocks['get'] {
    const { client, defaults } = this
    return function locksGet(
      ...args: Parameters<SeamHttpLocks['get']>
    ): ReturnType<SeamHttpLocks['get']> {
      const seam = SeamHttpLocks.fromClient(client, defaults)
      return seam.get(...args)
    }
  }

  get ['/locks/list'](): SeamHttpLocks['list'] {
    const { client, defaults } = this
    return function locksList(
      ...args: Parameters<SeamHttpLocks['list']>
    ): ReturnType<SeamHttpLocks['list']> {
      const seam = SeamHttpLocks.fromClient(client, defaults)
      return seam.list(...args)
    }
  }

  get ['/locks/lock_door'](): SeamHttpLocks['lockDoor'] {
    const { client, defaults } = this
    return function locksLockDoor(
      ...args: Parameters<SeamHttpLocks['lockDoor']>
    ): ReturnType<SeamHttpLocks['lockDoor']> {
      const seam = SeamHttpLocks.fromClient(client, defaults)
      return seam.lockDoor(...args)
    }
  }

  get ['/locks/unlock_door'](): SeamHttpLocks['unlockDoor'] {
    const { client, defaults } = this
    return function locksUnlockDoor(
      ...args: Parameters<SeamHttpLocks['unlockDoor']>
    ): ReturnType<SeamHttpLocks['unlockDoor']> {
      const seam = SeamHttpLocks.fromClient(client, defaults)
      return seam.unlockDoor(...args)
    }
  }

  get ['/locks/simulate/keypad_code_entry'](): SeamHttpLocksSimulate['keypadCodeEntry'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function locksSimulateKeypadCodeEntry(
      ...args: Parameters<SeamHttpLocksSimulate['keypadCodeEntry']>
    ): ReturnType<SeamHttpLocksSimulate['keypadCodeEntry']> {
      const seam = SeamHttpLocksSimulate.fromClient(client, defaults)
      return seam.keypadCodeEntry(...args)
    }
  }

  get ['/locks/simulate/manual_lock_via_keypad'](): SeamHttpLocksSimulate['manualLockViaKeypad'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function locksSimulateManualLockViaKeypad(
      ...args: Parameters<SeamHttpLocksSimulate['manualLockViaKeypad']>
    ): ReturnType<SeamHttpLocksSimulate['manualLockViaKeypad']> {
      const seam = SeamHttpLocksSimulate.fromClient(client, defaults)
      return seam.manualLockViaKeypad(...args)
    }
  }

  get ['/networks/get'](): SeamHttpNetworks['get'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function networksGet(
      ...args: Parameters<SeamHttpNetworks['get']>
    ): ReturnType<SeamHttpNetworks['get']> {
      const seam = SeamHttpNetworks.fromClient(client, defaults)
      return seam.get(...args)
    }
  }

  get ['/networks/list'](): SeamHttpNetworks['list'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function networksList(
      ...args: Parameters<SeamHttpNetworks['list']>
    ): ReturnType<SeamHttpNetworks['list']> {
      const seam = SeamHttpNetworks.fromClient(client, defaults)
      return seam.list(...args)
    }
  }

  get ['/noise_sensors/list'](): SeamHttpNoiseSensors['list'] {
    const { client, defaults } = this
    return function noiseSensorsList(
      ...args: Parameters<SeamHttpNoiseSensors['list']>
    ): ReturnType<SeamHttpNoiseSensors['list']> {
      const seam = SeamHttpNoiseSensors.fromClient(client, defaults)
      return seam.list(...args)
    }
  }

  get ['/noise_sensors/noise_thresholds/create'](): SeamHttpNoiseSensorsNoiseThresholds['create'] {
    const { client, defaults } = this
    return function noiseSensorsNoiseThresholdsCreate(
      ...args: Parameters<SeamHttpNoiseSensorsNoiseThresholds['create']>
    ): ReturnType<SeamHttpNoiseSensorsNoiseThresholds['create']> {
      const seam = SeamHttpNoiseSensorsNoiseThresholds.fromClient(
        client,
        defaults,
      )
      return seam.create(...args)
    }
  }

  get ['/noise_sensors/noise_thresholds/delete'](): SeamHttpNoiseSensorsNoiseThresholds['delete'] {
    const { client, defaults } = this
    return function noiseSensorsNoiseThresholdsDelete(
      ...args: Parameters<SeamHttpNoiseSensorsNoiseThresholds['delete']>
    ): ReturnType<SeamHttpNoiseSensorsNoiseThresholds['delete']> {
      const seam = SeamHttpNoiseSensorsNoiseThresholds.fromClient(
        client,
        defaults,
      )
      return seam.delete(...args)
    }
  }

  get ['/noise_sensors/noise_thresholds/get'](): SeamHttpNoiseSensorsNoiseThresholds['get'] {
    const { client, defaults } = this
    return function noiseSensorsNoiseThresholdsGet(
      ...args: Parameters<SeamHttpNoiseSensorsNoiseThresholds['get']>
    ): ReturnType<SeamHttpNoiseSensorsNoiseThresholds['get']> {
      const seam = SeamHttpNoiseSensorsNoiseThresholds.fromClient(
        client,
        defaults,
      )
      return seam.get(...args)
    }
  }

  get ['/noise_sensors/noise_thresholds/list'](): SeamHttpNoiseSensorsNoiseThresholds['list'] {
    const { client, defaults } = this
    return function noiseSensorsNoiseThresholdsList(
      ...args: Parameters<SeamHttpNoiseSensorsNoiseThresholds['list']>
    ): ReturnType<SeamHttpNoiseSensorsNoiseThresholds['list']> {
      const seam = SeamHttpNoiseSensorsNoiseThresholds.fromClient(
        client,
        defaults,
      )
      return seam.list(...args)
    }
  }

  get ['/noise_sensors/noise_thresholds/update'](): SeamHttpNoiseSensorsNoiseThresholds['update'] {
    const { client, defaults } = this
    return function noiseSensorsNoiseThresholdsUpdate(
      ...args: Parameters<SeamHttpNoiseSensorsNoiseThresholds['update']>
    ): ReturnType<SeamHttpNoiseSensorsNoiseThresholds['update']> {
      const seam = SeamHttpNoiseSensorsNoiseThresholds.fromClient(
        client,
        defaults,
      )
      return seam.update(...args)
    }
  }

  get ['/noise_sensors/simulate/trigger_noise_threshold'](): SeamHttpNoiseSensorsSimulate['triggerNoiseThreshold'] {
    const { client, defaults } = this
    return function noiseSensorsSimulateTriggerNoiseThreshold(
      ...args: Parameters<SeamHttpNoiseSensorsSimulate['triggerNoiseThreshold']>
    ): ReturnType<SeamHttpNoiseSensorsSimulate['triggerNoiseThreshold']> {
      const seam = SeamHttpNoiseSensorsSimulate.fromClient(client, defaults)
      return seam.triggerNoiseThreshold(...args)
    }
  }

  get ['/phones/deactivate'](): SeamHttpPhones['deactivate'] {
    const { client, defaults } = this
    return function phonesDeactivate(
      ...args: Parameters<SeamHttpPhones['deactivate']>
    ): ReturnType<SeamHttpPhones['deactivate']> {
      const seam = SeamHttpPhones.fromClient(client, defaults)
      return seam.deactivate(...args)
    }
  }

  get ['/phones/get'](): SeamHttpPhones['get'] {
    const { client, defaults } = this
    return function phonesGet(
      ...args: Parameters<SeamHttpPhones['get']>
    ): ReturnType<SeamHttpPhones['get']> {
      const seam = SeamHttpPhones.fromClient(client, defaults)
      return seam.get(...args)
    }
  }

  get ['/phones/list'](): SeamHttpPhones['list'] {
    const { client, defaults } = this
    return function phonesList(
      ...args: Parameters<SeamHttpPhones['list']>
    ): ReturnType<SeamHttpPhones['list']> {
      const seam = SeamHttpPhones.fromClient(client, defaults)
      return seam.list(...args)
    }
  }

  get ['/phones/simulate/create_sandbox_phone'](): SeamHttpPhonesSimulate['createSandboxPhone'] {
    const { client, defaults } = this
    return function phonesSimulateCreateSandboxPhone(
      ...args: Parameters<SeamHttpPhonesSimulate['createSandboxPhone']>
    ): ReturnType<SeamHttpPhonesSimulate['createSandboxPhone']> {
      const seam = SeamHttpPhonesSimulate.fromClient(client, defaults)
      return seam.createSandboxPhone(...args)
    }
  }

  get ['/seam/bridge/v1/bridge_client_sessions/create'](): SeamHttpSeamBridgeV1BridgeClientSessions['create'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function seamBridgeV1BridgeClientSessionsCreate(
      ...args: Parameters<SeamHttpSeamBridgeV1BridgeClientSessions['create']>
    ): ReturnType<SeamHttpSeamBridgeV1BridgeClientSessions['create']> {
      const seam = SeamHttpSeamBridgeV1BridgeClientSessions.fromClient(
        client,
        defaults,
      )
      return seam.create(...args)
    }
  }

  get ['/seam/bridge/v1/bridge_client_sessions/get'](): SeamHttpSeamBridgeV1BridgeClientSessions['get'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function seamBridgeV1BridgeClientSessionsGet(
      ...args: Parameters<SeamHttpSeamBridgeV1BridgeClientSessions['get']>
    ): ReturnType<SeamHttpSeamBridgeV1BridgeClientSessions['get']> {
      const seam = SeamHttpSeamBridgeV1BridgeClientSessions.fromClient(
        client,
        defaults,
      )
      return seam.get(...args)
    }
  }

  get ['/seam/bridge/v1/bridge_client_sessions/refresh_telemetry_token'](): SeamHttpSeamBridgeV1BridgeClientSessions['refreshTelemetryToken'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function seamBridgeV1BridgeClientSessionsRefreshTelemetryToken(
      ...args: Parameters<
        SeamHttpSeamBridgeV1BridgeClientSessions['refreshTelemetryToken']
      >
    ): ReturnType<
      SeamHttpSeamBridgeV1BridgeClientSessions['refreshTelemetryToken']
    > {
      const seam = SeamHttpSeamBridgeV1BridgeClientSessions.fromClient(
        client,
        defaults,
      )
      return seam.refreshTelemetryToken(...args)
    }
  }

  get ['/seam/bridge/v1/bridge_client_sessions/regenerate_pairing_code'](): SeamHttpSeamBridgeV1BridgeClientSessions['regeneratePairingCode'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function seamBridgeV1BridgeClientSessionsRegeneratePairingCode(
      ...args: Parameters<
        SeamHttpSeamBridgeV1BridgeClientSessions['regeneratePairingCode']
      >
    ): ReturnType<
      SeamHttpSeamBridgeV1BridgeClientSessions['regeneratePairingCode']
    > {
      const seam = SeamHttpSeamBridgeV1BridgeClientSessions.fromClient(
        client,
        defaults,
      )
      return seam.regeneratePairingCode(...args)
    }
  }

  get ['/seam/bridge/v1/bridge_client_sessions/report_status'](): SeamHttpSeamBridgeV1BridgeClientSessions['reportStatus'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function seamBridgeV1BridgeClientSessionsReportStatus(
      ...args: Parameters<
        SeamHttpSeamBridgeV1BridgeClientSessions['reportStatus']
      >
    ): ReturnType<SeamHttpSeamBridgeV1BridgeClientSessions['reportStatus']> {
      const seam = SeamHttpSeamBridgeV1BridgeClientSessions.fromClient(
        client,
        defaults,
      )
      return seam.reportStatus(...args)
    }
  }

  get ['/seam/bridge/v1/bridge_connected_systems/list'](): SeamHttpSeamBridgeV1BridgeConnectedSystems['list'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function seamBridgeV1BridgeConnectedSystemsList(
      ...args: Parameters<SeamHttpSeamBridgeV1BridgeConnectedSystems['list']>
    ): ReturnType<SeamHttpSeamBridgeV1BridgeConnectedSystems['list']> {
      const seam = SeamHttpSeamBridgeV1BridgeConnectedSystems.fromClient(
        client,
        defaults,
      )
      return seam.list(...args)
    }
  }

  get ['/seam/instant_key/v1/client_sessions/exchange_short_code'](): SeamHttpSeamInstantKeyV1ClientSessions['exchangeShortCode'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function seamInstantKeyV1ClientSessionsExchangeShortCode(
      ...args: Parameters<
        SeamHttpSeamInstantKeyV1ClientSessions['exchangeShortCode']
      >
    ): ReturnType<SeamHttpSeamInstantKeyV1ClientSessions['exchangeShortCode']> {
      const seam = SeamHttpSeamInstantKeyV1ClientSessions.fromClient(
        client,
        defaults,
      )
      return seam.exchangeShortCode(...args)
    }
  }

  get ['/seam/mobile_sdk/v1/acs/credentials/list'](): SeamHttpSeamMobileSdkV1AcsCredentials['list'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function seamMobileSdkV1AcsCredentialsList(
      ...args: Parameters<SeamHttpSeamMobileSdkV1AcsCredentials['list']>
    ): ReturnType<SeamHttpSeamMobileSdkV1AcsCredentials['list']> {
      const seam = SeamHttpSeamMobileSdkV1AcsCredentials.fromClient(
        client,
        defaults,
      )
      return seam.list(...args)
    }
  }

  get ['/seam/mobile_sdk/v1/phone_sessions/get_or_create'](): SeamHttpSeamMobileSdkV1PhoneSessions['getOrCreate'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function seamMobileSdkV1PhoneSessionsGetOrCreate(
      ...args: Parameters<SeamHttpSeamMobileSdkV1PhoneSessions['getOrCreate']>
    ): ReturnType<SeamHttpSeamMobileSdkV1PhoneSessions['getOrCreate']> {
      const seam = SeamHttpSeamMobileSdkV1PhoneSessions.fromClient(
        client,
        defaults,
      )
      return seam.getOrCreate(...args)
    }
  }

  get ['/seam/partner/v1/building_blocks/spaces/auto_map'](): SeamHttpSeamPartnerV1BuildingBlocksSpaces['autoMap'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function seamPartnerV1BuildingBlocksSpacesAutoMap(
      ...args: Parameters<SeamHttpSeamPartnerV1BuildingBlocksSpaces['autoMap']>
    ): ReturnType<SeamHttpSeamPartnerV1BuildingBlocksSpaces['autoMap']> {
      const seam = SeamHttpSeamPartnerV1BuildingBlocksSpaces.fromClient(
        client,
        defaults,
      )
      return seam.autoMap(...args)
    }
  }

  get ['/seam/partner/v1/resources/list'](): SeamHttpSeamPartnerV1Resources['list'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function seamPartnerV1ResourcesList(
      ...args: Parameters<SeamHttpSeamPartnerV1Resources['list']>
    ): ReturnType<SeamHttpSeamPartnerV1Resources['list']> {
      const seam = SeamHttpSeamPartnerV1Resources.fromClient(client, defaults)
      return seam.list(...args)
    }
  }

  get ['/spaces/add_acs_entrances'](): SeamHttpSpaces['addAcsEntrances'] {
    const { client, defaults } = this
    return function spacesAddAcsEntrances(
      ...args: Parameters<SeamHttpSpaces['addAcsEntrances']>
    ): ReturnType<SeamHttpSpaces['addAcsEntrances']> {
      const seam = SeamHttpSpaces.fromClient(client, defaults)
      return seam.addAcsEntrances(...args)
    }
  }

  get ['/spaces/add_devices'](): SeamHttpSpaces['addDevices'] {
    const { client, defaults } = this
    return function spacesAddDevices(
      ...args: Parameters<SeamHttpSpaces['addDevices']>
    ): ReturnType<SeamHttpSpaces['addDevices']> {
      const seam = SeamHttpSpaces.fromClient(client, defaults)
      return seam.addDevices(...args)
    }
  }

  get ['/spaces/create'](): SeamHttpSpaces['create'] {
    const { client, defaults } = this
    return function spacesCreate(
      ...args: Parameters<SeamHttpSpaces['create']>
    ): ReturnType<SeamHttpSpaces['create']> {
      const seam = SeamHttpSpaces.fromClient(client, defaults)
      return seam.create(...args)
    }
  }

  get ['/spaces/delete'](): SeamHttpSpaces['delete'] {
    const { client, defaults } = this
    return function spacesDelete(
      ...args: Parameters<SeamHttpSpaces['delete']>
    ): ReturnType<SeamHttpSpaces['delete']> {
      const seam = SeamHttpSpaces.fromClient(client, defaults)
      return seam.delete(...args)
    }
  }

  get ['/spaces/get'](): SeamHttpSpaces['get'] {
    const { client, defaults } = this
    return function spacesGet(
      ...args: Parameters<SeamHttpSpaces['get']>
    ): ReturnType<SeamHttpSpaces['get']> {
      const seam = SeamHttpSpaces.fromClient(client, defaults)
      return seam.get(...args)
    }
  }

  get ['/spaces/list'](): SeamHttpSpaces['list'] {
    const { client, defaults } = this
    return function spacesList(
      ...args: Parameters<SeamHttpSpaces['list']>
    ): ReturnType<SeamHttpSpaces['list']> {
      const seam = SeamHttpSpaces.fromClient(client, defaults)
      return seam.list(...args)
    }
  }

  get ['/spaces/remove_acs_entrances'](): SeamHttpSpaces['removeAcsEntrances'] {
    const { client, defaults } = this
    return function spacesRemoveAcsEntrances(
      ...args: Parameters<SeamHttpSpaces['removeAcsEntrances']>
    ): ReturnType<SeamHttpSpaces['removeAcsEntrances']> {
      const seam = SeamHttpSpaces.fromClient(client, defaults)
      return seam.removeAcsEntrances(...args)
    }
  }

  get ['/spaces/remove_devices'](): SeamHttpSpaces['removeDevices'] {
    const { client, defaults } = this
    return function spacesRemoveDevices(
      ...args: Parameters<SeamHttpSpaces['removeDevices']>
    ): ReturnType<SeamHttpSpaces['removeDevices']> {
      const seam = SeamHttpSpaces.fromClient(client, defaults)
      return seam.removeDevices(...args)
    }
  }

  get ['/spaces/update'](): SeamHttpSpaces['update'] {
    const { client, defaults } = this
    return function spacesUpdate(
      ...args: Parameters<SeamHttpSpaces['update']>
    ): ReturnType<SeamHttpSpaces['update']> {
      const seam = SeamHttpSpaces.fromClient(client, defaults)
      return seam.update(...args)
    }
  }

  get ['/thermostats/activate_climate_preset'](): SeamHttpThermostats['activateClimatePreset'] {
    const { client, defaults } = this
    return function thermostatsActivateClimatePreset(
      ...args: Parameters<SeamHttpThermostats['activateClimatePreset']>
    ): ReturnType<SeamHttpThermostats['activateClimatePreset']> {
      const seam = SeamHttpThermostats.fromClient(client, defaults)
      return seam.activateClimatePreset(...args)
    }
  }

  get ['/thermostats/cool'](): SeamHttpThermostats['cool'] {
    const { client, defaults } = this
    return function thermostatsCool(
      ...args: Parameters<SeamHttpThermostats['cool']>
    ): ReturnType<SeamHttpThermostats['cool']> {
      const seam = SeamHttpThermostats.fromClient(client, defaults)
      return seam.cool(...args)
    }
  }

  get ['/thermostats/create_climate_preset'](): SeamHttpThermostats['createClimatePreset'] {
    const { client, defaults } = this
    return function thermostatsCreateClimatePreset(
      ...args: Parameters<SeamHttpThermostats['createClimatePreset']>
    ): ReturnType<SeamHttpThermostats['createClimatePreset']> {
      const seam = SeamHttpThermostats.fromClient(client, defaults)
      return seam.createClimatePreset(...args)
    }
  }

  get ['/thermostats/delete_climate_preset'](): SeamHttpThermostats['deleteClimatePreset'] {
    const { client, defaults } = this
    return function thermostatsDeleteClimatePreset(
      ...args: Parameters<SeamHttpThermostats['deleteClimatePreset']>
    ): ReturnType<SeamHttpThermostats['deleteClimatePreset']> {
      const seam = SeamHttpThermostats.fromClient(client, defaults)
      return seam.deleteClimatePreset(...args)
    }
  }

  get ['/thermostats/get'](): SeamHttpThermostats['get'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function thermostatsGet(
      ...args: Parameters<SeamHttpThermostats['get']>
    ): ReturnType<SeamHttpThermostats['get']> {
      const seam = SeamHttpThermostats.fromClient(client, defaults)
      return seam.get(...args)
    }
  }

  get ['/thermostats/heat'](): SeamHttpThermostats['heat'] {
    const { client, defaults } = this
    return function thermostatsHeat(
      ...args: Parameters<SeamHttpThermostats['heat']>
    ): ReturnType<SeamHttpThermostats['heat']> {
      const seam = SeamHttpThermostats.fromClient(client, defaults)
      return seam.heat(...args)
    }
  }

  get ['/thermostats/heat_cool'](): SeamHttpThermostats['heatCool'] {
    const { client, defaults } = this
    return function thermostatsHeatCool(
      ...args: Parameters<SeamHttpThermostats['heatCool']>
    ): ReturnType<SeamHttpThermostats['heatCool']> {
      const seam = SeamHttpThermostats.fromClient(client, defaults)
      return seam.heatCool(...args)
    }
  }

  get ['/thermostats/list'](): SeamHttpThermostats['list'] {
    const { client, defaults } = this
    return function thermostatsList(
      ...args: Parameters<SeamHttpThermostats['list']>
    ): ReturnType<SeamHttpThermostats['list']> {
      const seam = SeamHttpThermostats.fromClient(client, defaults)
      return seam.list(...args)
    }
  }

  get ['/thermostats/off'](): SeamHttpThermostats['off'] {
    const { client, defaults } = this
    return function thermostatsOff(
      ...args: Parameters<SeamHttpThermostats['off']>
    ): ReturnType<SeamHttpThermostats['off']> {
      const seam = SeamHttpThermostats.fromClient(client, defaults)
      return seam.off(...args)
    }
  }

  get ['/thermostats/set_fallback_climate_preset'](): SeamHttpThermostats['setFallbackClimatePreset'] {
    const { client, defaults } = this
    return function thermostatsSetFallbackClimatePreset(
      ...args: Parameters<SeamHttpThermostats['setFallbackClimatePreset']>
    ): ReturnType<SeamHttpThermostats['setFallbackClimatePreset']> {
      const seam = SeamHttpThermostats.fromClient(client, defaults)
      return seam.setFallbackClimatePreset(...args)
    }
  }

  get ['/thermostats/set_fan_mode'](): SeamHttpThermostats['setFanMode'] {
    const { client, defaults } = this
    return function thermostatsSetFanMode(
      ...args: Parameters<SeamHttpThermostats['setFanMode']>
    ): ReturnType<SeamHttpThermostats['setFanMode']> {
      const seam = SeamHttpThermostats.fromClient(client, defaults)
      return seam.setFanMode(...args)
    }
  }

  get ['/thermostats/set_hvac_mode'](): SeamHttpThermostats['setHvacMode'] {
    const { client, defaults } = this
    return function thermostatsSetHvacMode(
      ...args: Parameters<SeamHttpThermostats['setHvacMode']>
    ): ReturnType<SeamHttpThermostats['setHvacMode']> {
      const seam = SeamHttpThermostats.fromClient(client, defaults)
      return seam.setHvacMode(...args)
    }
  }

  get ['/thermostats/set_temperature_threshold'](): SeamHttpThermostats['setTemperatureThreshold'] {
    const { client, defaults } = this
    return function thermostatsSetTemperatureThreshold(
      ...args: Parameters<SeamHttpThermostats['setTemperatureThreshold']>
    ): ReturnType<SeamHttpThermostats['setTemperatureThreshold']> {
      const seam = SeamHttpThermostats.fromClient(client, defaults)
      return seam.setTemperatureThreshold(...args)
    }
  }

  get ['/thermostats/update_climate_preset'](): SeamHttpThermostats['updateClimatePreset'] {
    const { client, defaults } = this
    return function thermostatsUpdateClimatePreset(
      ...args: Parameters<SeamHttpThermostats['updateClimatePreset']>
    ): ReturnType<SeamHttpThermostats['updateClimatePreset']> {
      const seam = SeamHttpThermostats.fromClient(client, defaults)
      return seam.updateClimatePreset(...args)
    }
  }

  get ['/thermostats/update_weekly_program'](): SeamHttpThermostats['updateWeeklyProgram'] {
    const { client, defaults } = this
    return function thermostatsUpdateWeeklyProgram(
      ...args: Parameters<SeamHttpThermostats['updateWeeklyProgram']>
    ): ReturnType<SeamHttpThermostats['updateWeeklyProgram']> {
      const seam = SeamHttpThermostats.fromClient(client, defaults)
      return seam.updateWeeklyProgram(...args)
    }
  }

  get ['/thermostats/daily_programs/create'](): SeamHttpThermostatsDailyPrograms['create'] {
    const { client, defaults } = this
    return function thermostatsDailyProgramsCreate(
      ...args: Parameters<SeamHttpThermostatsDailyPrograms['create']>
    ): ReturnType<SeamHttpThermostatsDailyPrograms['create']> {
      const seam = SeamHttpThermostatsDailyPrograms.fromClient(client, defaults)
      return seam.create(...args)
    }
  }

  get ['/thermostats/daily_programs/delete'](): SeamHttpThermostatsDailyPrograms['delete'] {
    const { client, defaults } = this
    return function thermostatsDailyProgramsDelete(
      ...args: Parameters<SeamHttpThermostatsDailyPrograms['delete']>
    ): ReturnType<SeamHttpThermostatsDailyPrograms['delete']> {
      const seam = SeamHttpThermostatsDailyPrograms.fromClient(client, defaults)
      return seam.delete(...args)
    }
  }

  get ['/thermostats/daily_programs/update'](): SeamHttpThermostatsDailyPrograms['update'] {
    const { client, defaults } = this
    return function thermostatsDailyProgramsUpdate(
      ...args: Parameters<SeamHttpThermostatsDailyPrograms['update']>
    ): ReturnType<SeamHttpThermostatsDailyPrograms['update']> {
      const seam = SeamHttpThermostatsDailyPrograms.fromClient(client, defaults)
      return seam.update(...args)
    }
  }

  get ['/thermostats/schedules/create'](): SeamHttpThermostatsSchedules['create'] {
    const { client, defaults } = this
    return function thermostatsSchedulesCreate(
      ...args: Parameters<SeamHttpThermostatsSchedules['create']>
    ): ReturnType<SeamHttpThermostatsSchedules['create']> {
      const seam = SeamHttpThermostatsSchedules.fromClient(client, defaults)
      return seam.create(...args)
    }
  }

  get ['/thermostats/schedules/delete'](): SeamHttpThermostatsSchedules['delete'] {
    const { client, defaults } = this
    return function thermostatsSchedulesDelete(
      ...args: Parameters<SeamHttpThermostatsSchedules['delete']>
    ): ReturnType<SeamHttpThermostatsSchedules['delete']> {
      const seam = SeamHttpThermostatsSchedules.fromClient(client, defaults)
      return seam.delete(...args)
    }
  }

  get ['/thermostats/schedules/get'](): SeamHttpThermostatsSchedules['get'] {
    const { client, defaults } = this
    return function thermostatsSchedulesGet(
      ...args: Parameters<SeamHttpThermostatsSchedules['get']>
    ): ReturnType<SeamHttpThermostatsSchedules['get']> {
      const seam = SeamHttpThermostatsSchedules.fromClient(client, defaults)
      return seam.get(...args)
    }
  }

  get ['/thermostats/schedules/list'](): SeamHttpThermostatsSchedules['list'] {
    const { client, defaults } = this
    return function thermostatsSchedulesList(
      ...args: Parameters<SeamHttpThermostatsSchedules['list']>
    ): ReturnType<SeamHttpThermostatsSchedules['list']> {
      const seam = SeamHttpThermostatsSchedules.fromClient(client, defaults)
      return seam.list(...args)
    }
  }

  get ['/thermostats/schedules/update'](): SeamHttpThermostatsSchedules['update'] {
    const { client, defaults } = this
    return function thermostatsSchedulesUpdate(
      ...args: Parameters<SeamHttpThermostatsSchedules['update']>
    ): ReturnType<SeamHttpThermostatsSchedules['update']> {
      const seam = SeamHttpThermostatsSchedules.fromClient(client, defaults)
      return seam.update(...args)
    }
  }

  get ['/thermostats/simulate/hvac_mode_adjusted'](): SeamHttpThermostatsSimulate['hvacModeAdjusted'] {
    const { client, defaults } = this
    return function thermostatsSimulateHvacModeAdjusted(
      ...args: Parameters<SeamHttpThermostatsSimulate['hvacModeAdjusted']>
    ): ReturnType<SeamHttpThermostatsSimulate['hvacModeAdjusted']> {
      const seam = SeamHttpThermostatsSimulate.fromClient(client, defaults)
      return seam.hvacModeAdjusted(...args)
    }
  }

  get ['/thermostats/simulate/temperature_reached'](): SeamHttpThermostatsSimulate['temperatureReached'] {
    const { client, defaults } = this
    return function thermostatsSimulateTemperatureReached(
      ...args: Parameters<SeamHttpThermostatsSimulate['temperatureReached']>
    ): ReturnType<SeamHttpThermostatsSimulate['temperatureReached']> {
      const seam = SeamHttpThermostatsSimulate.fromClient(client, defaults)
      return seam.temperatureReached(...args)
    }
  }

  get ['/unstable_access_grants/create'](): SeamHttpUnstableAccessGrants['create'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function unstableAccessGrantsCreate(
      ...args: Parameters<SeamHttpUnstableAccessGrants['create']>
    ): ReturnType<SeamHttpUnstableAccessGrants['create']> {
      const seam = SeamHttpUnstableAccessGrants.fromClient(client, defaults)
      return seam.create(...args)
    }
  }

  get ['/unstable_access_grants/delete'](): SeamHttpUnstableAccessGrants['delete'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function unstableAccessGrantsDelete(
      ...args: Parameters<SeamHttpUnstableAccessGrants['delete']>
    ): ReturnType<SeamHttpUnstableAccessGrants['delete']> {
      const seam = SeamHttpUnstableAccessGrants.fromClient(client, defaults)
      return seam.delete(...args)
    }
  }

  get ['/unstable_access_grants/get'](): SeamHttpUnstableAccessGrants['get'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function unstableAccessGrantsGet(
      ...args: Parameters<SeamHttpUnstableAccessGrants['get']>
    ): ReturnType<SeamHttpUnstableAccessGrants['get']> {
      const seam = SeamHttpUnstableAccessGrants.fromClient(client, defaults)
      return seam.get(...args)
    }
  }

  get ['/unstable_access_grants/list'](): SeamHttpUnstableAccessGrants['list'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function unstableAccessGrantsList(
      ...args: Parameters<SeamHttpUnstableAccessGrants['list']>
    ): ReturnType<SeamHttpUnstableAccessGrants['list']> {
      const seam = SeamHttpUnstableAccessGrants.fromClient(client, defaults)
      return seam.list(...args)
    }
  }

  get ['/unstable_access_methods/delete'](): SeamHttpUnstableAccessMethods['delete'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function unstableAccessMethodsDelete(
      ...args: Parameters<SeamHttpUnstableAccessMethods['delete']>
    ): ReturnType<SeamHttpUnstableAccessMethods['delete']> {
      const seam = SeamHttpUnstableAccessMethods.fromClient(client, defaults)
      return seam.delete(...args)
    }
  }

  get ['/unstable_access_methods/get'](): SeamHttpUnstableAccessMethods['get'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function unstableAccessMethodsGet(
      ...args: Parameters<SeamHttpUnstableAccessMethods['get']>
    ): ReturnType<SeamHttpUnstableAccessMethods['get']> {
      const seam = SeamHttpUnstableAccessMethods.fromClient(client, defaults)
      return seam.get(...args)
    }
  }

  get ['/unstable_access_methods/list'](): SeamHttpUnstableAccessMethods['list'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function unstableAccessMethodsList(
      ...args: Parameters<SeamHttpUnstableAccessMethods['list']>
    ): ReturnType<SeamHttpUnstableAccessMethods['list']> {
      const seam = SeamHttpUnstableAccessMethods.fromClient(client, defaults)
      return seam.list(...args)
    }
  }

  get ['/unstable_locations/add_acs_entrances'](): SeamHttpUnstableLocations['addAcsEntrances'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function unstableLocationsAddAcsEntrances(
      ...args: Parameters<SeamHttpUnstableLocations['addAcsEntrances']>
    ): ReturnType<SeamHttpUnstableLocations['addAcsEntrances']> {
      const seam = SeamHttpUnstableLocations.fromClient(client, defaults)
      return seam.addAcsEntrances(...args)
    }
  }

  get ['/unstable_locations/add_devices'](): SeamHttpUnstableLocations['addDevices'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function unstableLocationsAddDevices(
      ...args: Parameters<SeamHttpUnstableLocations['addDevices']>
    ): ReturnType<SeamHttpUnstableLocations['addDevices']> {
      const seam = SeamHttpUnstableLocations.fromClient(client, defaults)
      return seam.addDevices(...args)
    }
  }

  get ['/unstable_locations/create'](): SeamHttpUnstableLocations['create'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function unstableLocationsCreate(
      ...args: Parameters<SeamHttpUnstableLocations['create']>
    ): ReturnType<SeamHttpUnstableLocations['create']> {
      const seam = SeamHttpUnstableLocations.fromClient(client, defaults)
      return seam.create(...args)
    }
  }

  get ['/unstable_locations/delete'](): SeamHttpUnstableLocations['delete'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function unstableLocationsDelete(
      ...args: Parameters<SeamHttpUnstableLocations['delete']>
    ): ReturnType<SeamHttpUnstableLocations['delete']> {
      const seam = SeamHttpUnstableLocations.fromClient(client, defaults)
      return seam.delete(...args)
    }
  }

  get ['/unstable_locations/get'](): SeamHttpUnstableLocations['get'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function unstableLocationsGet(
      ...args: Parameters<SeamHttpUnstableLocations['get']>
    ): ReturnType<SeamHttpUnstableLocations['get']> {
      const seam = SeamHttpUnstableLocations.fromClient(client, defaults)
      return seam.get(...args)
    }
  }

  get ['/unstable_locations/list'](): SeamHttpUnstableLocations['list'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function unstableLocationsList(
      ...args: Parameters<SeamHttpUnstableLocations['list']>
    ): ReturnType<SeamHttpUnstableLocations['list']> {
      const seam = SeamHttpUnstableLocations.fromClient(client, defaults)
      return seam.list(...args)
    }
  }

  get ['/unstable_locations/remove_acs_entrances'](): SeamHttpUnstableLocations['removeAcsEntrances'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function unstableLocationsRemoveAcsEntrances(
      ...args: Parameters<SeamHttpUnstableLocations['removeAcsEntrances']>
    ): ReturnType<SeamHttpUnstableLocations['removeAcsEntrances']> {
      const seam = SeamHttpUnstableLocations.fromClient(client, defaults)
      return seam.removeAcsEntrances(...args)
    }
  }

  get ['/unstable_locations/remove_devices'](): SeamHttpUnstableLocations['removeDevices'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function unstableLocationsRemoveDevices(
      ...args: Parameters<SeamHttpUnstableLocations['removeDevices']>
    ): ReturnType<SeamHttpUnstableLocations['removeDevices']> {
      const seam = SeamHttpUnstableLocations.fromClient(client, defaults)
      return seam.removeDevices(...args)
    }
  }

  get ['/unstable_locations/update'](): SeamHttpUnstableLocations['update'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function unstableLocationsUpdate(
      ...args: Parameters<SeamHttpUnstableLocations['update']>
    ): ReturnType<SeamHttpUnstableLocations['update']> {
      const seam = SeamHttpUnstableLocations.fromClient(client, defaults)
      return seam.update(...args)
    }
  }

  get ['/unstable_partner/building_blocks/connect_accounts'](): SeamHttpUnstablePartnerBuildingBlocks['connectAccounts'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function unstablePartnerBuildingBlocksConnectAccounts(
      ...args: Parameters<
        SeamHttpUnstablePartnerBuildingBlocks['connectAccounts']
      >
    ): ReturnType<SeamHttpUnstablePartnerBuildingBlocks['connectAccounts']> {
      const seam = SeamHttpUnstablePartnerBuildingBlocks.fromClient(
        client,
        defaults,
      )
      return seam.connectAccounts(...args)
    }
  }

  get ['/unstable_partner/building_blocks/generate_magic_link'](): SeamHttpUnstablePartnerBuildingBlocks['generateMagicLink'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function unstablePartnerBuildingBlocksGenerateMagicLink(
      ...args: Parameters<
        SeamHttpUnstablePartnerBuildingBlocks['generateMagicLink']
      >
    ): ReturnType<SeamHttpUnstablePartnerBuildingBlocks['generateMagicLink']> {
      const seam = SeamHttpUnstablePartnerBuildingBlocks.fromClient(
        client,
        defaults,
      )
      return seam.generateMagicLink(...args)
    }
  }

  get ['/unstable_partner/building_blocks/manage_devices'](): SeamHttpUnstablePartnerBuildingBlocks['manageDevices'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function unstablePartnerBuildingBlocksManageDevices(
      ...args: Parameters<
        SeamHttpUnstablePartnerBuildingBlocks['manageDevices']
      >
    ): ReturnType<SeamHttpUnstablePartnerBuildingBlocks['manageDevices']> {
      const seam = SeamHttpUnstablePartnerBuildingBlocks.fromClient(
        client,
        defaults,
      )
      return seam.manageDevices(...args)
    }
  }

  get ['/unstable_partner/building_blocks/organize_spaces'](): SeamHttpUnstablePartnerBuildingBlocks['organizeSpaces'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function unstablePartnerBuildingBlocksOrganizeSpaces(
      ...args: Parameters<
        SeamHttpUnstablePartnerBuildingBlocks['organizeSpaces']
      >
    ): ReturnType<SeamHttpUnstablePartnerBuildingBlocks['organizeSpaces']> {
      const seam = SeamHttpUnstablePartnerBuildingBlocks.fromClient(
        client,
        defaults,
      )
      return seam.organizeSpaces(...args)
    }
  }

  get ['/unstable_partner/resources/push'](): SeamHttpUnstablePartnerResources['push'] {
    const { client, defaults } = this
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return function unstablePartnerResourcesPush(
      ...args: Parameters<SeamHttpUnstablePartnerResources['push']>
    ): ReturnType<SeamHttpUnstablePartnerResources['push']> {
      const seam = SeamHttpUnstablePartnerResources.fromClient(client, defaults)
      return seam.push(...args)
    }
  }

  get ['/user_identities/add_acs_user'](): SeamHttpUserIdentities['addAcsUser'] {
    const { client, defaults } = this
    return function userIdentitiesAddAcsUser(
      ...args: Parameters<SeamHttpUserIdentities['addAcsUser']>
    ): ReturnType<SeamHttpUserIdentities['addAcsUser']> {
      const seam = SeamHttpUserIdentities.fromClient(client, defaults)
      return seam.addAcsUser(...args)
    }
  }

  get ['/user_identities/create'](): SeamHttpUserIdentities['create'] {
    const { client, defaults } = this
    return function userIdentitiesCreate(
      ...args: Parameters<SeamHttpUserIdentities['create']>
    ): ReturnType<SeamHttpUserIdentities['create']> {
      const seam = SeamHttpUserIdentities.fromClient(client, defaults)
      return seam.create(...args)
    }
  }

  get ['/user_identities/delete'](): SeamHttpUserIdentities['delete'] {
    const { client, defaults } = this
    return function userIdentitiesDelete(
      ...args: Parameters<SeamHttpUserIdentities['delete']>
    ): ReturnType<SeamHttpUserIdentities['delete']> {
      const seam = SeamHttpUserIdentities.fromClient(client, defaults)
      return seam.delete(...args)
    }
  }

  get ['/user_identities/generate_instant_key'](): SeamHttpUserIdentities['generateInstantKey'] {
    const { client, defaults } = this
    return function userIdentitiesGenerateInstantKey(
      ...args: Parameters<SeamHttpUserIdentities['generateInstantKey']>
    ): ReturnType<SeamHttpUserIdentities['generateInstantKey']> {
      const seam = SeamHttpUserIdentities.fromClient(client, defaults)
      return seam.generateInstantKey(...args)
    }
  }

  get ['/user_identities/get'](): SeamHttpUserIdentities['get'] {
    const { client, defaults } = this
    return function userIdentitiesGet(
      ...args: Parameters<SeamHttpUserIdentities['get']>
    ): ReturnType<SeamHttpUserIdentities['get']> {
      const seam = SeamHttpUserIdentities.fromClient(client, defaults)
      return seam.get(...args)
    }
  }

  get ['/user_identities/grant_access_to_device'](): SeamHttpUserIdentities['grantAccessToDevice'] {
    const { client, defaults } = this
    return function userIdentitiesGrantAccessToDevice(
      ...args: Parameters<SeamHttpUserIdentities['grantAccessToDevice']>
    ): ReturnType<SeamHttpUserIdentities['grantAccessToDevice']> {
      const seam = SeamHttpUserIdentities.fromClient(client, defaults)
      return seam.grantAccessToDevice(...args)
    }
  }

  get ['/user_identities/list'](): SeamHttpUserIdentities['list'] {
    const { client, defaults } = this
    return function userIdentitiesList(
      ...args: Parameters<SeamHttpUserIdentities['list']>
    ): ReturnType<SeamHttpUserIdentities['list']> {
      const seam = SeamHttpUserIdentities.fromClient(client, defaults)
      return seam.list(...args)
    }
  }

  get ['/user_identities/list_accessible_devices'](): SeamHttpUserIdentities['listAccessibleDevices'] {
    const { client, defaults } = this
    return function userIdentitiesListAccessibleDevices(
      ...args: Parameters<SeamHttpUserIdentities['listAccessibleDevices']>
    ): ReturnType<SeamHttpUserIdentities['listAccessibleDevices']> {
      const seam = SeamHttpUserIdentities.fromClient(client, defaults)
      return seam.listAccessibleDevices(...args)
    }
  }

  get ['/user_identities/list_acs_systems'](): SeamHttpUserIdentities['listAcsSystems'] {
    const { client, defaults } = this
    return function userIdentitiesListAcsSystems(
      ...args: Parameters<SeamHttpUserIdentities['listAcsSystems']>
    ): ReturnType<SeamHttpUserIdentities['listAcsSystems']> {
      const seam = SeamHttpUserIdentities.fromClient(client, defaults)
      return seam.listAcsSystems(...args)
    }
  }

  get ['/user_identities/list_acs_users'](): SeamHttpUserIdentities['listAcsUsers'] {
    const { client, defaults } = this
    return function userIdentitiesListAcsUsers(
      ...args: Parameters<SeamHttpUserIdentities['listAcsUsers']>
    ): ReturnType<SeamHttpUserIdentities['listAcsUsers']> {
      const seam = SeamHttpUserIdentities.fromClient(client, defaults)
      return seam.listAcsUsers(...args)
    }
  }

  get ['/user_identities/remove_acs_user'](): SeamHttpUserIdentities['removeAcsUser'] {
    const { client, defaults } = this
    return function userIdentitiesRemoveAcsUser(
      ...args: Parameters<SeamHttpUserIdentities['removeAcsUser']>
    ): ReturnType<SeamHttpUserIdentities['removeAcsUser']> {
      const seam = SeamHttpUserIdentities.fromClient(client, defaults)
      return seam.removeAcsUser(...args)
    }
  }

  get ['/user_identities/revoke_access_to_device'](): SeamHttpUserIdentities['revokeAccessToDevice'] {
    const { client, defaults } = this
    return function userIdentitiesRevokeAccessToDevice(
      ...args: Parameters<SeamHttpUserIdentities['revokeAccessToDevice']>
    ): ReturnType<SeamHttpUserIdentities['revokeAccessToDevice']> {
      const seam = SeamHttpUserIdentities.fromClient(client, defaults)
      return seam.revokeAccessToDevice(...args)
    }
  }

  get ['/user_identities/update'](): SeamHttpUserIdentities['update'] {
    const { client, defaults } = this
    return function userIdentitiesUpdate(
      ...args: Parameters<SeamHttpUserIdentities['update']>
    ): ReturnType<SeamHttpUserIdentities['update']> {
      const seam = SeamHttpUserIdentities.fromClient(client, defaults)
      return seam.update(...args)
    }
  }

  get ['/user_identities/enrollment_automations/delete'](): SeamHttpUserIdentitiesEnrollmentAutomations['delete'] {
    const { client, defaults } = this
    return function userIdentitiesEnrollmentAutomationsDelete(
      ...args: Parameters<SeamHttpUserIdentitiesEnrollmentAutomations['delete']>
    ): ReturnType<SeamHttpUserIdentitiesEnrollmentAutomations['delete']> {
      const seam = SeamHttpUserIdentitiesEnrollmentAutomations.fromClient(
        client,
        defaults,
      )
      return seam.delete(...args)
    }
  }

  get ['/user_identities/enrollment_automations/get'](): SeamHttpUserIdentitiesEnrollmentAutomations['get'] {
    const { client, defaults } = this
    return function userIdentitiesEnrollmentAutomationsGet(
      ...args: Parameters<SeamHttpUserIdentitiesEnrollmentAutomations['get']>
    ): ReturnType<SeamHttpUserIdentitiesEnrollmentAutomations['get']> {
      const seam = SeamHttpUserIdentitiesEnrollmentAutomations.fromClient(
        client,
        defaults,
      )
      return seam.get(...args)
    }
  }

  get ['/user_identities/enrollment_automations/launch'](): SeamHttpUserIdentitiesEnrollmentAutomations['launch'] {
    const { client, defaults } = this
    return function userIdentitiesEnrollmentAutomationsLaunch(
      ...args: Parameters<SeamHttpUserIdentitiesEnrollmentAutomations['launch']>
    ): ReturnType<SeamHttpUserIdentitiesEnrollmentAutomations['launch']> {
      const seam = SeamHttpUserIdentitiesEnrollmentAutomations.fromClient(
        client,
        defaults,
      )
      return seam.launch(...args)
    }
  }

  get ['/user_identities/enrollment_automations/list'](): SeamHttpUserIdentitiesEnrollmentAutomations['list'] {
    const { client, defaults } = this
    return function userIdentitiesEnrollmentAutomationsList(
      ...args: Parameters<SeamHttpUserIdentitiesEnrollmentAutomations['list']>
    ): ReturnType<SeamHttpUserIdentitiesEnrollmentAutomations['list']> {
      const seam = SeamHttpUserIdentitiesEnrollmentAutomations.fromClient(
        client,
        defaults,
      )
      return seam.list(...args)
    }
  }

  get ['/webhooks/create'](): SeamHttpWebhooks['create'] {
    const { client, defaults } = this
    return function webhooksCreate(
      ...args: Parameters<SeamHttpWebhooks['create']>
    ): ReturnType<SeamHttpWebhooks['create']> {
      const seam = SeamHttpWebhooks.fromClient(client, defaults)
      return seam.create(...args)
    }
  }

  get ['/webhooks/delete'](): SeamHttpWebhooks['delete'] {
    const { client, defaults } = this
    return function webhooksDelete(
      ...args: Parameters<SeamHttpWebhooks['delete']>
    ): ReturnType<SeamHttpWebhooks['delete']> {
      const seam = SeamHttpWebhooks.fromClient(client, defaults)
      return seam.delete(...args)
    }
  }

  get ['/webhooks/get'](): SeamHttpWebhooks['get'] {
    const { client, defaults } = this
    return function webhooksGet(
      ...args: Parameters<SeamHttpWebhooks['get']>
    ): ReturnType<SeamHttpWebhooks['get']> {
      const seam = SeamHttpWebhooks.fromClient(client, defaults)
      return seam.get(...args)
    }
  }

  get ['/webhooks/list'](): SeamHttpWebhooks['list'] {
    const { client, defaults } = this
    return function webhooksList(
      ...args: Parameters<SeamHttpWebhooks['list']>
    ): ReturnType<SeamHttpWebhooks['list']> {
      const seam = SeamHttpWebhooks.fromClient(client, defaults)
      return seam.list(...args)
    }
  }

  get ['/webhooks/update'](): SeamHttpWebhooks['update'] {
    const { client, defaults } = this
    return function webhooksUpdate(
      ...args: Parameters<SeamHttpWebhooks['update']>
    ): ReturnType<SeamHttpWebhooks['update']> {
      const seam = SeamHttpWebhooks.fromClient(client, defaults)
      return seam.update(...args)
    }
  }

  get ['/workspaces/create'](): SeamHttpWorkspaces['create'] {
    const { client, defaults } = this
    return function workspacesCreate(
      ...args: Parameters<SeamHttpWorkspaces['create']>
    ): ReturnType<SeamHttpWorkspaces['create']> {
      const seam = SeamHttpWorkspaces.fromClient(client, defaults)
      return seam.create(...args)
    }
  }

  get ['/workspaces/get'](): SeamHttpWorkspaces['get'] {
    const { client, defaults } = this
    return function workspacesGet(
      ...args: Parameters<SeamHttpWorkspaces['get']>
    ): ReturnType<SeamHttpWorkspaces['get']> {
      const seam = SeamHttpWorkspaces.fromClient(client, defaults)
      return seam.get(...args)
    }
  }

  get ['/workspaces/list'](): SeamHttpWorkspaces['list'] {
    const { client, defaults } = this
    return function workspacesList(
      ...args: Parameters<SeamHttpWorkspaces['list']>
    ): ReturnType<SeamHttpWorkspaces['list']> {
      const seam = SeamHttpWorkspaces.fromClient(client, defaults)
      return seam.list(...args)
    }
  }

  get ['/workspaces/reset_sandbox'](): SeamHttpWorkspaces['resetSandbox'] {
    const { client, defaults } = this
    return function workspacesResetSandbox(
      ...args: Parameters<SeamHttpWorkspaces['resetSandbox']>
    ): ReturnType<SeamHttpWorkspaces['resetSandbox']> {
      const seam = SeamHttpWorkspaces.fromClient(client, defaults)
      return seam.resetSandbox(...args)
    }
  }

  get ['/workspaces/update'](): SeamHttpWorkspaces['update'] {
    const { client, defaults } = this
    return function workspacesUpdate(
      ...args: Parameters<SeamHttpWorkspaces['update']>
    ): ReturnType<SeamHttpWorkspaces['update']> {
      const seam = SeamHttpWorkspaces.fromClient(client, defaults)
      return seam.update(...args)
    }
  }
}

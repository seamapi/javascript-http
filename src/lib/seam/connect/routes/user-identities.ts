/*
 * Automatically generated by generate-routes.ts.
 * Do not edit this file or add other files to this directory.
 */

import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'
import type { SetNonNullable } from 'type-fest'

import {
  getAuthHeadersForClientSessionToken,
  warnOnInsecureuserIdentifierKey,
} from 'lib/seam/connect/auth.js'
import { type Client, createClient } from 'lib/seam/connect/client.js'
import {
  isSeamHttpOptionsWithApiKey,
  isSeamHttpOptionsWithClient,
  isSeamHttpOptionsWithClientSessionToken,
  isSeamHttpOptionsWithConsoleSessionToken,
  isSeamHttpOptionsWithPersonalAccessToken,
  type SeamHttpFromPublishableKeyOptions,
  SeamHttpInvalidOptionsError,
  type SeamHttpOptions,
  type SeamHttpOptionsWithApiKey,
  type SeamHttpOptionsWithClient,
  type SeamHttpOptionsWithClientSessionToken,
  type SeamHttpOptionsWithConsoleSessionToken,
  type SeamHttpOptionsWithPersonalAccessToken,
  type SeamHttpRequestOptions,
} from 'lib/seam/connect/options.js'
import {
  limitToSeamHttpRequestOptions,
  parseOptions,
} from 'lib/seam/connect/parse-options.js'
import { SeamApiRequest } from 'lib/seam/connect/seam-api-request.js'

import { SeamHttpClientSessions } from './client-sessions.js'
import { SeamHttpUserIdentitiesEnrollmentAutomations } from './user-identities-enrollment-automations.js'

export class SeamHttpUserIdentities {
  client: Client
  readonly defaults: Required<SeamHttpRequestOptions>

  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {
    const options = parseOptions(apiKeyOrOptions)
    this.client = 'client' in options ? options.client : createClient(options)
    this.defaults = limitToSeamHttpRequestOptions(options)
  }

  static fromClient(
    client: SeamHttpOptionsWithClient['client'],
    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},
  ): SeamHttpUserIdentities {
    const constructorOptions = { ...options, client }
    if (!isSeamHttpOptionsWithClient(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError('Missing client')
    }
    return new SeamHttpUserIdentities(constructorOptions)
  }

  static fromApiKey(
    apiKey: SeamHttpOptionsWithApiKey['apiKey'],
    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},
  ): SeamHttpUserIdentities {
    const constructorOptions = { ...options, apiKey }
    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError('Missing apiKey')
    }
    return new SeamHttpUserIdentities(constructorOptions)
  }

  static fromClientSessionToken(
    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],
    options: Omit<
      SeamHttpOptionsWithClientSessionToken,
      'clientSessionToken'
    > = {},
  ): SeamHttpUserIdentities {
    const constructorOptions = { ...options, clientSessionToken }
    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')
    }
    return new SeamHttpUserIdentities(constructorOptions)
  }

  static async fromPublishableKey(
    publishableKey: string,
    userIdentifierKey: string,
    options: SeamHttpFromPublishableKeyOptions = {},
  ): Promise<SeamHttpUserIdentities> {
    warnOnInsecureuserIdentifierKey(userIdentifierKey)
    const clientOptions = parseOptions({ ...options, publishableKey })
    if (isSeamHttpOptionsWithClient(clientOptions)) {
      throw new SeamHttpInvalidOptionsError(
        'The client option cannot be used with SeamHttp.fromPublishableKey',
      )
    }
    const client = createClient(clientOptions)
    const clientSessions = SeamHttpClientSessions.fromClient(client)
    const { token } = await clientSessions.getOrCreate({
      user_identifier_key: userIdentifierKey,
    })
    return SeamHttpUserIdentities.fromClientSessionToken(token, options)
  }

  static fromConsoleSessionToken(
    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],
    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],
    options: Omit<
      SeamHttpOptionsWithConsoleSessionToken,
      'consoleSessionToken' | 'workspaceId'
    > = {},
  ): SeamHttpUserIdentities {
    const constructorOptions = { ...options, consoleSessionToken, workspaceId }
    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError(
        'Missing consoleSessionToken or workspaceId',
      )
    }
    return new SeamHttpUserIdentities(constructorOptions)
  }

  static fromPersonalAccessToken(
    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],
    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],
    options: Omit<
      SeamHttpOptionsWithPersonalAccessToken,
      'personalAccessToken' | 'workspaceId'
    > = {},
  ): SeamHttpUserIdentities {
    const constructorOptions = { ...options, personalAccessToken, workspaceId }
    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError(
        'Missing personalAccessToken or workspaceId',
      )
    }
    return new SeamHttpUserIdentities(constructorOptions)
  }

  async updateClientSessionToken(
    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],
  ): Promise<void> {
    const { headers } = this.client.defaults
    const authHeaders = getAuthHeadersForClientSessionToken({
      clientSessionToken,
    })
    for (const key of Object.keys(authHeaders)) {
      if (headers[key] == null) {
        throw new Error(
          'Cannot update a clientSessionToken on a client created without a clientSessionToken',
        )
      }
    }
    this.client.defaults.headers = { ...headers, ...authHeaders }
    const clientSessions = SeamHttpClientSessions.fromClient(this.client)
    await clientSessions.get()
  }

  get enrollmentAutomations(): SeamHttpUserIdentitiesEnrollmentAutomations {
    return SeamHttpUserIdentitiesEnrollmentAutomations.fromClient(
      this.client,
      this.defaults,
    )
  }

  addAcsUser(
    body?: UserIdentitiesAddAcsUserBody,
  ): SeamApiRequest<undefined | UserIdentitiesAddAcsUserBody, void, undefined> {
    return new SeamApiRequest(
      this,
      {
        url: '/user_identities/add_acs_user',
        method: 'post',
        data: body,
      },
      undefined,
    )
  }

  create(
    body?: UserIdentitiesCreateBody,
  ): SeamApiRequest<
    undefined | UserIdentitiesCreateBody,
    UserIdentitiesCreateResponse,
    'user_identity'
  > {
    return new SeamApiRequest(
      this,
      {
        url: '/user_identities/create',
        method: 'post',
        data: body,
      },
      'user_identity',
    )
  }

  delete(
    body?: UserIdentitiesDeleteBody,
  ): SeamApiRequest<undefined | UserIdentitiesDeleteBody, void, undefined> {
    return new SeamApiRequest(
      this,
      {
        url: '/user_identities/delete',
        method: 'post',
        data: body,
      },
      undefined,
    )
  }

  get(
    body?: UserIdentitiesGetParams,
  ): SeamApiRequest<
    undefined | UserIdentitiesGetParams,
    UserIdentitiesGetResponse,
    'user_identity'
  > {
    return new SeamApiRequest(
      this,
      {
        url: '/user_identities/get',
        method: 'post',
        data: body,
      },
      'user_identity',
    )
  }

  grantAccessToDevice(
    body?: UserIdentitiesGrantAccessToDeviceBody,
  ): SeamApiRequest<
    undefined | UserIdentitiesGrantAccessToDeviceBody,
    void,
    undefined
  > {
    return new SeamApiRequest(
      this,
      {
        url: '/user_identities/grant_access_to_device',
        method: 'post',
        data: body,
      },
      undefined,
    )
  }

  list(
    body?: UserIdentitiesListParams,
  ): SeamApiRequest<
    undefined | UserIdentitiesListParams,
    UserIdentitiesListResponse,
    'user_identities'
  > {
    return new SeamApiRequest(
      this,
      {
        url: '/user_identities/list',
        method: 'post',
        data: body,
      },
      'user_identities',
    )
  }

  listAccessibleDevices(
    body?: UserIdentitiesListAccessibleDevicesParams,
  ): SeamApiRequest<
    undefined | UserIdentitiesListAccessibleDevicesParams,
    UserIdentitiesListAccessibleDevicesResponse,
    'accessible_devices'
  > {
    return new SeamApiRequest(
      this,
      {
        url: '/user_identities/list_accessible_devices',
        method: 'post',
        data: body,
      },
      'accessible_devices',
    )
  }

  listAcsSystems(
    body?: UserIdentitiesListAcsSystemsParams,
  ): SeamApiRequest<
    undefined | UserIdentitiesListAcsSystemsParams,
    UserIdentitiesListAcsSystemsResponse,
    'acs_systems'
  > {
    return new SeamApiRequest(
      this,
      {
        url: '/user_identities/list_acs_systems',
        method: 'post',
        data: body,
      },
      'acs_systems',
    )
  }

  listAcsUsers(
    body?: UserIdentitiesListAcsUsersParams,
  ): SeamApiRequest<
    undefined | UserIdentitiesListAcsUsersParams,
    UserIdentitiesListAcsUsersResponse,
    'acs_users'
  > {
    return new SeamApiRequest(
      this,
      {
        url: '/user_identities/list_acs_users',
        method: 'post',
        data: body,
      },
      'acs_users',
    )
  }

  removeAcsUser(
    body?: UserIdentitiesRemoveAcsUserBody,
  ): SeamApiRequest<
    undefined | UserIdentitiesRemoveAcsUserBody,
    void,
    undefined
  > {
    return new SeamApiRequest(
      this,
      {
        url: '/user_identities/remove_acs_user',
        method: 'post',
        data: body,
      },
      undefined,
    )
  }

  revokeAccessToDevice(
    body?: UserIdentitiesRevokeAccessToDeviceBody,
  ): SeamApiRequest<
    undefined | UserIdentitiesRevokeAccessToDeviceBody,
    void,
    undefined
  > {
    return new SeamApiRequest(
      this,
      {
        url: '/user_identities/revoke_access_to_device',
        method: 'post',
        data: body,
      },
      undefined,
    )
  }

  update(
    body?: UserIdentitiesUpdateBody,
  ): SeamApiRequest<undefined | UserIdentitiesUpdateBody, void, undefined> {
    return new SeamApiRequest(
      this,
      {
        url: '/user_identities/update',
        method: 'post',
        data: body,
      },
      undefined,
    )
  }
}

export type UserIdentitiesAddAcsUserBody =
  RouteRequestBody<'/user_identities/add_acs_user'>

export type UserIdentitiesAddAcsUserResponse = SetNonNullable<
  Required<RouteResponse<'/user_identities/add_acs_user'>>
>

export type UserIdentitiesAddAcsUserOptions = never

export type UserIdentitiesCreateBody =
  RouteRequestBody<'/user_identities/create'>

export type UserIdentitiesCreateResponse = SetNonNullable<
  Required<RouteResponse<'/user_identities/create'>>
>

export type UserIdentitiesCreateOptions = never

export type UserIdentitiesDeleteBody =
  RouteRequestBody<'/user_identities/delete'>

export type UserIdentitiesDeleteResponse = SetNonNullable<
  Required<RouteResponse<'/user_identities/delete'>>
>

export type UserIdentitiesDeleteOptions = never

export type UserIdentitiesGetParams = RouteRequestBody<'/user_identities/get'>

export type UserIdentitiesGetResponse = SetNonNullable<
  Required<RouteResponse<'/user_identities/get'>>
>

export type UserIdentitiesGetOptions = never

export type UserIdentitiesGrantAccessToDeviceBody =
  RouteRequestBody<'/user_identities/grant_access_to_device'>

export type UserIdentitiesGrantAccessToDeviceResponse = SetNonNullable<
  Required<RouteResponse<'/user_identities/grant_access_to_device'>>
>

export type UserIdentitiesGrantAccessToDeviceOptions = never

export type UserIdentitiesListParams = RouteRequestBody<'/user_identities/list'>

export type UserIdentitiesListResponse = SetNonNullable<
  Required<RouteResponse<'/user_identities/list'>>
>

export type UserIdentitiesListOptions = never

export type UserIdentitiesListAccessibleDevicesParams =
  RouteRequestBody<'/user_identities/list_accessible_devices'>

export type UserIdentitiesListAccessibleDevicesResponse = SetNonNullable<
  Required<RouteResponse<'/user_identities/list_accessible_devices'>>
>

export type UserIdentitiesListAccessibleDevicesOptions = never

export type UserIdentitiesListAcsSystemsParams =
  RouteRequestBody<'/user_identities/list_acs_systems'>

export type UserIdentitiesListAcsSystemsResponse = SetNonNullable<
  Required<RouteResponse<'/user_identities/list_acs_systems'>>
>

export type UserIdentitiesListAcsSystemsOptions = never

export type UserIdentitiesListAcsUsersParams =
  RouteRequestBody<'/user_identities/list_acs_users'>

export type UserIdentitiesListAcsUsersResponse = SetNonNullable<
  Required<RouteResponse<'/user_identities/list_acs_users'>>
>

export type UserIdentitiesListAcsUsersOptions = never

export type UserIdentitiesRemoveAcsUserBody =
  RouteRequestBody<'/user_identities/remove_acs_user'>

export type UserIdentitiesRemoveAcsUserResponse = SetNonNullable<
  Required<RouteResponse<'/user_identities/remove_acs_user'>>
>

export type UserIdentitiesRemoveAcsUserOptions = never

export type UserIdentitiesRevokeAccessToDeviceBody =
  RouteRequestBody<'/user_identities/revoke_access_to_device'>

export type UserIdentitiesRevokeAccessToDeviceResponse = SetNonNullable<
  Required<RouteResponse<'/user_identities/revoke_access_to_device'>>
>

export type UserIdentitiesRevokeAccessToDeviceOptions = never

export type UserIdentitiesUpdateBody =
  RouteRequestBody<'/user_identities/update'>

export type UserIdentitiesUpdateResponse = SetNonNullable<
  Required<RouteResponse<'/user_identities/update'>>
>

export type UserIdentitiesUpdateOptions = never

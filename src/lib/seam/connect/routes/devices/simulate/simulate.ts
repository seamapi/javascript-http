/*
 * Automatically generated by codegen/smith.ts.
 * Do not edit this file or add other files to this directory.
 */

import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'

import { seamApiLtsVersion } from 'lib/lts-version.js'
import {
  getAuthHeadersForClientSessionToken,
  warnOnInsecureuserIdentifierKey,
} from 'lib/seam/connect/auth.js'
import { type Client, createClient } from 'lib/seam/connect/client.js'
import {
  isSeamHttpOptionsWithApiKey,
  isSeamHttpOptionsWithClient,
  isSeamHttpOptionsWithClientSessionToken,
  isSeamHttpOptionsWithConsoleSessionToken,
  isSeamHttpOptionsWithPersonalAccessToken,
  type SeamHttpFromPublishableKeyOptions,
  SeamHttpInvalidOptionsError,
  type SeamHttpOptions,
  type SeamHttpOptionsWithApiKey,
  type SeamHttpOptionsWithClient,
  type SeamHttpOptionsWithClientSessionToken,
  type SeamHttpOptionsWithConsoleSessionToken,
  type SeamHttpOptionsWithPersonalAccessToken,
  type SeamHttpRequestOptions,
} from 'lib/seam/connect/options.js'
import {
  limitToSeamHttpRequestOptions,
  parseOptions,
} from 'lib/seam/connect/parse-options.js'
import { SeamHttpClientSessions } from 'lib/seam/connect/routes/client-sessions/index.js'
import { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'
import { SeamPaginator } from 'lib/seam/connect/seam-paginator.js'
import type { SetNonNullable } from 'lib/types.js'

export class SeamHttpDevicesSimulate {
  client: Client
  readonly defaults: Required<SeamHttpRequestOptions>
  readonly ltsVersion = seamApiLtsVersion
  static ltsVersion = seamApiLtsVersion

  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {
    const options = parseOptions(apiKeyOrOptions)
    this.client = 'client' in options ? options.client : createClient(options)
    this.defaults = limitToSeamHttpRequestOptions(options)
  }

  static fromClient(
    client: SeamHttpOptionsWithClient['client'],
    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},
  ): SeamHttpDevicesSimulate {
    const constructorOptions = { ...options, client }
    if (!isSeamHttpOptionsWithClient(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError('Missing client')
    }
    return new SeamHttpDevicesSimulate(constructorOptions)
  }

  static fromApiKey(
    apiKey: SeamHttpOptionsWithApiKey['apiKey'],
    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},
  ): SeamHttpDevicesSimulate {
    const constructorOptions = { ...options, apiKey }
    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError('Missing apiKey')
    }
    return new SeamHttpDevicesSimulate(constructorOptions)
  }

  static fromClientSessionToken(
    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],
    options: Omit<
      SeamHttpOptionsWithClientSessionToken,
      'clientSessionToken'
    > = {},
  ): SeamHttpDevicesSimulate {
    const constructorOptions = { ...options, clientSessionToken }
    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')
    }
    return new SeamHttpDevicesSimulate(constructorOptions)
  }

  static async fromPublishableKey(
    publishableKey: string,
    userIdentifierKey: string,
    options: SeamHttpFromPublishableKeyOptions = {},
  ): Promise<SeamHttpDevicesSimulate> {
    warnOnInsecureuserIdentifierKey(userIdentifierKey)
    const clientOptions = parseOptions({ ...options, publishableKey })
    if (isSeamHttpOptionsWithClient(clientOptions)) {
      throw new SeamHttpInvalidOptionsError(
        'The client option cannot be used with SeamHttpDevicesSimulate.fromPublishableKey',
      )
    }
    const client = createClient(clientOptions)
    const clientSessions = SeamHttpClientSessions.fromClient(client)
    const { token } = await clientSessions.getOrCreate({
      user_identifier_key: userIdentifierKey,
    })
    return SeamHttpDevicesSimulate.fromClientSessionToken(token, options)
  }

  static fromConsoleSessionToken(
    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],
    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],
    options: Omit<
      SeamHttpOptionsWithConsoleSessionToken,
      'consoleSessionToken' | 'workspaceId'
    > = {},
  ): SeamHttpDevicesSimulate {
    const constructorOptions = { ...options, consoleSessionToken, workspaceId }
    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError(
        'Missing consoleSessionToken or workspaceId',
      )
    }
    return new SeamHttpDevicesSimulate(constructorOptions)
  }

  static fromPersonalAccessToken(
    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],
    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],
    options: Omit<
      SeamHttpOptionsWithPersonalAccessToken,
      'personalAccessToken' | 'workspaceId'
    > = {},
  ): SeamHttpDevicesSimulate {
    const constructorOptions = { ...options, personalAccessToken, workspaceId }
    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError(
        'Missing personalAccessToken or workspaceId',
      )
    }
    return new SeamHttpDevicesSimulate(constructorOptions)
  }

  createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(
    request: SeamHttpRequest<TResponse, TResponseKey>,
  ): SeamPaginator<TResponse, TResponseKey> {
    return new SeamPaginator<TResponse, TResponseKey>(this, request)
  }

  async updateClientSessionToken(
    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],
  ): Promise<void> {
    const { headers } = this.client.defaults
    const authHeaders = getAuthHeadersForClientSessionToken({
      clientSessionToken,
    })
    for (const key of Object.keys(authHeaders)) {
      if (headers[key] == null) {
        throw new Error(
          'Cannot update a clientSessionToken on a client created without a clientSessionToken',
        )
      }
    }
    this.client.defaults.headers = { ...headers, ...authHeaders }
    const clientSessions = SeamHttpClientSessions.fromClient(this.client)
    await clientSessions.get()
  }

  connect(
    parameters?: DevicesSimulateConnectParameters,
    options: DevicesSimulateConnectOptions = {},
  ): DevicesSimulateConnectRequest {
    return new SeamHttpRequest(this, {
      pathname: '/devices/simulate/connect',
      method: 'POST',
      body: parameters,
      responseKey: undefined,
      options,
    })
  }

  connectToHub(
    parameters?: DevicesSimulateConnectToHubParameters,
    options: DevicesSimulateConnectToHubOptions = {},
  ): DevicesSimulateConnectToHubRequest {
    return new SeamHttpRequest(this, {
      pathname: '/devices/simulate/connect_to_hub',
      method: 'POST',
      body: parameters,
      responseKey: undefined,
      options,
    })
  }

  disconnect(
    parameters?: DevicesSimulateDisconnectParameters,
    options: DevicesSimulateDisconnectOptions = {},
  ): DevicesSimulateDisconnectRequest {
    return new SeamHttpRequest(this, {
      pathname: '/devices/simulate/disconnect',
      method: 'POST',
      body: parameters,
      responseKey: undefined,
      options,
    })
  }

  disconnectFromHub(
    parameters?: DevicesSimulateDisconnectFromHubParameters,
    options: DevicesSimulateDisconnectFromHubOptions = {},
  ): DevicesSimulateDisconnectFromHubRequest {
    return new SeamHttpRequest(this, {
      pathname: '/devices/simulate/disconnect_from_hub',
      method: 'POST',
      body: parameters,
      responseKey: undefined,
      options,
    })
  }

  paidSubscription(
    parameters?: DevicesSimulatePaidSubscriptionParameters,
    options: DevicesSimulatePaidSubscriptionOptions = {},
  ): DevicesSimulatePaidSubscriptionRequest {
    return new SeamHttpRequest(this, {
      pathname: '/devices/simulate/paid_subscription',
      method: 'POST',
      body: parameters,
      responseKey: undefined,
      options,
    })
  }

  remove(
    parameters?: DevicesSimulateRemoveParameters,
    options: DevicesSimulateRemoveOptions = {},
  ): DevicesSimulateRemoveRequest {
    return new SeamHttpRequest(this, {
      pathname: '/devices/simulate/remove',
      method: 'POST',
      body: parameters,
      responseKey: undefined,
      options,
    })
  }
}

export type DevicesSimulateConnectParameters =
  RouteRequestBody<'/devices/simulate/connect'>

/**
 * @deprecated Use DevicesSimulateConnectParameters instead.
 */
export type DevicesSimulateConnectBody = DevicesSimulateConnectParameters

/**
 * @deprecated Use DevicesSimulateConnectRequest instead.
 */
export type DevicesSimulateConnectResponse = SetNonNullable<
  Required<RouteResponse<'/devices/simulate/connect'>>
>

export type DevicesSimulateConnectRequest = SeamHttpRequest<void, undefined>

// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface DevicesSimulateConnectOptions {}

export type DevicesSimulateConnectToHubParameters =
  RouteRequestBody<'/devices/simulate/connect_to_hub'>

/**
 * @deprecated Use DevicesSimulateConnectToHubParameters instead.
 */
export type DevicesSimulateConnectToHubBody =
  DevicesSimulateConnectToHubParameters

/**
 * @deprecated Use DevicesSimulateConnectToHubRequest instead.
 */
export type DevicesSimulateConnectToHubResponse = SetNonNullable<
  Required<RouteResponse<'/devices/simulate/connect_to_hub'>>
>

export type DevicesSimulateConnectToHubRequest = SeamHttpRequest<
  void,
  undefined
>

// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface DevicesSimulateConnectToHubOptions {}

export type DevicesSimulateDisconnectParameters =
  RouteRequestBody<'/devices/simulate/disconnect'>

/**
 * @deprecated Use DevicesSimulateDisconnectParameters instead.
 */
export type DevicesSimulateDisconnectBody = DevicesSimulateDisconnectParameters

/**
 * @deprecated Use DevicesSimulateDisconnectRequest instead.
 */
export type DevicesSimulateDisconnectResponse = SetNonNullable<
  Required<RouteResponse<'/devices/simulate/disconnect'>>
>

export type DevicesSimulateDisconnectRequest = SeamHttpRequest<void, undefined>

// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface DevicesSimulateDisconnectOptions {}

export type DevicesSimulateDisconnectFromHubParameters =
  RouteRequestBody<'/devices/simulate/disconnect_from_hub'>

/**
 * @deprecated Use DevicesSimulateDisconnectFromHubParameters instead.
 */
export type DevicesSimulateDisconnectFromHubBody =
  DevicesSimulateDisconnectFromHubParameters

/**
 * @deprecated Use DevicesSimulateDisconnectFromHubRequest instead.
 */
export type DevicesSimulateDisconnectFromHubResponse = SetNonNullable<
  Required<RouteResponse<'/devices/simulate/disconnect_from_hub'>>
>

export type DevicesSimulateDisconnectFromHubRequest = SeamHttpRequest<
  void,
  undefined
>

// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface DevicesSimulateDisconnectFromHubOptions {}

export type DevicesSimulatePaidSubscriptionParameters =
  RouteRequestBody<'/devices/simulate/paid_subscription'>

/**
 * @deprecated Use DevicesSimulatePaidSubscriptionParameters instead.
 */
export type DevicesSimulatePaidSubscriptionBody =
  DevicesSimulatePaidSubscriptionParameters

/**
 * @deprecated Use DevicesSimulatePaidSubscriptionRequest instead.
 */
export type DevicesSimulatePaidSubscriptionResponse = SetNonNullable<
  Required<RouteResponse<'/devices/simulate/paid_subscription'>>
>

export type DevicesSimulatePaidSubscriptionRequest = SeamHttpRequest<
  void,
  undefined
>

// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface DevicesSimulatePaidSubscriptionOptions {}

export type DevicesSimulateRemoveParameters =
  RouteRequestBody<'/devices/simulate/remove'>

/**
 * @deprecated Use DevicesSimulateRemoveParameters instead.
 */
export type DevicesSimulateRemoveBody = DevicesSimulateRemoveParameters

/**
 * @deprecated Use DevicesSimulateRemoveRequest instead.
 */
export type DevicesSimulateRemoveResponse = SetNonNullable<
  Required<RouteResponse<'/devices/simulate/remove'>>
>

export type DevicesSimulateRemoveRequest = SeamHttpRequest<void, undefined>

// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface DevicesSimulateRemoveOptions {}

/*
 * Automatically generated by codegen/smith.ts.
 * Do not edit this file or add other files to this directory.
 */

import type {
  RouteRequestBody,
  RouteRequestParams,
  RouteResponse,
} from '@seamapi/types/connect'

import { seamApiLtsVersion } from 'lib/lts-version.js'
import {
  getAuthHeadersForClientSessionToken,
  warnOnInsecureuserIdentifierKey,
} from 'lib/seam/connect/auth.js'
import { type Client, createClient } from 'lib/seam/connect/client.js'
import {
  isSeamHttpOptionsWithApiKey,
  isSeamHttpOptionsWithClient,
  isSeamHttpOptionsWithClientSessionToken,
  isSeamHttpOptionsWithConsoleSessionToken,
  isSeamHttpOptionsWithPersonalAccessToken,
  type SeamHttpFromPublishableKeyOptions,
  SeamHttpInvalidOptionsError,
  type SeamHttpOptions,
  type SeamHttpOptionsWithApiKey,
  type SeamHttpOptionsWithClient,
  type SeamHttpOptionsWithClientSessionToken,
  type SeamHttpOptionsWithConsoleSessionToken,
  type SeamHttpOptionsWithPersonalAccessToken,
  type SeamHttpRequestOptions,
} from 'lib/seam/connect/options.js'
import {
  limitToSeamHttpRequestOptions,
  parseOptions,
} from 'lib/seam/connect/parse-options.js'
import { SeamHttpClientSessions } from 'lib/seam/connect/routes/client-sessions/index.js'
import { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'
import { SeamPaginator } from 'lib/seam/connect/seam-paginator.js'
import type { SetNonNullable } from 'lib/types.js'

import { SeamHttpWorkspacesCustomizationProfiles } from './customization-profiles/index.js'

export class SeamHttpWorkspaces {
  client: Client
  readonly defaults: Required<SeamHttpRequestOptions>
  readonly ltsVersion = seamApiLtsVersion
  static ltsVersion = seamApiLtsVersion

  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {
    const options = parseOptions(apiKeyOrOptions)
    this.client = 'client' in options ? options.client : createClient(options)
    this.defaults = limitToSeamHttpRequestOptions(options)
  }

  static fromClient(
    client: SeamHttpOptionsWithClient['client'],
    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},
  ): SeamHttpWorkspaces {
    const constructorOptions = { ...options, client }
    if (!isSeamHttpOptionsWithClient(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError('Missing client')
    }
    return new SeamHttpWorkspaces(constructorOptions)
  }

  static fromApiKey(
    apiKey: SeamHttpOptionsWithApiKey['apiKey'],
    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},
  ): SeamHttpWorkspaces {
    const constructorOptions = { ...options, apiKey }
    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError('Missing apiKey')
    }
    return new SeamHttpWorkspaces(constructorOptions)
  }

  static fromClientSessionToken(
    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],
    options: Omit<
      SeamHttpOptionsWithClientSessionToken,
      'clientSessionToken'
    > = {},
  ): SeamHttpWorkspaces {
    const constructorOptions = { ...options, clientSessionToken }
    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')
    }
    return new SeamHttpWorkspaces(constructorOptions)
  }

  static async fromPublishableKey(
    publishableKey: string,
    userIdentifierKey: string,
    options: SeamHttpFromPublishableKeyOptions = {},
  ): Promise<SeamHttpWorkspaces> {
    warnOnInsecureuserIdentifierKey(userIdentifierKey)
    const clientOptions = parseOptions({ ...options, publishableKey })
    if (isSeamHttpOptionsWithClient(clientOptions)) {
      throw new SeamHttpInvalidOptionsError(
        'The client option cannot be used with SeamHttpWorkspaces.fromPublishableKey',
      )
    }
    const client = createClient(clientOptions)
    const clientSessions = SeamHttpClientSessions.fromClient(client)
    const { token } = await clientSessions.getOrCreate({
      user_identifier_key: userIdentifierKey,
    })
    return SeamHttpWorkspaces.fromClientSessionToken(token, options)
  }

  static fromConsoleSessionToken(
    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],
    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],
    options: Omit<
      SeamHttpOptionsWithConsoleSessionToken,
      'consoleSessionToken' | 'workspaceId'
    > = {},
  ): SeamHttpWorkspaces {
    const constructorOptions = { ...options, consoleSessionToken, workspaceId }
    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError(
        'Missing consoleSessionToken or workspaceId',
      )
    }
    return new SeamHttpWorkspaces(constructorOptions)
  }

  static fromPersonalAccessToken(
    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],
    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],
    options: Omit<
      SeamHttpOptionsWithPersonalAccessToken,
      'personalAccessToken' | 'workspaceId'
    > = {},
  ): SeamHttpWorkspaces {
    const constructorOptions = { ...options, personalAccessToken, workspaceId }
    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError(
        'Missing personalAccessToken or workspaceId',
      )
    }
    return new SeamHttpWorkspaces(constructorOptions)
  }

  createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(
    request: SeamHttpRequest<TResponse, TResponseKey>,
  ): SeamPaginator<TResponse, TResponseKey> {
    return new SeamPaginator<TResponse, TResponseKey>(this, request)
  }

  async updateClientSessionToken(
    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],
  ): Promise<void> {
    const { headers } = this.client.defaults
    const authHeaders = getAuthHeadersForClientSessionToken({
      clientSessionToken,
    })
    for (const key of Object.keys(authHeaders)) {
      if (headers[key] == null) {
        throw new Error(
          'Cannot update a clientSessionToken on a client created without a clientSessionToken',
        )
      }
    }
    this.client.defaults.headers = { ...headers, ...authHeaders }
    const clientSessions = SeamHttpClientSessions.fromClient(this.client)
    await clientSessions.get()
  }

  get customizationProfiles(): SeamHttpWorkspacesCustomizationProfiles {
    return SeamHttpWorkspacesCustomizationProfiles.fromClient(
      this.client,
      this.defaults,
    )
  }

  create(
    parameters?: WorkspacesCreateParameters,
    options: WorkspacesCreateOptions = {},
  ): WorkspacesCreateRequest {
    return new SeamHttpRequest(this, {
      pathname: '/workspaces/create',
      method: 'POST',
      body: parameters,
      responseKey: 'workspace',
      options,
    })
  }

  findAnything(
    parameters?: WorkspacesFindAnythingParameters,
    options: WorkspacesFindAnythingOptions = {},
  ): WorkspacesFindAnythingRequest {
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return new SeamHttpRequest(this, {
      pathname: '/workspaces/find_anything',
      method: 'POST',
      body: parameters,
      responseKey: 'batch',
      options,
    })
  }

  get(
    parameters?: WorkspacesGetParameters,
    options: WorkspacesGetOptions = {},
  ): WorkspacesGetRequest {
    return new SeamHttpRequest(this, {
      pathname: '/workspaces/get',
      method: 'GET',
      params: parameters,
      responseKey: 'workspace',
      options,
    })
  }

  list(
    parameters?: WorkspacesListParameters,
    options: WorkspacesListOptions = {},
  ): WorkspacesListRequest {
    return new SeamHttpRequest(this, {
      pathname: '/workspaces/list',
      method: 'GET',
      params: parameters,
      responseKey: 'workspaces',
      options,
    })
  }

  resetSandbox(
    parameters?: WorkspacesResetSandboxParameters,
    options: WorkspacesResetSandboxOptions = {},
  ): WorkspacesResetSandboxRequest {
    return new SeamHttpRequest(this, {
      pathname: '/workspaces/reset_sandbox',
      method: 'POST',
      body: parameters,
      responseKey: 'action_attempt',
      options,
    })
  }

  update(
    parameters?: WorkspacesUpdateParameters,
    options: WorkspacesUpdateOptions = {},
  ): WorkspacesUpdateRequest {
    return new SeamHttpRequest(this, {
      pathname: '/workspaces/update',
      method: 'PATCH',
      body: parameters,
      responseKey: undefined,
      options,
    })
  }
}

export type WorkspacesCreateParameters = RouteRequestBody<'/workspaces/create'>

/**
 * @deprecated Use WorkspacesCreateParameters instead.
 */
export type WorkspacesCreateBody = WorkspacesCreateParameters

/**
 * @deprecated Use WorkspacesCreateRequest instead.
 */
export type WorkspacesCreateResponse = SetNonNullable<
  Required<RouteResponse<'/workspaces/create'>>
>

export type WorkspacesCreateRequest = SeamHttpRequest<
  WorkspacesCreateResponse,
  'workspace'
>

export interface WorkspacesCreateOptions {}

export type WorkspacesFindAnythingParameters =
  RouteRequestBody<'/workspaces/find_anything'>

/**
 * @deprecated Use WorkspacesFindAnythingParameters instead.
 */
export type WorkspacesFindAnythingParams = WorkspacesFindAnythingParameters

/**
 * @deprecated Use WorkspacesFindAnythingRequest instead.
 */
export type WorkspacesFindAnythingResponse = SetNonNullable<
  Required<RouteResponse<'/workspaces/find_anything'>>
>

export type WorkspacesFindAnythingRequest = SeamHttpRequest<
  WorkspacesFindAnythingResponse,
  'batch'
>

export interface WorkspacesFindAnythingOptions {}

export type WorkspacesGetParameters = RouteRequestParams<'/workspaces/get'>

/**
 * @deprecated Use WorkspacesGetParameters instead.
 */
export type WorkspacesGetParams = WorkspacesGetParameters

/**
 * @deprecated Use WorkspacesGetRequest instead.
 */
export type WorkspacesGetResponse = SetNonNullable<
  Required<RouteResponse<'/workspaces/get'>>
>

export type WorkspacesGetRequest = SeamHttpRequest<
  WorkspacesGetResponse,
  'workspace'
>

export interface WorkspacesGetOptions {}

export type WorkspacesListParameters = RouteRequestParams<'/workspaces/list'>

/**
 * @deprecated Use WorkspacesListParameters instead.
 */
export type WorkspacesListParams = WorkspacesListParameters

/**
 * @deprecated Use WorkspacesListRequest instead.
 */
export type WorkspacesListResponse = SetNonNullable<
  Required<RouteResponse<'/workspaces/list'>>
>

export type WorkspacesListRequest = SeamHttpRequest<
  WorkspacesListResponse,
  'workspaces'
>

export interface WorkspacesListOptions {}

export type WorkspacesResetSandboxParameters =
  RouteRequestBody<'/workspaces/reset_sandbox'>

/**
 * @deprecated Use WorkspacesResetSandboxParameters instead.
 */
export type WorkspacesResetSandboxBody = WorkspacesResetSandboxParameters

/**
 * @deprecated Use WorkspacesResetSandboxRequest instead.
 */
export type WorkspacesResetSandboxResponse = SetNonNullable<
  Required<RouteResponse<'/workspaces/reset_sandbox'>>
>

export type WorkspacesResetSandboxRequest = SeamHttpRequest<
  WorkspacesResetSandboxResponse,
  'action_attempt'
>

export type WorkspacesResetSandboxOptions = Pick<
  SeamHttpRequestOptions,
  'waitForActionAttempt'
>

export type WorkspacesUpdateParameters = RouteRequestBody<'/workspaces/update'>

/**
 * @deprecated Use WorkspacesUpdateParameters instead.
 */
export type WorkspacesUpdateBody = WorkspacesUpdateParameters

/**
 * @deprecated Use WorkspacesUpdateRequest instead.
 */
export type WorkspacesUpdateResponse = SetNonNullable<
  Required<RouteResponse<'/workspaces/update'>>
>

export type WorkspacesUpdateRequest = SeamHttpRequest<void, undefined>

export interface WorkspacesUpdateOptions {}

/*
 * Automatically generated by codegen/smith.ts.
 * Do not edit this file or add other files to this directory.
 */

import type {
  RouteRequestBody,
  RouteRequestParams,
  RouteResponse,
} from '@seamapi/types/connect'

import { seamApiLtsVersion } from 'lib/lts-version.js'
import {
  getAuthHeadersForClientSessionToken,
  warnOnInsecureuserIdentifierKey,
} from 'lib/seam/connect/auth.js'
import { type Client, createClient } from 'lib/seam/connect/client.js'
import {
  isSeamHttpOptionsWithApiKey,
  isSeamHttpOptionsWithClient,
  isSeamHttpOptionsWithClientSessionToken,
  isSeamHttpOptionsWithConsoleSessionToken,
  isSeamHttpOptionsWithPersonalAccessToken,
  type SeamHttpFromPublishableKeyOptions,
  SeamHttpInvalidOptionsError,
  type SeamHttpOptions,
  type SeamHttpOptionsWithApiKey,
  type SeamHttpOptionsWithClient,
  type SeamHttpOptionsWithClientSessionToken,
  type SeamHttpOptionsWithConsoleSessionToken,
  type SeamHttpOptionsWithPersonalAccessToken,
  type SeamHttpRequestOptions,
} from 'lib/seam/connect/options.js'
import {
  limitToSeamHttpRequestOptions,
  parseOptions,
} from 'lib/seam/connect/parse-options.js'
import { SeamHttpClientSessions } from 'lib/seam/connect/routes/client-sessions/index.js'
import { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'
import { SeamPaginator } from 'lib/seam/connect/seam-paginator.js'
import type { SetNonNullable } from 'lib/types.js'

export class SeamHttpWebhooks {
  client: Client
  readonly defaults: Required<SeamHttpRequestOptions>
  readonly ltsVersion = seamApiLtsVersion
  static ltsVersion = seamApiLtsVersion

  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {
    const options = parseOptions(apiKeyOrOptions)
    this.client = 'client' in options ? options.client : createClient(options)
    this.defaults = limitToSeamHttpRequestOptions(options)
  }

  static fromClient(
    client: SeamHttpOptionsWithClient['client'],
    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},
  ): SeamHttpWebhooks {
    const constructorOptions = { ...options, client }
    if (!isSeamHttpOptionsWithClient(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError('Missing client')
    }
    return new SeamHttpWebhooks(constructorOptions)
  }

  static fromApiKey(
    apiKey: SeamHttpOptionsWithApiKey['apiKey'],
    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},
  ): SeamHttpWebhooks {
    const constructorOptions = { ...options, apiKey }
    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError('Missing apiKey')
    }
    return new SeamHttpWebhooks(constructorOptions)
  }

  static fromClientSessionToken(
    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],
    options: Omit<
      SeamHttpOptionsWithClientSessionToken,
      'clientSessionToken'
    > = {},
  ): SeamHttpWebhooks {
    const constructorOptions = { ...options, clientSessionToken }
    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')
    }
    return new SeamHttpWebhooks(constructorOptions)
  }

  static async fromPublishableKey(
    publishableKey: string,
    userIdentifierKey: string,
    options: SeamHttpFromPublishableKeyOptions = {},
  ): Promise<SeamHttpWebhooks> {
    warnOnInsecureuserIdentifierKey(userIdentifierKey)
    const clientOptions = parseOptions({ ...options, publishableKey })
    if (isSeamHttpOptionsWithClient(clientOptions)) {
      throw new SeamHttpInvalidOptionsError(
        'The client option cannot be used with SeamHttpWebhooks.fromPublishableKey',
      )
    }
    const client = createClient(clientOptions)
    const clientSessions = SeamHttpClientSessions.fromClient(client)
    const { token } = await clientSessions.getOrCreate({
      user_identifier_key: userIdentifierKey,
    })
    return SeamHttpWebhooks.fromClientSessionToken(token, options)
  }

  static fromConsoleSessionToken(
    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],
    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],
    options: Omit<
      SeamHttpOptionsWithConsoleSessionToken,
      'consoleSessionToken' | 'workspaceId'
    > = {},
  ): SeamHttpWebhooks {
    const constructorOptions = { ...options, consoleSessionToken, workspaceId }
    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError(
        'Missing consoleSessionToken or workspaceId',
      )
    }
    return new SeamHttpWebhooks(constructorOptions)
  }

  static fromPersonalAccessToken(
    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],
    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],
    options: Omit<
      SeamHttpOptionsWithPersonalAccessToken,
      'personalAccessToken' | 'workspaceId'
    > = {},
  ): SeamHttpWebhooks {
    const constructorOptions = { ...options, personalAccessToken, workspaceId }
    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError(
        'Missing personalAccessToken or workspaceId',
      )
    }
    return new SeamHttpWebhooks(constructorOptions)
  }

  createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(
    request: SeamHttpRequest<TResponse, TResponseKey>,
  ): SeamPaginator<TResponse, TResponseKey> {
    return new SeamPaginator<TResponse, TResponseKey>(this, request)
  }

  async updateClientSessionToken(
    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],
  ): Promise<void> {
    const { headers } = this.client.defaults
    const authHeaders = getAuthHeadersForClientSessionToken({
      clientSessionToken,
    })
    for (const key of Object.keys(authHeaders)) {
      if (headers[key] == null) {
        throw new Error(
          'Cannot update a clientSessionToken on a client created without a clientSessionToken',
        )
      }
    }
    this.client.defaults.headers = { ...headers, ...authHeaders }
    const clientSessions = SeamHttpClientSessions.fromClient(this.client)
    await clientSessions.get()
  }

  create(
    parameters?: WebhooksCreateParameters,
    options: WebhooksCreateOptions = {},
  ): WebhooksCreateRequest {
    return new SeamHttpRequest(this, {
      pathname: '/webhooks/create',
      method: 'POST',
      body: parameters,
      responseKey: 'webhook',
      options,
    })
  }

  delete(
    parameters?: WebhooksDeleteParameters,
    options: WebhooksDeleteOptions = {},
  ): WebhooksDeleteRequest {
    return new SeamHttpRequest(this, {
      pathname: '/webhooks/delete',
      method: 'POST',
      body: parameters,
      responseKey: undefined,
      options,
    })
  }

  get(
    parameters?: WebhooksGetParameters,
    options: WebhooksGetOptions = {},
  ): WebhooksGetRequest {
    return new SeamHttpRequest(this, {
      pathname: '/webhooks/get',
      method: 'POST',
      body: parameters,
      responseKey: 'webhook',
      options,
    })
  }

  list(
    parameters?: WebhooksListParameters,
    options: WebhooksListOptions = {},
  ): WebhooksListRequest {
    return new SeamHttpRequest(this, {
      pathname: '/webhooks/list',
      method: 'GET',
      params: parameters,
      responseKey: 'webhooks',
      options,
    })
  }

  update(
    parameters?: WebhooksUpdateParameters,
    options: WebhooksUpdateOptions = {},
  ): WebhooksUpdateRequest {
    return new SeamHttpRequest(this, {
      pathname: '/webhooks/update',
      method: 'PUT',
      body: parameters,
      responseKey: undefined,
      options,
    })
  }
}

export type WebhooksCreateParameters = RouteRequestBody<'/webhooks/create'>

/**
 * @deprecated Use WebhooksCreateParameters instead.
 */
export type WebhooksCreateBody = WebhooksCreateParameters

/**
 * @deprecated Use WebhooksCreateRequest instead.
 */
export type WebhooksCreateResponse = SetNonNullable<
  Required<RouteResponse<'/webhooks/create'>>
>

export type WebhooksCreateRequest = SeamHttpRequest<
  WebhooksCreateResponse,
  'webhook'
>

export interface WebhooksCreateOptions {}

export type WebhooksDeleteParameters = RouteRequestBody<'/webhooks/delete'>

/**
 * @deprecated Use WebhooksDeleteParameters instead.
 */
export type WebhooksDeleteParams = WebhooksDeleteParameters

/**
 * @deprecated Use WebhooksDeleteRequest instead.
 */
export type WebhooksDeleteResponse = SetNonNullable<
  Required<RouteResponse<'/webhooks/delete'>>
>

export type WebhooksDeleteRequest = SeamHttpRequest<void, undefined>

export interface WebhooksDeleteOptions {}

export type WebhooksGetParameters = RouteRequestBody<'/webhooks/get'>

/**
 * @deprecated Use WebhooksGetParameters instead.
 */
export type WebhooksGetParams = WebhooksGetParameters

/**
 * @deprecated Use WebhooksGetRequest instead.
 */
export type WebhooksGetResponse = SetNonNullable<
  Required<RouteResponse<'/webhooks/get'>>
>

export type WebhooksGetRequest = SeamHttpRequest<WebhooksGetResponse, 'webhook'>

export interface WebhooksGetOptions {}

export type WebhooksListParameters = RouteRequestParams<'/webhooks/list'>

/**
 * @deprecated Use WebhooksListParameters instead.
 */
export type WebhooksListParams = WebhooksListParameters

/**
 * @deprecated Use WebhooksListRequest instead.
 */
export type WebhooksListResponse = SetNonNullable<
  Required<RouteResponse<'/webhooks/list'>>
>

export type WebhooksListRequest = SeamHttpRequest<
  WebhooksListResponse,
  'webhooks'
>

export interface WebhooksListOptions {}

export type WebhooksUpdateParameters = RouteRequestBody<'/webhooks/update'>

/**
 * @deprecated Use WebhooksUpdateParameters instead.
 */
export type WebhooksUpdateBody = WebhooksUpdateParameters

/**
 * @deprecated Use WebhooksUpdateRequest instead.
 */
export type WebhooksUpdateResponse = SetNonNullable<
  Required<RouteResponse<'/webhooks/update'>>
>

export type WebhooksUpdateRequest = SeamHttpRequest<void, undefined>

export interface WebhooksUpdateOptions {}

/*
 * Automatically generated by codegen/smith.ts.
 * Do not edit this file or add other files to this directory.
 */

import type {
  RouteRequestBody,
  RouteRequestParams,
  RouteResponse,
} from '@seamapi/types/connect'

import { seamApiLtsVersion } from 'lib/lts-version.js'
import {
  getAuthHeadersForClientSessionToken,
  warnOnInsecureuserIdentifierKey,
} from 'lib/seam/connect/auth.js'
import { type Client, createClient } from 'lib/seam/connect/client.js'
import {
  isSeamHttpOptionsWithApiKey,
  isSeamHttpOptionsWithClient,
  isSeamHttpOptionsWithClientSessionToken,
  isSeamHttpOptionsWithConsoleSessionToken,
  isSeamHttpOptionsWithPersonalAccessToken,
  type SeamHttpFromPublishableKeyOptions,
  SeamHttpInvalidOptionsError,
  type SeamHttpOptions,
  type SeamHttpOptionsWithApiKey,
  type SeamHttpOptionsWithClient,
  type SeamHttpOptionsWithClientSessionToken,
  type SeamHttpOptionsWithConsoleSessionToken,
  type SeamHttpOptionsWithPersonalAccessToken,
  type SeamHttpRequestOptions,
} from 'lib/seam/connect/options.js'
import {
  limitToSeamHttpRequestOptions,
  parseOptions,
} from 'lib/seam/connect/parse-options.js'
import { SeamHttpClientSessions } from 'lib/seam/connect/routes/client-sessions/index.js'
import { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'
import { SeamPaginator } from 'lib/seam/connect/seam-paginator.js'
import type { SetNonNullable } from 'lib/types.js'

export class SeamHttpSpaces {
  client: Client
  readonly defaults: Required<SeamHttpRequestOptions>
  readonly ltsVersion = seamApiLtsVersion
  static ltsVersion = seamApiLtsVersion

  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {
    const options = parseOptions(apiKeyOrOptions)
    this.client = 'client' in options ? options.client : createClient(options)
    this.defaults = limitToSeamHttpRequestOptions(options)
  }

  static fromClient(
    client: SeamHttpOptionsWithClient['client'],
    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},
  ): SeamHttpSpaces {
    const constructorOptions = { ...options, client }
    if (!isSeamHttpOptionsWithClient(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError('Missing client')
    }
    return new SeamHttpSpaces(constructorOptions)
  }

  static fromApiKey(
    apiKey: SeamHttpOptionsWithApiKey['apiKey'],
    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},
  ): SeamHttpSpaces {
    const constructorOptions = { ...options, apiKey }
    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError('Missing apiKey')
    }
    return new SeamHttpSpaces(constructorOptions)
  }

  static fromClientSessionToken(
    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],
    options: Omit<
      SeamHttpOptionsWithClientSessionToken,
      'clientSessionToken'
    > = {},
  ): SeamHttpSpaces {
    const constructorOptions = { ...options, clientSessionToken }
    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')
    }
    return new SeamHttpSpaces(constructorOptions)
  }

  static async fromPublishableKey(
    publishableKey: string,
    userIdentifierKey: string,
    options: SeamHttpFromPublishableKeyOptions = {},
  ): Promise<SeamHttpSpaces> {
    warnOnInsecureuserIdentifierKey(userIdentifierKey)
    const clientOptions = parseOptions({ ...options, publishableKey })
    if (isSeamHttpOptionsWithClient(clientOptions)) {
      throw new SeamHttpInvalidOptionsError(
        'The client option cannot be used with SeamHttpSpaces.fromPublishableKey',
      )
    }
    const client = createClient(clientOptions)
    const clientSessions = SeamHttpClientSessions.fromClient(client)
    const { token } = await clientSessions.getOrCreate({
      user_identifier_key: userIdentifierKey,
    })
    return SeamHttpSpaces.fromClientSessionToken(token, options)
  }

  static fromConsoleSessionToken(
    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],
    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],
    options: Omit<
      SeamHttpOptionsWithConsoleSessionToken,
      'consoleSessionToken' | 'workspaceId'
    > = {},
  ): SeamHttpSpaces {
    const constructorOptions = { ...options, consoleSessionToken, workspaceId }
    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError(
        'Missing consoleSessionToken or workspaceId',
      )
    }
    return new SeamHttpSpaces(constructorOptions)
  }

  static fromPersonalAccessToken(
    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],
    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],
    options: Omit<
      SeamHttpOptionsWithPersonalAccessToken,
      'personalAccessToken' | 'workspaceId'
    > = {},
  ): SeamHttpSpaces {
    const constructorOptions = { ...options, personalAccessToken, workspaceId }
    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError(
        'Missing personalAccessToken or workspaceId',
      )
    }
    return new SeamHttpSpaces(constructorOptions)
  }

  createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(
    request: SeamHttpRequest<TResponse, TResponseKey>,
  ): SeamPaginator<TResponse, TResponseKey> {
    return new SeamPaginator<TResponse, TResponseKey>(this, request)
  }

  async updateClientSessionToken(
    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],
  ): Promise<void> {
    const { headers } = this.client.defaults
    const authHeaders = getAuthHeadersForClientSessionToken({
      clientSessionToken,
    })
    for (const key of Object.keys(authHeaders)) {
      if (headers[key] == null) {
        throw new Error(
          'Cannot update a clientSessionToken on a client created without a clientSessionToken',
        )
      }
    }
    this.client.defaults.headers = { ...headers, ...authHeaders }
    const clientSessions = SeamHttpClientSessions.fromClient(this.client)
    await clientSessions.get()
  }

  addAcsEntrances(
    parameters?: SpacesAddAcsEntrancesParameters,
    options: SpacesAddAcsEntrancesOptions = {},
  ): SpacesAddAcsEntrancesRequest {
    return new SeamHttpRequest(this, {
      pathname: '/spaces/add_acs_entrances',
      method: 'PUT',
      body: parameters,
      responseKey: undefined,
      options,
    })
  }

  addDevices(
    parameters?: SpacesAddDevicesParameters,
    options: SpacesAddDevicesOptions = {},
  ): SpacesAddDevicesRequest {
    return new SeamHttpRequest(this, {
      pathname: '/spaces/add_devices',
      method: 'PUT',
      body: parameters,
      responseKey: undefined,
      options,
    })
  }

  create(
    parameters?: SpacesCreateParameters,
    options: SpacesCreateOptions = {},
  ): SpacesCreateRequest {
    return new SeamHttpRequest(this, {
      pathname: '/spaces/create',
      method: 'POST',
      body: parameters,
      responseKey: 'space',
      options,
    })
  }

  delete(
    parameters?: SpacesDeleteParameters,
    options: SpacesDeleteOptions = {},
  ): SpacesDeleteRequest {
    return new SeamHttpRequest(this, {
      pathname: '/spaces/delete',
      method: 'POST',
      body: parameters,
      responseKey: undefined,
      options,
    })
  }

  get(
    parameters?: SpacesGetParameters,
    options: SpacesGetOptions = {},
  ): SpacesGetRequest {
    return new SeamHttpRequest(this, {
      pathname: '/spaces/get',
      method: 'POST',
      body: parameters,
      responseKey: 'space',
      options,
    })
  }

  list(
    parameters?: SpacesListParameters,
    options: SpacesListOptions = {},
  ): SpacesListRequest {
    return new SeamHttpRequest(this, {
      pathname: '/spaces/list',
      method: 'GET',
      params: parameters,
      responseKey: 'spaces',
      options,
    })
  }

  removeAcsEntrances(
    parameters?: SpacesRemoveAcsEntrancesParameters,
    options: SpacesRemoveAcsEntrancesOptions = {},
  ): SpacesRemoveAcsEntrancesRequest {
    return new SeamHttpRequest(this, {
      pathname: '/spaces/remove_acs_entrances',
      method: 'POST',
      body: parameters,
      responseKey: undefined,
      options,
    })
  }

  removeDevices(
    parameters?: SpacesRemoveDevicesParameters,
    options: SpacesRemoveDevicesOptions = {},
  ): SpacesRemoveDevicesRequest {
    return new SeamHttpRequest(this, {
      pathname: '/spaces/remove_devices',
      method: 'POST',
      body: parameters,
      responseKey: undefined,
      options,
    })
  }

  update(
    parameters?: SpacesUpdateParameters,
    options: SpacesUpdateOptions = {},
  ): SpacesUpdateRequest {
    return new SeamHttpRequest(this, {
      pathname: '/spaces/update',
      method: 'PATCH',
      body: parameters,
      responseKey: 'space',
      options,
    })
  }
}

export type SpacesAddAcsEntrancesParameters =
  RouteRequestBody<'/spaces/add_acs_entrances'>

/**
 * @deprecated Use SpacesAddAcsEntrancesParameters instead.
 */
export type SpacesAddAcsEntrancesBody = SpacesAddAcsEntrancesParameters

/**
 * @deprecated Use SpacesAddAcsEntrancesRequest instead.
 */
export type SpacesAddAcsEntrancesResponse = SetNonNullable<
  Required<RouteResponse<'/spaces/add_acs_entrances'>>
>

export type SpacesAddAcsEntrancesRequest = SeamHttpRequest<void, undefined>

// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface SpacesAddAcsEntrancesOptions {}

export type SpacesAddDevicesParameters = RouteRequestBody<'/spaces/add_devices'>

/**
 * @deprecated Use SpacesAddDevicesParameters instead.
 */
export type SpacesAddDevicesBody = SpacesAddDevicesParameters

/**
 * @deprecated Use SpacesAddDevicesRequest instead.
 */
export type SpacesAddDevicesResponse = SetNonNullable<
  Required<RouteResponse<'/spaces/add_devices'>>
>

export type SpacesAddDevicesRequest = SeamHttpRequest<void, undefined>

// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface SpacesAddDevicesOptions {}

export type SpacesCreateParameters = RouteRequestBody<'/spaces/create'>

/**
 * @deprecated Use SpacesCreateParameters instead.
 */
export type SpacesCreateBody = SpacesCreateParameters

/**
 * @deprecated Use SpacesCreateRequest instead.
 */
export type SpacesCreateResponse = SetNonNullable<
  Required<RouteResponse<'/spaces/create'>>
>

export type SpacesCreateRequest = SeamHttpRequest<SpacesCreateResponse, 'space'>

// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface SpacesCreateOptions {}

export type SpacesDeleteParameters = RouteRequestBody<'/spaces/delete'>

/**
 * @deprecated Use SpacesDeleteParameters instead.
 */
export type SpacesDeleteParams = SpacesDeleteParameters

/**
 * @deprecated Use SpacesDeleteRequest instead.
 */
export type SpacesDeleteResponse = SetNonNullable<
  Required<RouteResponse<'/spaces/delete'>>
>

export type SpacesDeleteRequest = SeamHttpRequest<void, undefined>

// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface SpacesDeleteOptions {}

export type SpacesGetParameters = RouteRequestBody<'/spaces/get'>

/**
 * @deprecated Use SpacesGetParameters instead.
 */
export type SpacesGetParams = SpacesGetParameters

/**
 * @deprecated Use SpacesGetRequest instead.
 */
export type SpacesGetResponse = SetNonNullable<
  Required<RouteResponse<'/spaces/get'>>
>

export type SpacesGetRequest = SeamHttpRequest<SpacesGetResponse, 'space'>

// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface SpacesGetOptions {}

export type SpacesListParameters = RouteRequestParams<'/spaces/list'>

/**
 * @deprecated Use SpacesListParameters instead.
 */
export type SpacesListParams = SpacesListParameters

/**
 * @deprecated Use SpacesListRequest instead.
 */
export type SpacesListResponse = SetNonNullable<
  Required<RouteResponse<'/spaces/list'>>
>

export type SpacesListRequest = SeamHttpRequest<SpacesListResponse, 'spaces'>

// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface SpacesListOptions {}

export type SpacesRemoveAcsEntrancesParameters =
  RouteRequestBody<'/spaces/remove_acs_entrances'>

/**
 * @deprecated Use SpacesRemoveAcsEntrancesParameters instead.
 */
export type SpacesRemoveAcsEntrancesParams = SpacesRemoveAcsEntrancesParameters

/**
 * @deprecated Use SpacesRemoveAcsEntrancesRequest instead.
 */
export type SpacesRemoveAcsEntrancesResponse = SetNonNullable<
  Required<RouteResponse<'/spaces/remove_acs_entrances'>>
>

export type SpacesRemoveAcsEntrancesRequest = SeamHttpRequest<void, undefined>

// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface SpacesRemoveAcsEntrancesOptions {}

export type SpacesRemoveDevicesParameters =
  RouteRequestBody<'/spaces/remove_devices'>

/**
 * @deprecated Use SpacesRemoveDevicesParameters instead.
 */
export type SpacesRemoveDevicesParams = SpacesRemoveDevicesParameters

/**
 * @deprecated Use SpacesRemoveDevicesRequest instead.
 */
export type SpacesRemoveDevicesResponse = SetNonNullable<
  Required<RouteResponse<'/spaces/remove_devices'>>
>

export type SpacesRemoveDevicesRequest = SeamHttpRequest<void, undefined>

// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface SpacesRemoveDevicesOptions {}

export type SpacesUpdateParameters = RouteRequestBody<'/spaces/update'>

/**
 * @deprecated Use SpacesUpdateParameters instead.
 */
export type SpacesUpdateBody = SpacesUpdateParameters

/**
 * @deprecated Use SpacesUpdateRequest instead.
 */
export type SpacesUpdateResponse = SetNonNullable<
  Required<RouteResponse<'/spaces/update'>>
>

export type SpacesUpdateRequest = SeamHttpRequest<SpacesUpdateResponse, 'space'>

// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface SpacesUpdateOptions {}

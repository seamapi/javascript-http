/*
 * Automatically generated by codegen/smith.ts.
 * Do not edit this file or add other files to this directory.
 */

import { seamApiLtsVersion } from 'lib/lts-version.js'
import { type Client, createClient } from 'lib/seam/connect/client.js'
import {
  isSeamHttpWithoutWorkspaceOptionsWithClient,
  isSeamHttpWithoutWorkspaceOptionsWithConsoleSessionToken,
  isSeamHttpWithoutWorkspaceOptionsWithPersonalAccessToken,
  type SeamHttpRequestOptions,
  SeamHttpWithoutWorkspaceInvalidOptionsError,
  type SeamHttpWithoutWorkspaceOptions,
  type SeamHttpWithoutWorkspaceOptionsWithClient,
  type SeamHttpWithoutWorkspaceOptionsWithConsoleSessionToken,
  type SeamHttpWithoutWorkspaceOptionsWithPersonalAccessToken,
} from 'lib/seam/connect/options.js'
import {
  limitToSeamHttpRequestOptions,
  parseOptions,
} from 'lib/seam/connect/parse-options.js'

import {
  SeamHttpWorkspaces,
  type WorkspacesCreateOptions,
  type WorkspacesCreateParameters,
  type WorkspacesCreateRequest,
  type WorkspacesListOptions,
  type WorkspacesListParameters,
  type WorkspacesListRequest,
} from './workspaces/index.js'

export class SeamHttpEndpointsWithoutWorkspace {
  client: Client
  readonly defaults: Required<SeamHttpRequestOptions>
  readonly ltsVersion = seamApiLtsVersion
  static ltsVersion = seamApiLtsVersion

  constructor(options: SeamHttpWithoutWorkspaceOptions = {}) {
    const opts = parseOptions(options)
    this.client = 'client' in opts ? opts.client : createClient(opts)
    this.defaults = limitToSeamHttpRequestOptions(opts)
  }

  static fromClient(
    client: SeamHttpWithoutWorkspaceOptionsWithClient['client'],
    options: Omit<SeamHttpWithoutWorkspaceOptionsWithClient, 'client'> = {},
  ): SeamHttpEndpointsWithoutWorkspace {
    const constructorOptions = { ...options, client }
    if (!isSeamHttpWithoutWorkspaceOptionsWithClient(constructorOptions)) {
      throw new SeamHttpWithoutWorkspaceInvalidOptionsError('Missing client')
    }
    return new SeamHttpEndpointsWithoutWorkspace(constructorOptions)
  }

  static fromConsoleSessionToken(
    consoleSessionToken: SeamHttpWithoutWorkspaceOptionsWithConsoleSessionToken['consoleSessionToken'],
    options: Omit<
      SeamHttpWithoutWorkspaceOptionsWithConsoleSessionToken,
      'consoleSessionToken'
    > = {},
  ): SeamHttpEndpointsWithoutWorkspace {
    const constructorOptions = { ...options, consoleSessionToken }
    if (
      !isSeamHttpWithoutWorkspaceOptionsWithConsoleSessionToken(
        constructorOptions,
      )
    ) {
      throw new SeamHttpWithoutWorkspaceInvalidOptionsError(
        'Missing consoleSessionToken',
      )
    }
    return new SeamHttpEndpointsWithoutWorkspace(constructorOptions)
  }

  static fromPersonalAccessToken(
    personalAccessToken: SeamHttpWithoutWorkspaceOptionsWithPersonalAccessToken['personalAccessToken'],
    options: Omit<
      SeamHttpWithoutWorkspaceOptionsWithPersonalAccessToken,
      'personalAccessToken'
    > = {},
  ): SeamHttpEndpointsWithoutWorkspace {
    const constructorOptions = { ...options, personalAccessToken }
    if (
      !isSeamHttpWithoutWorkspaceOptionsWithPersonalAccessToken(
        constructorOptions,
      )
    ) {
      throw new SeamHttpWithoutWorkspaceInvalidOptionsError(
        'Missing personalAccessToken',
      )
    }
    return new SeamHttpEndpointsWithoutWorkspace(constructorOptions)
  }

  get '/workspaces/create'(): (
    parameters?: WorkspacesCreateParameters,
    options?: WorkspacesCreateOptions,
  ) => WorkspacesCreateRequest {
    const { client, defaults } = this
    return function workspacesCreate(
      ...args: Parameters<SeamHttpWorkspaces['create']>
    ): ReturnType<SeamHttpWorkspaces['create']> {
      const seam = SeamHttpWorkspaces.fromClient(client, defaults)
      return seam.create(...args)
    }
  }

  get '/workspaces/list'(): (
    parameters?: WorkspacesListParameters,
    options?: WorkspacesListOptions,
  ) => WorkspacesListRequest {
    const { client, defaults } = this
    return function workspacesList(
      ...args: Parameters<SeamHttpWorkspaces['list']>
    ): ReturnType<SeamHttpWorkspaces['list']> {
      const seam = SeamHttpWorkspaces.fromClient(client, defaults)
      return seam.list(...args)
    }
  }
}

export type SeamHttpEndpointWithoutWorkspaceQueryPaths = '/workspaces/list'

export type SeamHttpEndpointWithoutWorkspaceMutationPaths = '/workspaces/create'

/*
 * Automatically generated by codegen/smith.ts.
 * Do not edit this file or add other files to this directory.
 */

import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'

import { seamApiLtsVersion } from 'lib/lts-version.js'
import {
  getAuthHeadersForClientSessionToken,
  warnOnInsecureuserIdentifierKey,
} from 'lib/seam/connect/auth.js'
import { type Client, createClient } from 'lib/seam/connect/client.js'
import {
  isSeamHttpOptionsWithApiKey,
  isSeamHttpOptionsWithClient,
  isSeamHttpOptionsWithClientSessionToken,
  isSeamHttpOptionsWithConsoleSessionToken,
  isSeamHttpOptionsWithPersonalAccessToken,
  type SeamHttpFromPublishableKeyOptions,
  SeamHttpInvalidOptionsError,
  type SeamHttpOptions,
  type SeamHttpOptionsWithApiKey,
  type SeamHttpOptionsWithClient,
  type SeamHttpOptionsWithClientSessionToken,
  type SeamHttpOptionsWithConsoleSessionToken,
  type SeamHttpOptionsWithPersonalAccessToken,
  type SeamHttpRequestOptions,
} from 'lib/seam/connect/options.js'
import {
  limitToSeamHttpRequestOptions,
  parseOptions,
} from 'lib/seam/connect/parse-options.js'
import { SeamHttpClientSessions } from 'lib/seam/connect/routes/client-sessions/index.js'
import { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'
import { SeamPaginator } from 'lib/seam/connect/seam-paginator.js'
import type { SetNonNullable } from 'lib/types.js'

import { SeamHttpAcsAccessGroupsUnmanaged } from './unmanaged/index.js'

export class SeamHttpAcsAccessGroups {
  client: Client
  readonly defaults: Required<SeamHttpRequestOptions>
  readonly ltsVersion = seamApiLtsVersion
  static ltsVersion = seamApiLtsVersion

  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {
    const options = parseOptions(apiKeyOrOptions)
    this.client = 'client' in options ? options.client : createClient(options)
    this.defaults = limitToSeamHttpRequestOptions(options)
  }

  static fromClient(
    client: SeamHttpOptionsWithClient['client'],
    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},
  ): SeamHttpAcsAccessGroups {
    const constructorOptions = { ...options, client }
    if (!isSeamHttpOptionsWithClient(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError('Missing client')
    }
    return new SeamHttpAcsAccessGroups(constructorOptions)
  }

  static fromApiKey(
    apiKey: SeamHttpOptionsWithApiKey['apiKey'],
    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},
  ): SeamHttpAcsAccessGroups {
    const constructorOptions = { ...options, apiKey }
    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError('Missing apiKey')
    }
    return new SeamHttpAcsAccessGroups(constructorOptions)
  }

  static fromClientSessionToken(
    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],
    options: Omit<
      SeamHttpOptionsWithClientSessionToken,
      'clientSessionToken'
    > = {},
  ): SeamHttpAcsAccessGroups {
    const constructorOptions = { ...options, clientSessionToken }
    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')
    }
    return new SeamHttpAcsAccessGroups(constructorOptions)
  }

  static async fromPublishableKey(
    publishableKey: string,
    userIdentifierKey: string,
    options: SeamHttpFromPublishableKeyOptions = {},
  ): Promise<SeamHttpAcsAccessGroups> {
    warnOnInsecureuserIdentifierKey(userIdentifierKey)
    const clientOptions = parseOptions({ ...options, publishableKey })
    if (isSeamHttpOptionsWithClient(clientOptions)) {
      throw new SeamHttpInvalidOptionsError(
        'The client option cannot be used with SeamHttpAcsAccessGroups.fromPublishableKey',
      )
    }
    const client = createClient(clientOptions)
    const clientSessions = SeamHttpClientSessions.fromClient(client)
    const { token } = await clientSessions.getOrCreate({
      user_identifier_key: userIdentifierKey,
    })
    return SeamHttpAcsAccessGroups.fromClientSessionToken(token, options)
  }

  static fromConsoleSessionToken(
    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],
    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],
    options: Omit<
      SeamHttpOptionsWithConsoleSessionToken,
      'consoleSessionToken' | 'workspaceId'
    > = {},
  ): SeamHttpAcsAccessGroups {
    const constructorOptions = { ...options, consoleSessionToken, workspaceId }
    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError(
        'Missing consoleSessionToken or workspaceId',
      )
    }
    return new SeamHttpAcsAccessGroups(constructorOptions)
  }

  static fromPersonalAccessToken(
    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],
    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],
    options: Omit<
      SeamHttpOptionsWithPersonalAccessToken,
      'personalAccessToken' | 'workspaceId'
    > = {},
  ): SeamHttpAcsAccessGroups {
    const constructorOptions = { ...options, personalAccessToken, workspaceId }
    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError(
        'Missing personalAccessToken or workspaceId',
      )
    }
    return new SeamHttpAcsAccessGroups(constructorOptions)
  }

  createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(
    request: SeamHttpRequest<TResponse, TResponseKey>,
  ): SeamPaginator<TResponse, TResponseKey> {
    return new SeamPaginator<TResponse, TResponseKey>(this, request)
  }

  async updateClientSessionToken(
    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],
  ): Promise<void> {
    const { headers } = this.client.defaults
    const authHeaders = getAuthHeadersForClientSessionToken({
      clientSessionToken,
    })
    for (const key of Object.keys(authHeaders)) {
      if (headers[key] == null) {
        throw new Error(
          'Cannot update a clientSessionToken on a client created without a clientSessionToken',
        )
      }
    }
    this.client.defaults.headers = { ...headers, ...authHeaders }
    const clientSessions = SeamHttpClientSessions.fromClient(this.client)
    await clientSessions.get()
  }

  get unmanaged(): SeamHttpAcsAccessGroupsUnmanaged {
    return SeamHttpAcsAccessGroupsUnmanaged.fromClient(
      this.client,
      this.defaults,
    )
  }

  addUser(
    parameters?: AcsAccessGroupsAddUserParameters,
    options: AcsAccessGroupsAddUserOptions = {},
  ): AcsAccessGroupsAddUserRequest {
    return new SeamHttpRequest(this, {
      pathname: '/acs/access_groups/add_user',
      method: 'PUT',
      body: parameters,
      responseKey: undefined,
      options,
    })
  }

  get(
    parameters?: AcsAccessGroupsGetParameters,
    options: AcsAccessGroupsGetOptions = {},
  ): AcsAccessGroupsGetRequest {
    return new SeamHttpRequest(this, {
      pathname: '/acs/access_groups/get',
      method: 'POST',
      body: parameters,
      responseKey: 'acs_access_group',
      options,
    })
  }

  list(
    parameters?: AcsAccessGroupsListParameters,
    options: AcsAccessGroupsListOptions = {},
  ): AcsAccessGroupsListRequest {
    return new SeamHttpRequest(this, {
      pathname: '/acs/access_groups/list',
      method: 'POST',
      body: parameters,
      responseKey: 'acs_access_groups',
      options,
    })
  }

  listAccessibleEntrances(
    parameters?: AcsAccessGroupsListAccessibleEntrancesParameters,
    options: AcsAccessGroupsListAccessibleEntrancesOptions = {},
  ): AcsAccessGroupsListAccessibleEntrancesRequest {
    return new SeamHttpRequest(this, {
      pathname: '/acs/access_groups/list_accessible_entrances',
      method: 'POST',
      body: parameters,
      responseKey: 'acs_entrances',
      options,
    })
  }

  listUsers(
    parameters?: AcsAccessGroupsListUsersParameters,
    options: AcsAccessGroupsListUsersOptions = {},
  ): AcsAccessGroupsListUsersRequest {
    return new SeamHttpRequest(this, {
      pathname: '/acs/access_groups/list_users',
      method: 'POST',
      body: parameters,
      responseKey: 'acs_users',
      options,
    })
  }

  removeUser(
    parameters?: AcsAccessGroupsRemoveUserParameters,
    options: AcsAccessGroupsRemoveUserOptions = {},
  ): AcsAccessGroupsRemoveUserRequest {
    return new SeamHttpRequest(this, {
      pathname: '/acs/access_groups/remove_user',
      method: 'POST',
      body: parameters,
      responseKey: undefined,
      options,
    })
  }
}

export type AcsAccessGroupsAddUserParameters =
  RouteRequestBody<'/acs/access_groups/add_user'>

/**
 * @deprecated Use AcsAccessGroupsAddUserParameters instead.
 */
export type AcsAccessGroupsAddUserBody = AcsAccessGroupsAddUserParameters

/**
 * @deprecated Use AcsAccessGroupsAddUserRequest instead.
 */
export type AcsAccessGroupsAddUserResponse = SetNonNullable<
  Required<RouteResponse<'/acs/access_groups/add_user'>>
>

export type AcsAccessGroupsAddUserRequest = SeamHttpRequest<void, undefined>

export type AcsAccessGroupsAddUserOptions = Record<string, never>

export type AcsAccessGroupsGetParameters =
  RouteRequestBody<'/acs/access_groups/get'>

/**
 * @deprecated Use AcsAccessGroupsGetParameters instead.
 */
export type AcsAccessGroupsGetParams = AcsAccessGroupsGetParameters

/**
 * @deprecated Use AcsAccessGroupsGetRequest instead.
 */
export type AcsAccessGroupsGetResponse = SetNonNullable<
  Required<RouteResponse<'/acs/access_groups/get'>>
>

export type AcsAccessGroupsGetRequest = SeamHttpRequest<
  AcsAccessGroupsGetResponse,
  'acs_access_group'
>

export type AcsAccessGroupsGetOptions = Record<string, never>

export type AcsAccessGroupsListParameters =
  RouteRequestBody<'/acs/access_groups/list'>

/**
 * @deprecated Use AcsAccessGroupsListParameters instead.
 */
export type AcsAccessGroupsListParams = AcsAccessGroupsListParameters

/**
 * @deprecated Use AcsAccessGroupsListRequest instead.
 */
export type AcsAccessGroupsListResponse = SetNonNullable<
  Required<RouteResponse<'/acs/access_groups/list'>>
>

export type AcsAccessGroupsListRequest = SeamHttpRequest<
  AcsAccessGroupsListResponse,
  'acs_access_groups'
>

export type AcsAccessGroupsListOptions = Record<string, never>

export type AcsAccessGroupsListAccessibleEntrancesParameters =
  RouteRequestBody<'/acs/access_groups/list_accessible_entrances'>

/**
 * @deprecated Use AcsAccessGroupsListAccessibleEntrancesParameters instead.
 */
export type AcsAccessGroupsListAccessibleEntrancesParams =
  AcsAccessGroupsListAccessibleEntrancesParameters

/**
 * @deprecated Use AcsAccessGroupsListAccessibleEntrancesRequest instead.
 */
export type AcsAccessGroupsListAccessibleEntrancesResponse = SetNonNullable<
  Required<RouteResponse<'/acs/access_groups/list_accessible_entrances'>>
>

export type AcsAccessGroupsListAccessibleEntrancesRequest = SeamHttpRequest<
  AcsAccessGroupsListAccessibleEntrancesResponse,
  'acs_entrances'
>

export type AcsAccessGroupsListAccessibleEntrancesOptions = Record<
  string,
  never
>

export type AcsAccessGroupsListUsersParameters =
  RouteRequestBody<'/acs/access_groups/list_users'>

/**
 * @deprecated Use AcsAccessGroupsListUsersParameters instead.
 */
export type AcsAccessGroupsListUsersParams = AcsAccessGroupsListUsersParameters

/**
 * @deprecated Use AcsAccessGroupsListUsersRequest instead.
 */
export type AcsAccessGroupsListUsersResponse = SetNonNullable<
  Required<RouteResponse<'/acs/access_groups/list_users'>>
>

export type AcsAccessGroupsListUsersRequest = SeamHttpRequest<
  AcsAccessGroupsListUsersResponse,
  'acs_users'
>

export type AcsAccessGroupsListUsersOptions = Record<string, never>

export type AcsAccessGroupsRemoveUserParameters =
  RouteRequestBody<'/acs/access_groups/remove_user'>

/**
 * @deprecated Use AcsAccessGroupsRemoveUserParameters instead.
 */
export type AcsAccessGroupsRemoveUserParams =
  AcsAccessGroupsRemoveUserParameters

/**
 * @deprecated Use AcsAccessGroupsRemoveUserRequest instead.
 */
export type AcsAccessGroupsRemoveUserResponse = SetNonNullable<
  Required<RouteResponse<'/acs/access_groups/remove_user'>>
>

export type AcsAccessGroupsRemoveUserRequest = SeamHttpRequest<void, undefined>

export type AcsAccessGroupsRemoveUserOptions = Record<string, never>

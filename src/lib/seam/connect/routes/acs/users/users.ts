/*
 * Automatically generated by codegen/smith.ts.
 * Do not edit this file or add other files to this directory.
 */

import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'

import { seamApiLtsVersion } from 'lib/lts-version.js'
import {
  getAuthHeadersForClientSessionToken,
  warnOnInsecureuserIdentifierKey,
} from 'lib/seam/connect/auth.js'
import { type Client, createClient } from 'lib/seam/connect/client.js'
import {
  isSeamHttpOptionsWithApiKey,
  isSeamHttpOptionsWithClient,
  isSeamHttpOptionsWithClientSessionToken,
  isSeamHttpOptionsWithConsoleSessionToken,
  isSeamHttpOptionsWithPersonalAccessToken,
  type SeamHttpFromPublishableKeyOptions,
  SeamHttpInvalidOptionsError,
  type SeamHttpOptions,
  type SeamHttpOptionsWithApiKey,
  type SeamHttpOptionsWithClient,
  type SeamHttpOptionsWithClientSessionToken,
  type SeamHttpOptionsWithConsoleSessionToken,
  type SeamHttpOptionsWithPersonalAccessToken,
  type SeamHttpRequestOptions,
} from 'lib/seam/connect/options.js'
import {
  limitToSeamHttpRequestOptions,
  parseOptions,
} from 'lib/seam/connect/parse-options.js'
import { SeamHttpClientSessions } from 'lib/seam/connect/routes/client-sessions/index.js'
import { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'
import { SeamPaginator } from 'lib/seam/connect/seam-paginator.js'
import type { SetNonNullable } from 'lib/types.js'

import { SeamHttpAcsUsersUnmanaged } from './unmanaged/index.js'

export class SeamHttpAcsUsers {
  client: Client
  readonly defaults: Required<SeamHttpRequestOptions>
  readonly ltsVersion = seamApiLtsVersion
  static ltsVersion = seamApiLtsVersion

  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {
    const options = parseOptions(apiKeyOrOptions)
    this.client = 'client' in options ? options.client : createClient(options)
    this.defaults = limitToSeamHttpRequestOptions(options)
  }

  static fromClient(
    client: SeamHttpOptionsWithClient['client'],
    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},
  ): SeamHttpAcsUsers {
    const constructorOptions = { ...options, client }
    if (!isSeamHttpOptionsWithClient(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError('Missing client')
    }
    return new SeamHttpAcsUsers(constructorOptions)
  }

  static fromApiKey(
    apiKey: SeamHttpOptionsWithApiKey['apiKey'],
    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},
  ): SeamHttpAcsUsers {
    const constructorOptions = { ...options, apiKey }
    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError('Missing apiKey')
    }
    return new SeamHttpAcsUsers(constructorOptions)
  }

  static fromClientSessionToken(
    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],
    options: Omit<
      SeamHttpOptionsWithClientSessionToken,
      'clientSessionToken'
    > = {},
  ): SeamHttpAcsUsers {
    const constructorOptions = { ...options, clientSessionToken }
    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')
    }
    return new SeamHttpAcsUsers(constructorOptions)
  }

  static async fromPublishableKey(
    publishableKey: string,
    userIdentifierKey: string,
    options: SeamHttpFromPublishableKeyOptions = {},
  ): Promise<SeamHttpAcsUsers> {
    warnOnInsecureuserIdentifierKey(userIdentifierKey)
    const clientOptions = parseOptions({ ...options, publishableKey })
    if (isSeamHttpOptionsWithClient(clientOptions)) {
      throw new SeamHttpInvalidOptionsError(
        'The client option cannot be used with SeamHttpAcsUsers.fromPublishableKey',
      )
    }
    const client = createClient(clientOptions)
    const clientSessions = SeamHttpClientSessions.fromClient(client)
    const { token } = await clientSessions.getOrCreate({
      user_identifier_key: userIdentifierKey,
    })
    return SeamHttpAcsUsers.fromClientSessionToken(token, options)
  }

  static fromConsoleSessionToken(
    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],
    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],
    options: Omit<
      SeamHttpOptionsWithConsoleSessionToken,
      'consoleSessionToken' | 'workspaceId'
    > = {},
  ): SeamHttpAcsUsers {
    const constructorOptions = { ...options, consoleSessionToken, workspaceId }
    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError(
        'Missing consoleSessionToken or workspaceId',
      )
    }
    return new SeamHttpAcsUsers(constructorOptions)
  }

  static fromPersonalAccessToken(
    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],
    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],
    options: Omit<
      SeamHttpOptionsWithPersonalAccessToken,
      'personalAccessToken' | 'workspaceId'
    > = {},
  ): SeamHttpAcsUsers {
    const constructorOptions = { ...options, personalAccessToken, workspaceId }
    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError(
        'Missing personalAccessToken or workspaceId',
      )
    }
    return new SeamHttpAcsUsers(constructorOptions)
  }

  createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(
    request: SeamHttpRequest<TResponse, TResponseKey>,
  ): SeamPaginator<TResponse, TResponseKey> {
    return new SeamPaginator<TResponse, TResponseKey>(this, request)
  }

  async updateClientSessionToken(
    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],
  ): Promise<void> {
    const { headers } = this.client.defaults
    const authHeaders = getAuthHeadersForClientSessionToken({
      clientSessionToken,
    })
    for (const key of Object.keys(authHeaders)) {
      if (headers[key] == null) {
        throw new Error(
          'Cannot update a clientSessionToken on a client created without a clientSessionToken',
        )
      }
    }
    this.client.defaults.headers = { ...headers, ...authHeaders }
    const clientSessions = SeamHttpClientSessions.fromClient(this.client)
    await clientSessions.get()
  }

  get unmanaged(): SeamHttpAcsUsersUnmanaged {
    return SeamHttpAcsUsersUnmanaged.fromClient(this.client, this.defaults)
  }

  addToAccessGroup(
    parameters?: AcsUsersAddToAccessGroupParameters,
    options: AcsUsersAddToAccessGroupOptions = {},
  ): AcsUsersAddToAccessGroupRequest {
    return new SeamHttpRequest(this, {
      pathname: '/acs/users/add_to_access_group',
      method: 'PUT',
      body: parameters,
      responseKey: undefined,
      options,
    })
  }

  create(
    parameters?: AcsUsersCreateParameters,
    options: AcsUsersCreateOptions = {},
  ): AcsUsersCreateRequest {
    return new SeamHttpRequest(this, {
      pathname: '/acs/users/create',
      method: 'POST',
      body: parameters,
      responseKey: 'acs_user',
      options,
    })
  }

  delete(
    parameters?: AcsUsersDeleteParameters,
    options: AcsUsersDeleteOptions = {},
  ): AcsUsersDeleteRequest {
    return new SeamHttpRequest(this, {
      pathname: '/acs/users/delete',
      method: 'POST',
      body: parameters,
      responseKey: undefined,
      options,
    })
  }

  get(
    parameters?: AcsUsersGetParameters,
    options: AcsUsersGetOptions = {},
  ): AcsUsersGetRequest {
    return new SeamHttpRequest(this, {
      pathname: '/acs/users/get',
      method: 'POST',
      body: parameters,
      responseKey: 'acs_user',
      options,
    })
  }

  list(
    parameters?: AcsUsersListParameters,
    options: AcsUsersListOptions = {},
  ): AcsUsersListRequest {
    return new SeamHttpRequest(this, {
      pathname: '/acs/users/list',
      method: 'POST',
      body: parameters,
      responseKey: 'acs_users',
      options,
    })
  }

  listAccessibleEntrances(
    parameters?: AcsUsersListAccessibleEntrancesParameters,
    options: AcsUsersListAccessibleEntrancesOptions = {},
  ): AcsUsersListAccessibleEntrancesRequest {
    return new SeamHttpRequest(this, {
      pathname: '/acs/users/list_accessible_entrances',
      method: 'POST',
      body: parameters,
      responseKey: 'acs_entrances',
      options,
    })
  }

  removeFromAccessGroup(
    parameters?: AcsUsersRemoveFromAccessGroupParameters,
    options: AcsUsersRemoveFromAccessGroupOptions = {},
  ): AcsUsersRemoveFromAccessGroupRequest {
    return new SeamHttpRequest(this, {
      pathname: '/acs/users/remove_from_access_group',
      method: 'POST',
      body: parameters,
      responseKey: undefined,
      options,
    })
  }

  revokeAccessToAllEntrances(
    parameters?: AcsUsersRevokeAccessToAllEntrancesParameters,
    options: AcsUsersRevokeAccessToAllEntrancesOptions = {},
  ): AcsUsersRevokeAccessToAllEntrancesRequest {
    return new SeamHttpRequest(this, {
      pathname: '/acs/users/revoke_access_to_all_entrances',
      method: 'POST',
      body: parameters,
      responseKey: undefined,
      options,
    })
  }

  suspend(
    parameters?: AcsUsersSuspendParameters,
    options: AcsUsersSuspendOptions = {},
  ): AcsUsersSuspendRequest {
    return new SeamHttpRequest(this, {
      pathname: '/acs/users/suspend',
      method: 'POST',
      body: parameters,
      responseKey: undefined,
      options,
    })
  }

  unsuspend(
    parameters?: AcsUsersUnsuspendParameters,
    options: AcsUsersUnsuspendOptions = {},
  ): AcsUsersUnsuspendRequest {
    return new SeamHttpRequest(this, {
      pathname: '/acs/users/unsuspend',
      method: 'POST',
      body: parameters,
      responseKey: undefined,
      options,
    })
  }

  update(
    parameters?: AcsUsersUpdateParameters,
    options: AcsUsersUpdateOptions = {},
  ): AcsUsersUpdateRequest {
    return new SeamHttpRequest(this, {
      pathname: '/acs/users/update',
      method: 'PATCH',
      body: parameters,
      responseKey: undefined,
      options,
    })
  }
}

export type AcsUsersAddToAccessGroupParameters =
  RouteRequestBody<'/acs/users/add_to_access_group'>

/**
 * @deprecated Use AcsUsersAddToAccessGroupParameters instead.
 */
export type AcsUsersAddToAccessGroupBody = AcsUsersAddToAccessGroupParameters

/**
 * @deprecated Use AcsUsersAddToAccessGroupRequest instead.
 */
export type AcsUsersAddToAccessGroupResponse = SetNonNullable<
  Required<RouteResponse<'/acs/users/add_to_access_group'>>
>

export type AcsUsersAddToAccessGroupRequest = SeamHttpRequest<void, undefined>

export type AcsUsersAddToAccessGroupOptions = Record<string, never>

export type AcsUsersCreateParameters = RouteRequestBody<'/acs/users/create'>

/**
 * @deprecated Use AcsUsersCreateParameters instead.
 */
export type AcsUsersCreateBody = AcsUsersCreateParameters

/**
 * @deprecated Use AcsUsersCreateRequest instead.
 */
export type AcsUsersCreateResponse = SetNonNullable<
  Required<RouteResponse<'/acs/users/create'>>
>

export type AcsUsersCreateRequest = SeamHttpRequest<
  AcsUsersCreateResponse,
  'acs_user'
>

export type AcsUsersCreateOptions = Record<string, never>

export type AcsUsersDeleteParameters = RouteRequestBody<'/acs/users/delete'>

/**
 * @deprecated Use AcsUsersDeleteParameters instead.
 */
export type AcsUsersDeleteParams = AcsUsersDeleteParameters

/**
 * @deprecated Use AcsUsersDeleteRequest instead.
 */
export type AcsUsersDeleteResponse = SetNonNullable<
  Required<RouteResponse<'/acs/users/delete'>>
>

export type AcsUsersDeleteRequest = SeamHttpRequest<void, undefined>

export type AcsUsersDeleteOptions = Record<string, never>

export type AcsUsersGetParameters = RouteRequestBody<'/acs/users/get'>

/**
 * @deprecated Use AcsUsersGetParameters instead.
 */
export type AcsUsersGetParams = AcsUsersGetParameters

/**
 * @deprecated Use AcsUsersGetRequest instead.
 */
export type AcsUsersGetResponse = SetNonNullable<
  Required<RouteResponse<'/acs/users/get'>>
>

export type AcsUsersGetRequest = SeamHttpRequest<
  AcsUsersGetResponse,
  'acs_user'
>

export type AcsUsersGetOptions = Record<string, never>

export type AcsUsersListParameters = RouteRequestBody<'/acs/users/list'>

/**
 * @deprecated Use AcsUsersListParameters instead.
 */
export type AcsUsersListParams = AcsUsersListParameters

/**
 * @deprecated Use AcsUsersListRequest instead.
 */
export type AcsUsersListResponse = SetNonNullable<
  Required<RouteResponse<'/acs/users/list'>>
>

export type AcsUsersListRequest = SeamHttpRequest<
  AcsUsersListResponse,
  'acs_users'
>

export type AcsUsersListOptions = Record<string, never>

export type AcsUsersListAccessibleEntrancesParameters =
  RouteRequestBody<'/acs/users/list_accessible_entrances'>

/**
 * @deprecated Use AcsUsersListAccessibleEntrancesParameters instead.
 */
export type AcsUsersListAccessibleEntrancesParams =
  AcsUsersListAccessibleEntrancesParameters

/**
 * @deprecated Use AcsUsersListAccessibleEntrancesRequest instead.
 */
export type AcsUsersListAccessibleEntrancesResponse = SetNonNullable<
  Required<RouteResponse<'/acs/users/list_accessible_entrances'>>
>

export type AcsUsersListAccessibleEntrancesRequest = SeamHttpRequest<
  AcsUsersListAccessibleEntrancesResponse,
  'acs_entrances'
>

export type AcsUsersListAccessibleEntrancesOptions = Record<string, never>

export type AcsUsersRemoveFromAccessGroupParameters =
  RouteRequestBody<'/acs/users/remove_from_access_group'>

/**
 * @deprecated Use AcsUsersRemoveFromAccessGroupParameters instead.
 */
export type AcsUsersRemoveFromAccessGroupParams =
  AcsUsersRemoveFromAccessGroupParameters

/**
 * @deprecated Use AcsUsersRemoveFromAccessGroupRequest instead.
 */
export type AcsUsersRemoveFromAccessGroupResponse = SetNonNullable<
  Required<RouteResponse<'/acs/users/remove_from_access_group'>>
>

export type AcsUsersRemoveFromAccessGroupRequest = SeamHttpRequest<
  void,
  undefined
>

export type AcsUsersRemoveFromAccessGroupOptions = Record<string, never>

export type AcsUsersRevokeAccessToAllEntrancesParameters =
  RouteRequestBody<'/acs/users/revoke_access_to_all_entrances'>

/**
 * @deprecated Use AcsUsersRevokeAccessToAllEntrancesParameters instead.
 */
export type AcsUsersRevokeAccessToAllEntrancesBody =
  AcsUsersRevokeAccessToAllEntrancesParameters

/**
 * @deprecated Use AcsUsersRevokeAccessToAllEntrancesRequest instead.
 */
export type AcsUsersRevokeAccessToAllEntrancesResponse = SetNonNullable<
  Required<RouteResponse<'/acs/users/revoke_access_to_all_entrances'>>
>

export type AcsUsersRevokeAccessToAllEntrancesRequest = SeamHttpRequest<
  void,
  undefined
>

export type AcsUsersRevokeAccessToAllEntrancesOptions = Record<string, never>

export type AcsUsersSuspendParameters = RouteRequestBody<'/acs/users/suspend'>

/**
 * @deprecated Use AcsUsersSuspendParameters instead.
 */
export type AcsUsersSuspendBody = AcsUsersSuspendParameters

/**
 * @deprecated Use AcsUsersSuspendRequest instead.
 */
export type AcsUsersSuspendResponse = SetNonNullable<
  Required<RouteResponse<'/acs/users/suspend'>>
>

export type AcsUsersSuspendRequest = SeamHttpRequest<void, undefined>

export type AcsUsersSuspendOptions = Record<string, never>

export type AcsUsersUnsuspendParameters =
  RouteRequestBody<'/acs/users/unsuspend'>

/**
 * @deprecated Use AcsUsersUnsuspendParameters instead.
 */
export type AcsUsersUnsuspendBody = AcsUsersUnsuspendParameters

/**
 * @deprecated Use AcsUsersUnsuspendRequest instead.
 */
export type AcsUsersUnsuspendResponse = SetNonNullable<
  Required<RouteResponse<'/acs/users/unsuspend'>>
>

export type AcsUsersUnsuspendRequest = SeamHttpRequest<void, undefined>

export type AcsUsersUnsuspendOptions = Record<string, never>

export type AcsUsersUpdateParameters = RouteRequestBody<'/acs/users/update'>

/**
 * @deprecated Use AcsUsersUpdateParameters instead.
 */
export type AcsUsersUpdateBody = AcsUsersUpdateParameters

/**
 * @deprecated Use AcsUsersUpdateRequest instead.
 */
export type AcsUsersUpdateResponse = SetNonNullable<
  Required<RouteResponse<'/acs/users/update'>>
>

export type AcsUsersUpdateRequest = SeamHttpRequest<void, undefined>

export type AcsUsersUpdateOptions = Record<string, never>

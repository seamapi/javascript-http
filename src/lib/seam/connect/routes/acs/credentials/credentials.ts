/*
 * Automatically generated by codegen/smith.ts.
 * Do not edit this file or add other files to this directory.
 */

import type {
  RouteRequestBody,
  RouteRequestParams,
  RouteResponse,
} from '@seamapi/types/connect'

import { seamApiLtsVersion } from 'lib/lts-version.js'
import {
  getAuthHeadersForClientSessionToken,
  warnOnInsecureuserIdentifierKey,
} from 'lib/seam/connect/auth.js'
import { type Client, createClient } from 'lib/seam/connect/client.js'
import {
  isSeamHttpOptionsWithApiKey,
  isSeamHttpOptionsWithClient,
  isSeamHttpOptionsWithClientSessionToken,
  isSeamHttpOptionsWithConsoleSessionToken,
  isSeamHttpOptionsWithPersonalAccessToken,
  type SeamHttpFromPublishableKeyOptions,
  SeamHttpInvalidOptionsError,
  type SeamHttpOptions,
  type SeamHttpOptionsWithApiKey,
  type SeamHttpOptionsWithClient,
  type SeamHttpOptionsWithClientSessionToken,
  type SeamHttpOptionsWithConsoleSessionToken,
  type SeamHttpOptionsWithPersonalAccessToken,
  type SeamHttpRequestOptions,
} from 'lib/seam/connect/options.js'
import {
  limitToSeamHttpRequestOptions,
  parseOptions,
} from 'lib/seam/connect/parse-options.js'
import { SeamHttpClientSessions } from 'lib/seam/connect/routes/client-sessions/index.js'
import { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'
import { SeamPaginator } from 'lib/seam/connect/seam-paginator.js'
import type { SetNonNullable } from 'lib/types.js'

import { SeamHttpAcsCredentialsUnmanaged } from './unmanaged/index.js'

export class SeamHttpAcsCredentials {
  client: Client
  readonly defaults: Required<SeamHttpRequestOptions>
  readonly ltsVersion = seamApiLtsVersion
  static ltsVersion = seamApiLtsVersion

  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {
    const options = parseOptions(apiKeyOrOptions)
    this.client = 'client' in options ? options.client : createClient(options)
    this.defaults = limitToSeamHttpRequestOptions(options)
  }

  static fromClient(
    client: SeamHttpOptionsWithClient['client'],
    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},
  ): SeamHttpAcsCredentials {
    const constructorOptions = { ...options, client }
    if (!isSeamHttpOptionsWithClient(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError('Missing client')
    }
    return new SeamHttpAcsCredentials(constructorOptions)
  }

  static fromApiKey(
    apiKey: SeamHttpOptionsWithApiKey['apiKey'],
    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},
  ): SeamHttpAcsCredentials {
    const constructorOptions = { ...options, apiKey }
    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError('Missing apiKey')
    }
    return new SeamHttpAcsCredentials(constructorOptions)
  }

  static fromClientSessionToken(
    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],
    options: Omit<
      SeamHttpOptionsWithClientSessionToken,
      'clientSessionToken'
    > = {},
  ): SeamHttpAcsCredentials {
    const constructorOptions = { ...options, clientSessionToken }
    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')
    }
    return new SeamHttpAcsCredentials(constructorOptions)
  }

  static async fromPublishableKey(
    publishableKey: string,
    userIdentifierKey: string,
    options: SeamHttpFromPublishableKeyOptions = {},
  ): Promise<SeamHttpAcsCredentials> {
    warnOnInsecureuserIdentifierKey(userIdentifierKey)
    const clientOptions = parseOptions({ ...options, publishableKey })
    if (isSeamHttpOptionsWithClient(clientOptions)) {
      throw new SeamHttpInvalidOptionsError(
        'The client option cannot be used with SeamHttpAcsCredentials.fromPublishableKey',
      )
    }
    const client = createClient(clientOptions)
    const clientSessions = SeamHttpClientSessions.fromClient(client)
    const { token } = await clientSessions.getOrCreate({
      user_identifier_key: userIdentifierKey,
    })
    return SeamHttpAcsCredentials.fromClientSessionToken(token, options)
  }

  static fromConsoleSessionToken(
    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],
    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],
    options: Omit<
      SeamHttpOptionsWithConsoleSessionToken,
      'consoleSessionToken' | 'workspaceId'
    > = {},
  ): SeamHttpAcsCredentials {
    const constructorOptions = { ...options, consoleSessionToken, workspaceId }
    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError(
        'Missing consoleSessionToken or workspaceId',
      )
    }
    return new SeamHttpAcsCredentials(constructorOptions)
  }

  static fromPersonalAccessToken(
    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],
    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],
    options: Omit<
      SeamHttpOptionsWithPersonalAccessToken,
      'personalAccessToken' | 'workspaceId'
    > = {},
  ): SeamHttpAcsCredentials {
    const constructorOptions = { ...options, personalAccessToken, workspaceId }
    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError(
        'Missing personalAccessToken or workspaceId',
      )
    }
    return new SeamHttpAcsCredentials(constructorOptions)
  }

  createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(
    request: SeamHttpRequest<TResponse, TResponseKey>,
  ): SeamPaginator<TResponse, TResponseKey> {
    return new SeamPaginator<TResponse, TResponseKey>(this, request)
  }

  async updateClientSessionToken(
    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],
  ): Promise<void> {
    const { headers } = this.client.defaults
    const authHeaders = getAuthHeadersForClientSessionToken({
      clientSessionToken,
    })
    for (const key of Object.keys(authHeaders)) {
      if (headers[key] == null) {
        throw new Error(
          'Cannot update a clientSessionToken on a client created without a clientSessionToken',
        )
      }
    }
    this.client.defaults.headers = { ...headers, ...authHeaders }
    const clientSessions = SeamHttpClientSessions.fromClient(this.client)
    await clientSessions.get()
  }

  get unmanaged(): SeamHttpAcsCredentialsUnmanaged {
    return SeamHttpAcsCredentialsUnmanaged.fromClient(
      this.client,
      this.defaults,
    )
  }

  assign(
    parameters?: AcsCredentialsAssignParameters,
    options: AcsCredentialsAssignOptions = {},
  ): AcsCredentialsAssignRequest {
    return new SeamHttpRequest(this, {
      pathname: '/acs/credentials/assign',
      method: 'PATCH',
      body: parameters,
      responseKey: undefined,
      options,
    })
  }

  create(
    parameters?: AcsCredentialsCreateParameters,
    options: AcsCredentialsCreateOptions = {},
  ): AcsCredentialsCreateRequest {
    return new SeamHttpRequest(this, {
      pathname: '/acs/credentials/create',
      method: 'POST',
      body: parameters,
      responseKey: 'acs_credential',
      options,
    })
  }

  createOfflineCode(
    parameters?: AcsCredentialsCreateOfflineCodeParameters,
    options: AcsCredentialsCreateOfflineCodeOptions = {},
  ): AcsCredentialsCreateOfflineCodeRequest {
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return new SeamHttpRequest(this, {
      pathname: '/acs/credentials/create_offline_code',
      method: 'POST',
      body: parameters,
      responseKey: 'acs_credential',
      options,
    })
  }

  delete(
    parameters?: AcsCredentialsDeleteParameters,
    options: AcsCredentialsDeleteOptions = {},
  ): AcsCredentialsDeleteRequest {
    return new SeamHttpRequest(this, {
      pathname: '/acs/credentials/delete',
      method: 'POST',
      body: parameters,
      responseKey: undefined,
      options,
    })
  }

  get(
    parameters?: AcsCredentialsGetParameters,
    options: AcsCredentialsGetOptions = {},
  ): AcsCredentialsGetRequest {
    return new SeamHttpRequest(this, {
      pathname: '/acs/credentials/get',
      method: 'POST',
      body: parameters,
      responseKey: 'acs_credential',
      options,
    })
  }

  list(
    parameters?: AcsCredentialsListParameters,
    options: AcsCredentialsListOptions = {},
  ): AcsCredentialsListRequest {
    return new SeamHttpRequest(this, {
      pathname: '/acs/credentials/list',
      method: 'GET',
      params: parameters,
      responseKey: 'acs_credentials',
      options,
    })
  }

  listAccessibleEntrances(
    parameters?: AcsCredentialsListAccessibleEntrancesParameters,
    options: AcsCredentialsListAccessibleEntrancesOptions = {},
  ): AcsCredentialsListAccessibleEntrancesRequest {
    return new SeamHttpRequest(this, {
      pathname: '/acs/credentials/list_accessible_entrances',
      method: 'POST',
      body: parameters,
      responseKey: 'acs_entrances',
      options,
    })
  }

  unassign(
    parameters?: AcsCredentialsUnassignParameters,
    options: AcsCredentialsUnassignOptions = {},
  ): AcsCredentialsUnassignRequest {
    return new SeamHttpRequest(this, {
      pathname: '/acs/credentials/unassign',
      method: 'PATCH',
      body: parameters,
      responseKey: undefined,
      options,
    })
  }

  update(
    parameters?: AcsCredentialsUpdateParameters,
    options: AcsCredentialsUpdateOptions = {},
  ): AcsCredentialsUpdateRequest {
    return new SeamHttpRequest(this, {
      pathname: '/acs/credentials/update',
      method: 'PATCH',
      body: parameters,
      responseKey: undefined,
      options,
    })
  }
}

export type AcsCredentialsAssignParameters =
  RouteRequestBody<'/acs/credentials/assign'>

/**
 * @deprecated Use AcsCredentialsAssignParameters instead.
 */
export type AcsCredentialsAssignBody = AcsCredentialsAssignParameters

/**
 * @deprecated Use AcsCredentialsAssignRequest instead.
 */
export type AcsCredentialsAssignResponse = SetNonNullable<
  Required<RouteResponse<'/acs/credentials/assign'>>
>

export type AcsCredentialsAssignRequest = SeamHttpRequest<void, undefined>

export type AcsCredentialsAssignOptions = Record<string, never>

export type AcsCredentialsCreateParameters =
  RouteRequestBody<'/acs/credentials/create'>

/**
 * @deprecated Use AcsCredentialsCreateParameters instead.
 */
export type AcsCredentialsCreateBody = AcsCredentialsCreateParameters

/**
 * @deprecated Use AcsCredentialsCreateRequest instead.
 */
export type AcsCredentialsCreateResponse = SetNonNullable<
  Required<RouteResponse<'/acs/credentials/create'>>
>

export type AcsCredentialsCreateRequest = SeamHttpRequest<
  AcsCredentialsCreateResponse,
  'acs_credential'
>

export type AcsCredentialsCreateOptions = Record<string, never>

export type AcsCredentialsCreateOfflineCodeParameters =
  RouteRequestBody<'/acs/credentials/create_offline_code'>

/**
 * @deprecated Use AcsCredentialsCreateOfflineCodeParameters instead.
 */
export type AcsCredentialsCreateOfflineCodeBody =
  AcsCredentialsCreateOfflineCodeParameters

/**
 * @deprecated Use AcsCredentialsCreateOfflineCodeRequest instead.
 */
export type AcsCredentialsCreateOfflineCodeResponse = SetNonNullable<
  Required<RouteResponse<'/acs/credentials/create_offline_code'>>
>

export type AcsCredentialsCreateOfflineCodeRequest = SeamHttpRequest<
  AcsCredentialsCreateOfflineCodeResponse,
  'acs_credential'
>

export type AcsCredentialsCreateOfflineCodeOptions = Record<string, never>

export type AcsCredentialsDeleteParameters =
  RouteRequestBody<'/acs/credentials/delete'>

/**
 * @deprecated Use AcsCredentialsDeleteParameters instead.
 */
export type AcsCredentialsDeleteParams = AcsCredentialsDeleteParameters

/**
 * @deprecated Use AcsCredentialsDeleteRequest instead.
 */
export type AcsCredentialsDeleteResponse = SetNonNullable<
  Required<RouteResponse<'/acs/credentials/delete'>>
>

export type AcsCredentialsDeleteRequest = SeamHttpRequest<void, undefined>

export type AcsCredentialsDeleteOptions = Record<string, never>

export type AcsCredentialsGetParameters =
  RouteRequestBody<'/acs/credentials/get'>

/**
 * @deprecated Use AcsCredentialsGetParameters instead.
 */
export type AcsCredentialsGetParams = AcsCredentialsGetParameters

/**
 * @deprecated Use AcsCredentialsGetRequest instead.
 */
export type AcsCredentialsGetResponse = SetNonNullable<
  Required<RouteResponse<'/acs/credentials/get'>>
>

export type AcsCredentialsGetRequest = SeamHttpRequest<
  AcsCredentialsGetResponse,
  'acs_credential'
>

export type AcsCredentialsGetOptions = Record<string, never>

export type AcsCredentialsListParameters =
  RouteRequestParams<'/acs/credentials/list'>

/**
 * @deprecated Use AcsCredentialsListParameters instead.
 */
export type AcsCredentialsListParams = AcsCredentialsListParameters

/**
 * @deprecated Use AcsCredentialsListRequest instead.
 */
export type AcsCredentialsListResponse = SetNonNullable<
  Required<RouteResponse<'/acs/credentials/list'>>
>

export type AcsCredentialsListRequest = SeamHttpRequest<
  AcsCredentialsListResponse,
  'acs_credentials'
>

export type AcsCredentialsListOptions = Record<string, never>

export type AcsCredentialsListAccessibleEntrancesParameters =
  RouteRequestBody<'/acs/credentials/list_accessible_entrances'>

/**
 * @deprecated Use AcsCredentialsListAccessibleEntrancesParameters instead.
 */
export type AcsCredentialsListAccessibleEntrancesParams =
  AcsCredentialsListAccessibleEntrancesParameters

/**
 * @deprecated Use AcsCredentialsListAccessibleEntrancesRequest instead.
 */
export type AcsCredentialsListAccessibleEntrancesResponse = SetNonNullable<
  Required<RouteResponse<'/acs/credentials/list_accessible_entrances'>>
>

export type AcsCredentialsListAccessibleEntrancesRequest = SeamHttpRequest<
  AcsCredentialsListAccessibleEntrancesResponse,
  'acs_entrances'
>

export type AcsCredentialsListAccessibleEntrancesOptions = Record<string, never>

export type AcsCredentialsUnassignParameters =
  RouteRequestBody<'/acs/credentials/unassign'>

/**
 * @deprecated Use AcsCredentialsUnassignParameters instead.
 */
export type AcsCredentialsUnassignBody = AcsCredentialsUnassignParameters

/**
 * @deprecated Use AcsCredentialsUnassignRequest instead.
 */
export type AcsCredentialsUnassignResponse = SetNonNullable<
  Required<RouteResponse<'/acs/credentials/unassign'>>
>

export type AcsCredentialsUnassignRequest = SeamHttpRequest<void, undefined>

export type AcsCredentialsUnassignOptions = Record<string, never>

export type AcsCredentialsUpdateParameters =
  RouteRequestBody<'/acs/credentials/update'>

/**
 * @deprecated Use AcsCredentialsUpdateParameters instead.
 */
export type AcsCredentialsUpdateBody = AcsCredentialsUpdateParameters

/**
 * @deprecated Use AcsCredentialsUpdateRequest instead.
 */
export type AcsCredentialsUpdateResponse = SetNonNullable<
  Required<RouteResponse<'/acs/credentials/update'>>
>

export type AcsCredentialsUpdateRequest = SeamHttpRequest<void, undefined>

export type AcsCredentialsUpdateOptions = Record<string, never>

/*
 * Automatically generated by codegen/smith.ts.
 * Do not edit this file or add other files to this directory.
 */

import type {
  RouteRequestBody,
  RouteRequestParams,
  RouteResponse,
} from '@seamapi/types/connect'

import { seamApiLtsVersion } from 'lib/lts-version.js'
import {
  getAuthHeadersForClientSessionToken,
  warnOnInsecureuserIdentifierKey,
} from 'lib/seam/connect/auth.js'
import { type Client, createClient } from 'lib/seam/connect/client.js'
import {
  isSeamHttpOptionsWithApiKey,
  isSeamHttpOptionsWithClient,
  isSeamHttpOptionsWithClientSessionToken,
  isSeamHttpOptionsWithConsoleSessionToken,
  isSeamHttpOptionsWithPersonalAccessToken,
  type SeamHttpFromPublishableKeyOptions,
  SeamHttpInvalidOptionsError,
  type SeamHttpOptions,
  type SeamHttpOptionsWithApiKey,
  type SeamHttpOptionsWithClient,
  type SeamHttpOptionsWithClientSessionToken,
  type SeamHttpOptionsWithConsoleSessionToken,
  type SeamHttpOptionsWithPersonalAccessToken,
  type SeamHttpRequestOptions,
} from 'lib/seam/connect/options.js'
import {
  limitToSeamHttpRequestOptions,
  parseOptions,
} from 'lib/seam/connect/parse-options.js'
import { SeamHttpClientSessions } from 'lib/seam/connect/routes/client-sessions/index.js'
import { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'
import { SeamPaginator } from 'lib/seam/connect/seam-paginator.js'
import type { SetNonNullable } from 'lib/types.js'

export class SeamHttpUnstableLocations {
  client: Client
  readonly defaults: Required<SeamHttpRequestOptions>
  readonly ltsVersion = seamApiLtsVersion
  static ltsVersion = seamApiLtsVersion

  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {
    const options = parseOptions(apiKeyOrOptions)
    if (!options.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    this.client = 'client' in options ? options.client : createClient(options)
    this.defaults = limitToSeamHttpRequestOptions(options)
  }

  static fromClient(
    client: SeamHttpOptionsWithClient['client'],
    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},
  ): SeamHttpUnstableLocations {
    const constructorOptions = { ...options, client }
    if (!isSeamHttpOptionsWithClient(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError('Missing client')
    }
    return new SeamHttpUnstableLocations(constructorOptions)
  }

  static fromApiKey(
    apiKey: SeamHttpOptionsWithApiKey['apiKey'],
    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},
  ): SeamHttpUnstableLocations {
    const constructorOptions = { ...options, apiKey }
    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError('Missing apiKey')
    }
    return new SeamHttpUnstableLocations(constructorOptions)
  }

  static fromClientSessionToken(
    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],
    options: Omit<
      SeamHttpOptionsWithClientSessionToken,
      'clientSessionToken'
    > = {},
  ): SeamHttpUnstableLocations {
    const constructorOptions = { ...options, clientSessionToken }
    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')
    }
    return new SeamHttpUnstableLocations(constructorOptions)
  }

  static async fromPublishableKey(
    publishableKey: string,
    userIdentifierKey: string,
    options: SeamHttpFromPublishableKeyOptions = {},
  ): Promise<SeamHttpUnstableLocations> {
    warnOnInsecureuserIdentifierKey(userIdentifierKey)
    const clientOptions = parseOptions({ ...options, publishableKey })
    if (isSeamHttpOptionsWithClient(clientOptions)) {
      throw new SeamHttpInvalidOptionsError(
        'The client option cannot be used with SeamHttpUnstableLocations.fromPublishableKey',
      )
    }
    const client = createClient(clientOptions)
    const clientSessions = SeamHttpClientSessions.fromClient(client)
    const { token } = await clientSessions.getOrCreate({
      user_identifier_key: userIdentifierKey,
    })
    return SeamHttpUnstableLocations.fromClientSessionToken(token, options)
  }

  static fromConsoleSessionToken(
    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],
    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],
    options: Omit<
      SeamHttpOptionsWithConsoleSessionToken,
      'consoleSessionToken' | 'workspaceId'
    > = {},
  ): SeamHttpUnstableLocations {
    const constructorOptions = { ...options, consoleSessionToken, workspaceId }
    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError(
        'Missing consoleSessionToken or workspaceId',
      )
    }
    return new SeamHttpUnstableLocations(constructorOptions)
  }

  static fromPersonalAccessToken(
    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],
    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],
    options: Omit<
      SeamHttpOptionsWithPersonalAccessToken,
      'personalAccessToken' | 'workspaceId'
    > = {},
  ): SeamHttpUnstableLocations {
    const constructorOptions = { ...options, personalAccessToken, workspaceId }
    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {
      throw new SeamHttpInvalidOptionsError(
        'Missing personalAccessToken or workspaceId',
      )
    }
    return new SeamHttpUnstableLocations(constructorOptions)
  }

  createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(
    request: SeamHttpRequest<TResponse, TResponseKey>,
  ): SeamPaginator<TResponse, TResponseKey> {
    return new SeamPaginator<TResponse, TResponseKey>(this, request)
  }

  async updateClientSessionToken(
    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],
  ): Promise<void> {
    const { headers } = this.client.defaults
    const authHeaders = getAuthHeadersForClientSessionToken({
      clientSessionToken,
    })
    for (const key of Object.keys(authHeaders)) {
      if (headers[key] == null) {
        throw new Error(
          'Cannot update a clientSessionToken on a client created without a clientSessionToken',
        )
      }
    }
    this.client.defaults.headers = { ...headers, ...authHeaders }
    const clientSessions = SeamHttpClientSessions.fromClient(this.client)
    await clientSessions.get()
  }

  addAcsEntrances(
    parameters?: UnstableLocationsAddAcsEntrancesParameters,
    options: UnstableLocationsAddAcsEntrancesOptions = {},
  ): UnstableLocationsAddAcsEntrancesRequest {
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return new SeamHttpRequest(this, {
      pathname: '/unstable_locations/add_acs_entrances',
      method: 'PUT',
      body: parameters,
      responseKey: undefined,
      options,
    })
  }

  addDevices(
    parameters?: UnstableLocationsAddDevicesParameters,
    options: UnstableLocationsAddDevicesOptions = {},
  ): UnstableLocationsAddDevicesRequest {
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return new SeamHttpRequest(this, {
      pathname: '/unstable_locations/add_devices',
      method: 'PUT',
      body: parameters,
      responseKey: undefined,
      options,
    })
  }

  create(
    parameters?: UnstableLocationsCreateParameters,
    options: UnstableLocationsCreateOptions = {},
  ): UnstableLocationsCreateRequest {
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return new SeamHttpRequest(this, {
      pathname: '/unstable_locations/create',
      method: 'POST',
      body: parameters,
      responseKey: 'location',
      options,
    })
  }

  delete(
    parameters?: UnstableLocationsDeleteParameters,
    options: UnstableLocationsDeleteOptions = {},
  ): UnstableLocationsDeleteRequest {
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return new SeamHttpRequest(this, {
      pathname: '/unstable_locations/delete',
      method: 'POST',
      body: parameters,
      responseKey: undefined,
      options,
    })
  }

  get(
    parameters?: UnstableLocationsGetParameters,
    options: UnstableLocationsGetOptions = {},
  ): UnstableLocationsGetRequest {
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return new SeamHttpRequest(this, {
      pathname: '/unstable_locations/get',
      method: 'POST',
      body: parameters,
      responseKey: 'location',
      options,
    })
  }

  list(
    parameters?: UnstableLocationsListParameters,
    options: UnstableLocationsListOptions = {},
  ): UnstableLocationsListRequest {
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return new SeamHttpRequest(this, {
      pathname: '/unstable_locations/list',
      method: 'GET',
      params: parameters,
      responseKey: 'locations',
      options,
    })
  }

  removeAcsEntrances(
    parameters?: UnstableLocationsRemoveAcsEntrancesParameters,
    options: UnstableLocationsRemoveAcsEntrancesOptions = {},
  ): UnstableLocationsRemoveAcsEntrancesRequest {
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return new SeamHttpRequest(this, {
      pathname: '/unstable_locations/remove_acs_entrances',
      method: 'POST',
      body: parameters,
      responseKey: undefined,
      options,
    })
  }

  removeDevices(
    parameters?: UnstableLocationsRemoveDevicesParameters,
    options: UnstableLocationsRemoveDevicesOptions = {},
  ): UnstableLocationsRemoveDevicesRequest {
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return new SeamHttpRequest(this, {
      pathname: '/unstable_locations/remove_devices',
      method: 'POST',
      body: parameters,
      responseKey: undefined,
      options,
    })
  }

  update(
    parameters?: UnstableLocationsUpdateParameters,
    options: UnstableLocationsUpdateOptions = {},
  ): UnstableLocationsUpdateRequest {
    if (!this.defaults.isUndocumentedApiEnabled) {
      throw new Error(
        'Cannot use undocumented API without isUndocumentedApiEnabled',
      )
    }
    return new SeamHttpRequest(this, {
      pathname: '/unstable_locations/update',
      method: 'PATCH',
      body: parameters,
      responseKey: 'location',
      options,
    })
  }
}

export type UnstableLocationsAddAcsEntrancesParameters =
  RouteRequestBody<'/unstable_locations/add_acs_entrances'>

/**
 * @deprecated Use UnstableLocationsAddAcsEntrancesParameters instead.
 */
export type UnstableLocationsAddAcsEntrancesBody =
  UnstableLocationsAddAcsEntrancesParameters

/**
 * @deprecated Use UnstableLocationsAddAcsEntrancesRequest instead.
 */
export type UnstableLocationsAddAcsEntrancesResponse = SetNonNullable<
  Required<RouteResponse<'/unstable_locations/add_acs_entrances'>>
>

export type UnstableLocationsAddAcsEntrancesRequest = SeamHttpRequest<
  void,
  undefined
>

export type UnstableLocationsAddAcsEntrancesOptions = Record<string, never>

export type UnstableLocationsAddDevicesParameters =
  RouteRequestBody<'/unstable_locations/add_devices'>

/**
 * @deprecated Use UnstableLocationsAddDevicesParameters instead.
 */
export type UnstableLocationsAddDevicesBody =
  UnstableLocationsAddDevicesParameters

/**
 * @deprecated Use UnstableLocationsAddDevicesRequest instead.
 */
export type UnstableLocationsAddDevicesResponse = SetNonNullable<
  Required<RouteResponse<'/unstable_locations/add_devices'>>
>

export type UnstableLocationsAddDevicesRequest = SeamHttpRequest<
  void,
  undefined
>

export type UnstableLocationsAddDevicesOptions = Record<string, never>

export type UnstableLocationsCreateParameters =
  RouteRequestBody<'/unstable_locations/create'>

/**
 * @deprecated Use UnstableLocationsCreateParameters instead.
 */
export type UnstableLocationsCreateBody = UnstableLocationsCreateParameters

/**
 * @deprecated Use UnstableLocationsCreateRequest instead.
 */
export type UnstableLocationsCreateResponse = SetNonNullable<
  Required<RouteResponse<'/unstable_locations/create'>>
>

export type UnstableLocationsCreateRequest = SeamHttpRequest<
  UnstableLocationsCreateResponse,
  'location'
>

export type UnstableLocationsCreateOptions = Record<string, never>

export type UnstableLocationsDeleteParameters =
  RouteRequestBody<'/unstable_locations/delete'>

/**
 * @deprecated Use UnstableLocationsDeleteParameters instead.
 */
export type UnstableLocationsDeleteParams = UnstableLocationsDeleteParameters

/**
 * @deprecated Use UnstableLocationsDeleteRequest instead.
 */
export type UnstableLocationsDeleteResponse = SetNonNullable<
  Required<RouteResponse<'/unstable_locations/delete'>>
>

export type UnstableLocationsDeleteRequest = SeamHttpRequest<void, undefined>

export type UnstableLocationsDeleteOptions = Record<string, never>

export type UnstableLocationsGetParameters =
  RouteRequestBody<'/unstable_locations/get'>

/**
 * @deprecated Use UnstableLocationsGetParameters instead.
 */
export type UnstableLocationsGetParams = UnstableLocationsGetParameters

/**
 * @deprecated Use UnstableLocationsGetRequest instead.
 */
export type UnstableLocationsGetResponse = SetNonNullable<
  Required<RouteResponse<'/unstable_locations/get'>>
>

export type UnstableLocationsGetRequest = SeamHttpRequest<
  UnstableLocationsGetResponse,
  'location'
>

export type UnstableLocationsGetOptions = Record<string, never>

export type UnstableLocationsListParameters =
  RouteRequestParams<'/unstable_locations/list'>

/**
 * @deprecated Use UnstableLocationsListParameters instead.
 */
export type UnstableLocationsListParams = UnstableLocationsListParameters

/**
 * @deprecated Use UnstableLocationsListRequest instead.
 */
export type UnstableLocationsListResponse = SetNonNullable<
  Required<RouteResponse<'/unstable_locations/list'>>
>

export type UnstableLocationsListRequest = SeamHttpRequest<
  UnstableLocationsListResponse,
  'locations'
>

export type UnstableLocationsListOptions = Record<string, never>

export type UnstableLocationsRemoveAcsEntrancesParameters =
  RouteRequestBody<'/unstable_locations/remove_acs_entrances'>

/**
 * @deprecated Use UnstableLocationsRemoveAcsEntrancesParameters instead.
 */
export type UnstableLocationsRemoveAcsEntrancesParams =
  UnstableLocationsRemoveAcsEntrancesParameters

/**
 * @deprecated Use UnstableLocationsRemoveAcsEntrancesRequest instead.
 */
export type UnstableLocationsRemoveAcsEntrancesResponse = SetNonNullable<
  Required<RouteResponse<'/unstable_locations/remove_acs_entrances'>>
>

export type UnstableLocationsRemoveAcsEntrancesRequest = SeamHttpRequest<
  void,
  undefined
>

export type UnstableLocationsRemoveAcsEntrancesOptions = Record<string, never>

export type UnstableLocationsRemoveDevicesParameters =
  RouteRequestBody<'/unstable_locations/remove_devices'>

/**
 * @deprecated Use UnstableLocationsRemoveDevicesParameters instead.
 */
export type UnstableLocationsRemoveDevicesParams =
  UnstableLocationsRemoveDevicesParameters

/**
 * @deprecated Use UnstableLocationsRemoveDevicesRequest instead.
 */
export type UnstableLocationsRemoveDevicesResponse = SetNonNullable<
  Required<RouteResponse<'/unstable_locations/remove_devices'>>
>

export type UnstableLocationsRemoveDevicesRequest = SeamHttpRequest<
  void,
  undefined
>

export type UnstableLocationsRemoveDevicesOptions = Record<string, never>

export type UnstableLocationsUpdateParameters =
  RouteRequestBody<'/unstable_locations/update'>

/**
 * @deprecated Use UnstableLocationsUpdateParameters instead.
 */
export type UnstableLocationsUpdateBody = UnstableLocationsUpdateParameters

/**
 * @deprecated Use UnstableLocationsUpdateRequest instead.
 */
export type UnstableLocationsUpdateResponse = SetNonNullable<
  Required<RouteResponse<'/unstable_locations/update'>>
>

export type UnstableLocationsUpdateRequest = SeamHttpRequest<
  UnstableLocationsUpdateResponse,
  'location'
>

export type UnstableLocationsUpdateOptions = Record<string, never>
